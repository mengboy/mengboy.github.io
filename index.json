[{"content":"For developers who love the power of Linux tools but work on Windows, the Windows Subsystem for Linux (WSL) is a game-changer. Cursor, the AI-first code editor, can further enhance this setup by integrating with Model Control Program (MCP) servers. Running these MCP servers directly within your WSL environment keeps your development workflow clean and consolidated. This guide will walk you through configuring Cursor to use MCP servers running in WSL.\nWhat is MCP? MCP (Model Control Protocol) is a protocol that allows AI models, like those in Cursor, to securely interact with various tools and data sources. These tools, or \u0026ldquo;MCP servers,\u0026rdquo; can perform actions like web searches, file system operations, or even browser interactions, providing the AI with a richer context and more capabilities.\nWhy Run MCP Servers in WSL? Consistency: Keep your entire development toolchain within the Linux environment you\u0026rsquo;re comfortable with. Simplified Paths: Avoid complexities with Windows vs. Linux path translations for tools that access the file system. Leverage Linux-specific Tools: Some MCP servers or their dependencies might work better or exclusively in a Linux environment. Containment: Keep Node.js versions and other dependencies required by MCP servers managed within WSL, separate from your Windows system. Prerequisites Before you begin, ensure you have the following:\nWSL Installed: A working WSL installation with a Linux distribution (e.g., Ubuntu). Node.js and npx in WSL: Node.js and npx (which comes with npm) must be installed inside your WSL distribution. It\u0026rsquo;s highly recommended to use a version manager like nvm (Node Version Manager) within WSL to manage Node.js versions. This helps avoid permission issues and allows easy switching between Node.js versions. Cursor IDE: Installed on your Windows machine. Configuration Steps The key to running MCP servers in WSL is to tell Cursor how to launch them using the WSL command-line interface. This is done by editing the mcp.json file.\n1. Locate or Create mcp.json Cursor stores its MCP server configurations in a file named mcp.json. On Windows, you can typically find this file in:\nC:\\\\Users\\\\\u0026lt;YourUserName\u0026gt;\\\\.cursor\\\\mcp.json\nReplace \u0026lt;YourUserName\u0026gt; with your actual Windows username. If the file or .cursor directory doesn\u0026rsquo;t exist, Cursor might create it when you first try to add an MCP server through its UI, or you might need to create it manually.\n2. Understanding mcp.json Structure The mcp.json file contains a JSON object, where each key under mcpServers represents a configured MCP server. Here\u0026rsquo;s a basic structure:\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;your-mcp-server-name\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;executable_or_wsl\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;argument1\u0026#34;, \u0026#34;argument2\u0026#34;, \u0026#34;command_to_run_in_wsl\u0026#34;], \u0026#34;enabled\u0026#34;: true // Other options like \u0026#34;env\u0026#34;, \u0026#34;workingDirectory\u0026#34; can also be specified } } } 3. Core Configuration for WSL To run an MCP server (which is typically an npx command) within WSL, you\u0026rsquo;ll configure a server entry as follows:\n\u0026quot;command\u0026quot;: Set this to \u0026quot;wsl\u0026quot;.\n\u0026quot;args\u0026quot;: This will be an array. The first elements tell wsl which shell to use and to execute a command string. The final element is the command string itself.\nExample for bash: [\u0026quot;bash\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;npx @some-mcp/package --port {{port}}\u0026quot;] Example for zsh: [\u0026quot;zsh\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;npx @some-mcp/package --port {{port}}\u0026quot;] (Note: {{port}} is a placeholder that Cursor often uses to inject a port number for the MCP server to listen on. Check the specific MCP server\u0026rsquo;s documentation if it requires a port.)\n4. Handling Shell Environment (Crucial for nvm users) A common issue is that when Cursor invokes wsl ... npx ..., the npx command might not be found, or it might not use the Node.js version you expect (especially if you use nvm). This is because the non-interactive shell session started by wsl might not load your full shell profile (e.g., .bashrc, .zshrc), where nvm and other PATH modifications are usually configured.\nHere are two reliable solutions:\nSolution A: Using a Shell Script (Recommended for Clarity)\nThis method involves creating a small shell script within your WSL environment that sets up the environment and then runs the npx command.\nCreate the Script in WSL: Open your WSL terminal and create a script, for example, ~/run_browsermcp.sh:\n#!/bin/zsh # Or use #!/bin/bash if you use bash # Source your shell\u0026#39;s rc file to load nvm and other environment settings # Adjust the path to your rc file if necessary if [ -f \u0026#34;$HOME/.zshrc\u0026#34; ]; then source \u0026#34;$HOME/.zshrc\u0026#34; elif [ -f \u0026#34;$HOME/.bashrc\u0026#34; ]; then source \u0026#34;$HOME/.bashrc\u0026#34; fi # For debugging: check which npx is being used and Node version # which npx # node -v # The actual npx command for your MCP server # Replace with the specific MCP server command you need npx @browsermcp/mcp@latest --port {{port}} a example:\n#!/bin/sh zsh -c \u0026#34;source /home/vector/.zshrc \u0026amp;\u0026amp; npx @browsermcp/mcp@latest\u0026#34; (Note: The script directly invokes zsh -c. If using this approach, ensure the script itself is executable and the path to .zshrc is correct.)\nMake the Script Executable: In your WSL terminal:\nchmod +x ~/run_browsermcp.sh (Adjust script name as needed).\nConfigure mcp.json: Modify your mcp.json to execute this script. If your WSL username is vector and you use zsh, and the script is at /home/vector/run_browsermcp.sh:\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;browsermcp-wsl\u0026#34;: { // Give it a descriptive name \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;zsh\u0026#34;, // Or \u0026#34;bash\u0026#34; \u0026#34;-c\u0026#34;, \u0026#34;/home/vector/run_browsermcp.sh\u0026#34; // Full path to your script within WSL ], \u0026#34;enabled\u0026#34;: true } } } This matches your provided mcp.json structure for browsermcp:\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;browsermcp\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;zsh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;/home/vector/browsermcp.sh\u0026#34; // Path from your example ] } } } Solution B: Directly Sourcing in mcp.json\nYou can try to source your rc file directly in the args. This can sometimes be less reliable depending on the complexity of your rc file, but it\u0026rsquo;s more concise if it works.\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;my-mcp-server-bash\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;bash\u0026#34;, \u0026#34;-ic\u0026#34;, // Note: -i for interactive to potentially help source rc files \u0026#34;source ~/.bashrc \u0026amp;\u0026amp; npx @some-mcp/package --port {{port}}\u0026#34; ], \u0026#34;enabled\u0026#34;: true }, \u0026#34;my-mcp-server-zsh\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;zsh\u0026#34;, \u0026#34;-ic\u0026#34;, // Note: -i for interactive \u0026#34;source ~/.zshrc \u0026amp;\u0026amp; npx @some-mcp/package --port {{port}}\u0026#34; ], \u0026#34;enabled\u0026#34;: true } } } If nvm is used and the above still fails, you might need to provide the absolute path to nvm.sh and the npx executable installed by nvm:\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;my-mcp-nvm-direct\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;bash\u0026#34;, // Or \u0026#34;zsh\u0026#34; \u0026#34;-c\u0026#34;, // Replace /home/your_user and YOUR_NODE_VERSION appropriately \u0026#34;source /home/your_user/.nvm/nvm.sh \u0026amp;\u0026amp; /home/your_user/.nvm/versions/node/vXX.YY.Z/bin/npx @some-mcp/package --port {{port}}\u0026#34; ], \u0026#34;enabled\u0026#34;: true } } } To find the full path to npx after sourcing nvm.sh and selecting a Node version with nvm use, run which npx in your WSL terminal.\n5. Example: Configuring a Browser Interaction MCP Let\u0026rsquo;s use @browsermcp/mcp as an example, as it\u0026rsquo;s common.\nUsing Solution A (shell script ~/run_browsermcp.sh as defined before):\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;browsermcp-wsl\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;zsh\u0026#34;, // Or \u0026#34;bash\u0026#34; if your script and environment use bash \u0026#34;-c\u0026#34;, \u0026#34;/home/YOUR_WSL_USERNAME/run_browsermcp.sh\u0026#34; // Adjust path ], \u0026#34;enabled\u0026#34;: true, \u0026#34;env\u0026#34;: { // Optional: if the MCP server needs specific environment variables // \u0026#34;DEBUG\u0026#34;: \u0026#34;true\u0026#34; } } } } Remember to replace YOUR_WSL_USERNAME with your actual WSL username.\nVerification After saving mcp.json:\nRestart Cursor or go to Cursor Settings -\u0026gt; Features -\u0026gt; MCP and click the refresh icon next to one of your servers or for all MCP servers. A green dot next to the server name in the MCP settings indicates Cursor has successfully connected to it. You might see a new terminal window pop up (launched by wsl). This window must remain open for the MCP server to function. This is expected behavior when running MCP servers this way. Test the MCP server by asking Cursor to perform an action that uses it (e.g., for @browsermcp/mcp, ask it to \u0026ldquo;take a screenshot of the current browser tab\u0026rdquo; after setting up the companion browser extension). Troubleshooting npx: command not found or wrong Node version: This almost always means the shell environment within WSL isn\u0026rsquo;t being set up correctly. Double-check paths in your shell script or direct command. Ensure nvm is sourced correctly. Try adding export NVM_DIR=\u0026quot;$HOME/.nvm\u0026quot; and [ -s \u0026quot;$NVM_DIR/nvm.sh\u0026quot; ] \u0026amp;\u0026amp; \\. \u0026quot;$NVM_DIR/nvm.sh\u0026quot; explicitly at the start of your script or command string if using nvm. Verify that node and npx are indeed installed in your WSL distribution and accessible after sourcing your rc file. MCP Server Fails to Connect (No Green Dot): Check the output in the WSL terminal window that pops up. It might contain error messages. Ensure the npx command for the MCP server is correct and includes any necessary arguments like --port {{port}}. Some MCPs might auto-assign ports if not specified. Firewall issues: Less common with WSL2\u0026rsquo;s networking model, but ensure Windows Firewall isn\u0026rsquo;t blocking connections to WSL. \u0026ldquo;Blank\u0026rdquo; Terminal Window: As mentioned, a terminal window will open for each MCP server launched via wsl. This is normal. Closing it will stop the MCP server. Conclusion Configuring Cursor to run MCP servers within your WSL environment provides a streamlined and powerful development setup on Windows. By carefully setting up your mcp.json and ensuring your WSL shell environment is correctly sourced, you can seamlessly integrate AI capabilities into your Linux-based workflows. The shell script method (Solution A) is generally the most robust way to handle environments managed by tools like nvm.\nHappy coding with Cursor and WSL! ","permalink":"https://www.mfun.ink/english/post/installing-cursor-mcp-in-wsl/","summary":"\u003cp\u003eFor developers who love the power of Linux tools but work on Windows, the Windows Subsystem for Linux (WSL) is a game-changer. Cursor, the AI-first code editor, can further enhance this setup by integrating with Model Control Program (MCP) servers. Running these MCP servers directly within your WSL environment keeps your development workflow clean and consolidated. This guide will walk you through configuring Cursor to use MCP servers running in WSL.\u003c/p\u003e","title":"Installing Cursor MCP Servers in WSL for a Seamless Dev Experience"},{"content":"对于喜欢 Linux 工具的强大功能但在 Windows 上工作的开发人员来说，Windows Subsystem for Linux (WSL) 是一个改变游戏规则的工具。Cursor，这款 AI 优先的代码编辑器，可以通过与模型控制程序 (MCP) 服务器集成来进一步增强此设置。直接在你的 WSL 环境中运行这些 MCP 服务器可以使你的开发工作流程保持整洁和统一。本指南将引导你完成配置 Cursor 以使用在 WSL 中运行的 MCP 服务器的步骤。\nMCP 是什么？ MCP (Model Control Protocol，模型控制协议) 是一种协议，允许像 Cursor 中的 AI 模型安全地与各种工具和数据源进行交互。这些工具，或称\u0026quot;MCP 服务器\u0026quot;，可以执行诸如 Web 搜索、文件系统操作甚至浏览器交互等操作，从而为 AI 提供更丰富的上下文和更多功能。\n为什么要在 WSL 中运行 MCP 服务器？ 一致性： 将你的整个开发工具链保持在你习惯的 Linux 环境中。 简化的路径： 避免在访问文件系统的工具中处理 Windows 与 Linux 路径转换的复杂性。 利用 Linux 特定的工具： 某些 MCP 服务器或其依赖项可能在 Linux 环境中运行得更好或仅能在 Linux 环境中运行。 隔离性： 将 MCP 服务器所需的 Node.js 版本和其他依赖项管理在 WSL 内部，与你的 Windows 系统分开。 先决条件 在开始之前，请确保你具备以下条件：\n已安装 WSL： 一个正常工作的 WSL，并已设置好一个 Linux 发行版 (例如 Ubuntu)。 WSL 中的 Node.js 和 npx： Node.js 和 npx (npm 自带) 必须安装在你的 WSL 发行版内部。 强烈建议在 WSL 中使用像 nvm (Node Version Manager) 这样的版本管理器来管理 Node.js 版本。这有助于避免权限问题，并允许轻松切换 Node.js 版本。 Cursor IDE： 已安装在你的 Windows 计算机上。 配置步骤 在 WSL 中运行 MCP 服务器的关键是告诉 Cursor 如何使用 WSL 命令行界面启动它们。这通过编辑 mcp.json 文件来完成。\n1. 定位或创建 mcp.json Cursor将其 MCP 服务器配置存储在一个名为 mcp.json 的文件中。在 Windows 上，你通常可以在以下位置找到此文件：\nC:\\\\Users\\\\\u0026lt;YourUserName\u0026gt;\\\\.cursor\\\\mcp.json\n将 \u0026lt;YourUserName\u0026gt; 替换为你的实际 Windows 用户名。如果该文件或 .cursor 目录不存在，Cursor 可能会在你首次尝试通过其 UI 添加 MCP 服务器时创建它，或者你可能需要手动创建它。\n2. 理解 mcp.json 结构 mcp.json 文件包含一个 JSON 对象，其中 mcpServers下的每个键代表一个已配置的 MCP 服务器。这是一个基本结构：\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;your-mcp-server-name\u0026#34;: { // 你的 MCP 服务器名称 \u0026#34;command\u0026#34;: \u0026#34;executable_or_wsl\u0026#34;, // 可执行文件或 wsl \u0026#34;args\u0026#34;: [\u0026#34;argument1\u0026#34;, \u0026#34;argument2\u0026#34;, \u0026#34;command_to_run_in_wsl\u0026#34;], // 参数 \u0026#34;enabled\u0026#34;: true // 是否启用 // 其他选项，如 \u0026#34;env\u0026#34;, \u0026#34;workingDirectory\u0026#34; 也可以指定 } } } 3. WSL 的核心配置 要在 WSL 中运行 MCP 服务器 (通常是一个 npx 命令)，你需要按如下方式配置服务器条目：\n\u0026quot;command\u0026quot;: 将此设置为 \u0026quot;wsl\u0026quot;。\n\u0026quot;args\u0026quot;: 这将是一个数组。第一个元素告诉 wsl 使用哪个 shell 并执行一个命令字符串。最后一个元素是命令字符串本身。\nbash 示例: [\u0026quot;bash\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;npx @some-mcp/package --port {{port}}\u0026quot;] zsh 示例: [\u0026quot;zsh\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;npx @some-mcp/package --port {{port}}\u0026quot;] (注意: {{port}} 是 Cursor 通常用来注入端口号供 MCP 服务器侦听的占位符。如果 MCP 服务器需要端口，请查阅其特定文档。)\n4. 处理 Shell 环境 (对 nvm 用户至关重要) 一个常见的问题是，当 Cursor 调用 wsl ... npx ... 时，可能找不到 npx 命令，或者它可能未使用你期望的 Node.js 版本 (特别是如果你使用 nvm)。这是因为 wsl 启动的非交互式 shell 会话可能不会加载你的完整 shell 配置文件 (例如 .bashrc、.zshrc)，而 nvm 和其他 PATH 修改通常是在这些文件中配置的。\n以下是两种可靠的解决方案：\n解决方案 A：使用 Shell 脚本 (推荐，更清晰)\n此方法涉及在你的 WSL 环境中创建一个小型 shell 脚本，该脚本负责设置环境然后运行 npx 命令。\n在 WSL 中创建脚本： 打开你的 WSL 终端并创建一个脚本，例如 ~/run_browsermcp.sh：\n#!/bin/zsh # 如果你使用 bash，则使用 #!/bin/bash # 加载 shell 的 rc 文件以配置 nvm 和其他环境变量 # 如果需要，请调整 rc 文件的路径 if [ -f \u0026#34;$HOME/.zshrc\u0026#34; ]; then source \u0026#34;$HOME/.zshrc\u0026#34; elif [ -f \u0026#34;$HOME/.bashrc\u0026#34; ]; then source \u0026#34;$HOME/.bashrc\u0026#34; fi # 用于调试：检查正在使用哪个 npx 以及 Node 版本 # which npx # node -v # 你的 MCP 服务器的实际 npx 命令 # 替换为你需要的特定 MCP 服务器命令 npx @browsermcp/mcp@latest --port {{port}} 一个例子：\n#!/bin/sh zsh -c \u0026#34;source /home/vector/.zshrc \u0026amp;\u0026amp; npx @browsermcp/mcp@latest\u0026#34; (注意：直接调用 zsh -c。如果使用此方法，请确保脚本本身是可执行的，并且 .zshrc 的路径正确。)\n使脚本可执行： 在你的 WSL 终端中：\nchmod +x ~/run_browsermcp.sh (根据需要调整脚本名称)。\n配置 mcp.json： 修改你的 mcp.json 以执行此脚本。如果你的 WSL 用户名是 vector，你使用 zsh，并且脚本位于 /home/vector/run_browsermcp.sh：\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;browsermcp-wsl\u0026#34;: { // 给它一个描述性的名称 \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;zsh\u0026#34;, // 或 \u0026#34;bash\u0026#34; \u0026#34;-c\u0026#34;, \u0026#34;/home/vector/run_browsermcp.sh\u0026#34; // WSL 中脚本的完整路径 ], \u0026#34;enabled\u0026#34;: true } } } 这与你为 browsermcp 提供的 mcp.json 结构相匹配：\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;browsermcp\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;zsh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;/home/vector/browsermcp.sh\u0026#34; // 你示例中的路径 ] } } } 解决方案 B：直接在 mcp.json 中加载 (Sourcing)\n你可以尝试直接在 args 中加载你的 rc 文件。根据 rc 文件的复杂性，这有时可能不太可靠，但如果可行，则更为简洁。\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;my-mcp-server-bash\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;bash\u0026#34;, \u0026#34;-ic\u0026#34;, // 注意：-i 表示交互式，可能有助于加载 rc 文件 \u0026#34;source ~/.bashrc \u0026amp;\u0026amp; npx @some-mcp/package --port {{port}}\u0026#34; ], \u0026#34;enabled\u0026#34;: true }, \u0026#34;my-mcp-server-zsh\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;zsh\u0026#34;, \u0026#34;-ic\u0026#34;, // 注意：-i 表示交互式 \u0026#34;source ~/.zshrc \u0026amp;\u0026amp; npx @some-mcp/package --port {{port}}\u0026#34; ], \u0026#34;enabled\u0026#34;: true } } } 如果使用 nvm 并且上述方法仍然失败，你可能需要提供 nvm.sh 和由 nvm 安装的 npx 可执行文件的绝对路径：\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;my-mcp-nvm-direct\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;bash\u0026#34;, // 或 \u0026#34;zsh\u0026#34; \u0026#34;-c\u0026#34;, // 相应地替换 /home/your_user 和 YOUR_NODE_VERSION \u0026#34;source /home/your_user/.nvm/nvm.sh \u0026amp;\u0026amp; /home/your_user/.nvm/versions/node/vXX.YY.Z/bin/npx @some-mcp/package --port {{port}}\u0026#34; ], \u0026#34;enabled\u0026#34;: true } } } 要在加载 nvm.sh 并使用 nvm use 选择 Node 版本后找到 npx 的完整路径，请在 WSL 终端中运行 which npx。\n5. 示例：配置浏览器交互 MCP 让我们以 @browsermcp/mcp 为例，因为它很常见。\n使用解决方案 A (如前定义的 shell 脚本 ~/run_browsermcp.sh)：\n{ \u0026#34;mcpServers\u0026#34;: { \u0026#34;browsermcp-wsl\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;zsh\u0026#34;, // 如果你的脚本和环境使用 bash，则为 \u0026#34;bash\u0026#34; \u0026#34;-c\u0026#34;, \u0026#34;/home/YOUR_WSL_USERNAME/run_browsermcp.sh\u0026#34; // 调整路径 ], \u0026#34;enabled\u0026#34;: true, \u0026#34;env\u0026#34;: { // 可选：如果 MCP 服务器需要特定的环境变量 // \u0026#34;DEBUG\u0026#34;: \u0026#34;true\u0026#34; } } } } 请记住将 YOUR_WSL_USERNAME 替换为你的实际 WSL 用户名。\n验证 保存 mcp.json 后：\n重新启动 Cursor 或转到 Cursor 设置 -\u0026gt; 功能 -\u0026gt; MCP，然后单击某个服务器旁边或所有 MCP 服务器的刷新图标。 MCP 设置中服务器名称旁边的绿点表示 Cursor 已成功连接到它。 你可能会看到一个由 wsl 启动的新终端窗口弹出。此窗口必须保持打开状态才能使 MCP 服务器正常工作。这是以这种方式运行 MCP 服务器时的预期行为。 通过要求 Cursor 执行使用该 MCP 服务器的操作来测试它 (例如，对于 @browsermcp/mcp，在设置好配套的浏览器扩展后，要求它\u0026quot;截取当前浏览器标签页的屏幕截图\u0026quot;)。 故障排除 npx: command not found 或 Node 版本错误： 这几乎总是意味着 WSL 内的 shell 环境未正确设置。 仔细检查 shell 脚本或直接命令中的路径。 确保 nvm 已正确加载。 如果使用 nvm，请尝试在脚本或命令字符串的开头明确添加 export NVM_DIR=\u0026quot;$HOME/.nvm\u0026quot; 和 [ -s \u0026quot;$NVM_DIR/nvm.sh\u0026quot; ] \u0026amp;\u0026amp; \\. \u0026quot;$NVM_DIR/nvm.sh\u0026quot;。 验证 node 和 npx 确实已安装在你的 WSL 发行版中，并且在加载 rc 文件后可以访问。 MCP 服务器无法连接 (没有绿点)： 检查弹出的 WSL 终端窗口中的输出。它可能包含错误消息。 确保 MCP 服务器的 npx 命令正确，并包含任何必要的参数，如 --port {{port}}。某些 MCP 如果未指定端口，可能会自动分配端口。 防火墙问题：在使用 WSL2 的网络模型时不太常见，但请确保 Windows 防火墙没有阻止与 WSL 的连接。 \u0026ldquo;空白\u0026quot;终端窗口： 如前所述，每个通过 wsl 启动的 MCP 服务器都会打开一个终端窗口。这是正常的。关闭它将停止 MCP 服务器。 结论 配置 Cursor 以在你的 WSL 环境中运行 MCP 服务器，可在 Windows 上提供简化且强大的开发设置。通过仔细设置你的 mcp.json 并确保正确加载 WSL shell 环境，你可以将 AI 功能无缝集成到基于 Linux 的工作流程中。对于处理由 nvm 等工具管理的环境，shell 脚本方法 (解决方案 A) 通常是最稳健的方法。\n祝你使用 Cursor 和 WSL 编码愉快！ ","permalink":"https://www.mfun.ink/2025/05/13/installing-cursor-mcp-in-wsl/","summary":"\u003cp\u003e对于喜欢 Linux 工具的强大功能但在 Windows 上工作的开发人员来说，Windows Subsystem for Linux (WSL) 是一个改变游戏规则的工具。Cursor，这款 AI 优先的代码编辑器，可以通过与模型控制程序 (MCP) 服务器集成来进一步增强此设置。直接在你的 WSL 环境中运行这些 MCP 服务器可以使你的开发工作流程保持整洁和统一。本指南将引导你完成配置 Cursor 以使用在 WSL 中运行的 MCP 服务器的步骤。\u003c/p\u003e","title":"在 WSL 中安装 Cursor MCP 服务器以获得无缝开发体验"},{"content":"Introduction Hexo and Hugo are both excellent static site generators, but due to performance considerations or personal preference, you might want to migrate from Hexo to Hugo. This article will document the complete migration process in detail, including configuration, article conversion, multilingual support, and more.\nPreparation Before starting the migration, you need to install Hugo and understand the basic site creation process. Here are the official documentation links, which are recommended to follow:\n1. Install Hugo Hugo provides multiple installation methods, including pre-compiled binaries and package managers. Based on your operating system, please refer to the official installation documentation:\nHugo Official Installation Guide 2. Create a Hugo Site After installing Hugo, you can create a new Hugo site using the following command:\nhugo new site your-site-name cd your-site-name For more detailed information about creating a site, please refer to:\nHugo Quick Start Guide 3. Install a Theme Hugo has a rich selection of themes to choose from. You can browse and select a suitable theme on the Hugo Themes page.\nThe basic steps to install a theme are as follows:\ngit init git submodule add https://github.com/theme-author/theme-name.git themes/theme-name Then set the theme in your configuration file:\necho \u0026#34;theme = \u0026#39;theme-name\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml Site Configuration Create a hugo.toml configuration file:\nbaseURL = \u0026#39;https://www.mfun.ink/\u0026#39; defaultContentLanguage = \u0026#39;zh-cn\u0026#39; title = \u0026#34;Mengboy\u0026#39;s Blog\u0026#34; theme = \u0026#39;PaperMod\u0026#39; hasCJKLanguage = true # Google Analytics configuration GoogleAnalytics = \u0026#34;G-xxxxxxx\u0026#34; # Please replace with your Google Analytics ID # Add permalink configuration to make link format compatible with Hexo [permalinks] post = \u0026#39;/:year/:month/:day/:contentbasename/\u0026#39; # PaperMod theme parameters [params] # Set environment to production, which is important for Google Analytics and AdSense loading env = \u0026#34;production\u0026#34; # Author information author = \u0026#34;mengboy\u0026#34; # Main sections mainSections = [\u0026#39;post\u0026#39;] defaultTheme = \u0026#34;auto\u0026#34; ShowReadingTime = true ShowShareButtons = true ShowPostNavLinks = true ShowBreadCrumbs = true ShowCodeCopyButtons = true ShowRssButtonInSectionTermList = true disableSpecial1stPost = false disableScrollToTop = false hideMeta = false hideFooter = false # Website favicon settings [params.assets] favicon = \u0026#34;/images/site/favicon.png\u0026#34; favicon16x16 = \u0026#34;/images/site/favicon.png\u0026#34; favicon32x32 = \u0026#34;/images/site/favicon.png\u0026#34; apple_touch_icon = \u0026#34;/images/site/favicon.png\u0026#34; # Google AdSense configuration, requires custom extension or theme support googleAdsense = \u0026#34;ca-pub-xxxxxxxxxx\u0026#34; # Please replace with your Google AdSense publisher ID googleAdsenseSlot = \u0026#34;xxxxxxxx\u0026#34; # Please replace with your Google AdSense ad unit ID # Sidebar configuration [params.profileMode] enabled = false title = \u0026#34;mengboy\u0026#34; subtitle = \u0026#34;Recording Learning and Life\u0026#34; imageUrl = \u0026#34;images/site/favicon.png\u0026#34; imageWidth = 120 imageHeight = 120 # Social icons [[params.socialIcons]] name = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/mengboy\u0026#34; # Search settings [params.fuseOpts] isCaseSensitive = false shouldSort = true location = 0 distance = 1000 threshold = 0.4 minMatchCharLength = 0 keys = [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] # Allow HTML [markup.goldmark.renderer] unsafe = true # Ignore HTML warnings ignoreWarnings = [\u0026#39;raw-html\u0026#39;] ignoreLogs = [\u0026#39;warning-goldmark-raw-html\u0026#39;] [languages] [languages.zh-cn] contentDir = \u0026#39;content\u0026#39; languageName = \u0026#39;简体中文\u0026#39; weight = 10 title = \u0026#34;Mengboy\u0026#39;s Blog\u0026#34; # Chinese homepage information [languages.zh-cn.params] [languages.zh-cn.params.homeInfoParams] Title = \u0026#34;记录学习与生活点滴\u0026#34; # Chinese menu [languages.zh-cn.menu] [[languages.zh-cn.menu.main]] identifier = \u0026#34;home\u0026#34; name = \u0026#34;首页\u0026#34; url = \u0026#34;/\u0026#34; weight = 10 [[languages.zh-cn.menu.main]] identifier = \u0026#34;categories\u0026#34; name = \u0026#34;分类\u0026#34; url = \u0026#34;/categories/\u0026#34; weight = 20 [[languages.zh-cn.menu.main]] identifier = \u0026#34;tags\u0026#34; name = \u0026#34;标签\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 30 [[languages.zh-cn.menu.main]] identifier = \u0026#34;archives\u0026#34; name = \u0026#34;归档\u0026#34; url = \u0026#34;/archives/\u0026#34; weight = 40 [[languages.zh-cn.menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;关于我\u0026#34; url = \u0026#34;/about/\u0026#34; weight = 50 [languages.en] contentDir = \u0026#39;content/english\u0026#39; languageName = \u0026#39;English\u0026#39; weight = 20 title = \u0026#34;Mengboy\u0026#39;s Blog\u0026#34; # English homepage information [languages.en.params] [languages.en.params.homeInfoParams] Title = \u0026#34;Recording Learning and Life\u0026#34; # English menu [languages.en.menu] [[languages.en.menu.main]] identifier = \u0026#34;home\u0026#34; name = \u0026#34;Home\u0026#34; url = \u0026#34;/\u0026#34; weight = 10 [[languages.en.menu.main]] identifier = \u0026#34;categories\u0026#34; name = \u0026#34;Categories\u0026#34; url = \u0026#34;/en/categories/\u0026#34; weight = 20 [[languages.en.menu.main]] identifier = \u0026#34;tags\u0026#34; name = \u0026#34;Tags\u0026#34; url = \u0026#34;/en/tags/\u0026#34; weight = 30 [[languages.en.menu.main]] identifier = \u0026#34;archives\u0026#34; name = \u0026#34;Archives\u0026#34; url = \u0026#34;/en/archives/\u0026#34; weight = 40 [[languages.en.menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;About Me\u0026#34; url = \u0026#34;/en/about/\u0026#34; weight = 50 Create Content Directories mkdir -p content/post mkdir -p content/english/post # Directory for English articles Create Basic Pages About Page mkdir -p content/about Create Chinese about page content/about/index.md:\n--- title: \u0026#34;关于我\u0026#34; date: 2023-06-01T12:00:00+08:00 --- 这是关于我的页面内容... Create English about page content/english/about/index.md:\n--- title: \u0026#34;About Me\u0026#34; date: 2023-06-01T12:00:00+08:00 --- This is about me page... You can create other basic pages using the about page as a reference.\nWrite the Conversion Script Create a Python script to convert Hexo articles to Hugo format:\n#!/usr/bin/env python3 # Convert Hexo Markdown files to Hugo format import os import re import datetime import shutil from pathlib import Path # Setup paths hexo_posts_dir = \u0026#34;hexo/source/_posts\u0026#34; hugo_posts_dir = \u0026#34;hugo/content/post\u0026#34; hexo_img_dir = \u0026#34;hexo/source/images\u0026#34; hugo_static_dir = \u0026#34;hugo/static/images\u0026#34; # Ensure target directories exist os.makedirs(hugo_posts_dir, exist_ok=True) os.makedirs(hugo_static_dir, exist_ok=True) # Copy image folder def copy_images(): if os.path.exists(hexo_img_dir): print(f\u0026#34;Copying image files from {hexo_img_dir} to {hugo_static_dir}\u0026#34;) # Copy folder contents for item in os.listdir(hexo_img_dir): s = os.path.join(hexo_img_dir, item) d = os.path.join(hugo_static_dir, item) if os.path.isdir(s): shutil.copytree(s, d, dirs_exist_ok=True) else: shutil.copy2(s, d) # Process YAML front-matter def convert_front_matter(content): # Extract front-matter match = re.match(r\u0026#39;^---\\s+(.*?)\\s+---\\s*\u0026#39;, content, re.DOTALL) if not match: return content front_matter = match.group(1) rest_content = content[match.end():] # Convert tags and categories new_front_matter = [] categories = [] tags = [] date = None for line in front_matter.strip().split(\u0026#39;\\n\u0026#39;): line = line.strip() # Process date if line.startswith(\u0026#39;date:\u0026#39;): date_str = line[5:].strip() try: date = datetime.datetime.strptime(date_str, \u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) new_front_matter.append(f\u0026#39;date: {date.strftime(\u0026#34;%Y-%m-%dT%H:%M:%S+08:00\u0026#34;)}\u0026#39;) # Add lastmod new_front_matter.append(f\u0026#39;lastmod: {date.strftime(\u0026#34;%Y-%m-%dT%H:%M:%S+08:00\u0026#34;)}\u0026#39;) except ValueError: new_front_matter.append(line) # Process tags elif line.startswith(\u0026#39;tags:\u0026#39;): tags_str = line[5:].strip() if tags_str.startswith(\u0026#39;[\u0026#39;) and tags_str.endswith(\u0026#39;]\u0026#39;): # Format is tags: [tag1, tag2] tags = [tag.strip(\u0026#39; \u0026#34;\\\u0026#39;\u0026#39;) for tag in tags_str[1:-1].split(\u0026#39;,\u0026#39;)] else: # Might be multi-line format continue # Process categories elif line.startswith(\u0026#39;categories:\u0026#39;): cats_str = line[11:].strip() if cats_str.startswith(\u0026#39;[\u0026#39;) and cats_str.endswith(\u0026#39;]\u0026#39;): # Format is categories: [cat1, cat2] categories = [cat.strip(\u0026#39; \u0026#34;\\\u0026#39;\u0026#39;) for cat in cats_str[1:-1].split(\u0026#39;,\u0026#39;)] else: # Might be multi-line format continue # Copy other lines elif not (line.startswith(\u0026#39;- \u0026#39;) and (\u0026#39;tags:\u0026#39; in front_matter or \u0026#39;categories:\u0026#39; in front_matter)): new_front_matter.append(line) # Add categories and tags if categories: new_front_matter.append(f\u0026#39;categories: {categories}\u0026#39;) if tags: new_front_matter.append(f\u0026#39;tags: {tags}\u0026#39;) # Add slug if \u0026#39;slug:\u0026#39; not in front_matter: filename = os.path.splitext(os.path.basename(content))[0] new_front_matter.append(f\u0026#39;slug: \u0026#34;{filename}\u0026#34;\u0026#39;) # Combine new front-matter new_content = \u0026#39;---\\n\u0026#39; + \u0026#39;\\n\u0026#39;.join(new_front_matter) + \u0026#39;\\n---\\n\\n\u0026#39; + rest_content return new_content # Convert Markdown content def convert_markdown_content(content): # Replace image links content = re.sub(r\u0026#39;!\\[(.*?)\\]\\((.*?)/images/(.*?)\\)\u0026#39;, r\u0026#39;![\\1](/images/\\3)\u0026#39;, content) # Handle the \u0026#34;more\u0026#34; marker content = re.sub(r\u0026#39;\u0026lt;!--\\s*more\\s*--\u0026gt;\u0026#39;, \u0026#39; \u0026#39;, content) return content # Main conversion function def convert_posts(): print(f\u0026#34;Starting to convert posts from {hexo_posts_dir} to {hugo_posts_dir}\u0026#34;) files = os.listdir(hexo_posts_dir) for file in files: if not file.endswith(\u0026#39;.md\u0026#39;): continue source_file = os.path.join(hexo_posts_dir, file) target_file = os.path.join(hugo_posts_dir, file) print(f\u0026#34;Converting: {source_file} -\u0026gt; {target_file}\u0026#34;) # Read source file with open(source_file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: content = f.read() # Convert content content = convert_front_matter(content) content = convert_markdown_content(content) # Write to target file with open(target_file, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(content) # Detect language and create multilingual files def handle_multilingual(): print(\u0026#34;Processing multilingual articles...\u0026#34;) for file in os.listdir(hugo_posts_dir): if not file.endswith(\u0026#39;.md\u0026#39;): continue filepath = os.path.join(hugo_posts_dir, file) # Read file content with open(filepath, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: content = f.read() # Check if there\u0026#39;s a language marker lang_match = re.search(r\u0026#39;language:\\s*[\\\u0026#39;\u0026#34;]?([a-z\\-]+)[\\\u0026#39;\u0026#34;]?\u0026#39;, content) if lang_match: lang = lang_match.group(1) if lang.startswith(\u0026#39;en\u0026#39;): # Create English version en_file = os.path.splitext(file)[0] + \u0026#39;.en.md\u0026#39; en_filepath = os.path.join(hugo_posts_dir, en_file) # Remove language marker and write to new file content = re.sub(r\u0026#39;language:\\s*[\\\u0026#39;\u0026#34;]?[a-z\\-]+[\\\u0026#39;\u0026#34;]?\\n\u0026#39;, \u0026#39;\u0026#39;, content) with open(en_filepath, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(content) # Delete original file os.remove(filepath) print(f\u0026#34; Created English article: {en_filepath}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: copy_images() convert_posts() handle_multilingual() print(\u0026#34;Conversion complete!\u0026#34;) Run the Conversion Script cd ~/dev/book python3 convert_hexo_to_hugo.py Create a Start Script Create start.sh:\n#!/bin/bash # Start Hugo server hugo server -D Add execution permission:\nchmod +x start.sh Create a Deployment Script Create deploy.sh:\n#!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying blog to GitHub Pages...\\033[0m\u0026#34; # Generate static files hugo # Go to public directory cd public # Initialize git repository if [ ! -d \u0026#34;.git\u0026#34; ]; then git init git remote add origin YOUR_GITHUB_REPOSITORY_URL # Replace with your GitHub repository URL fi # Add files git add . # Commit changes msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ $# -eq 1 ]; then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push to GitHub git push -u origin master # Return to parent directory cd .. Add execution permission:\nchmod +x deploy.sh Test Run ./start.sh Create Multilingual Article Examples Chinese Article hugo new post/my-first-post.md Edit content/post/my-first-post.md:\n--- title: \u0026#34;我的第一篇博客\u0026#34; date: 2023-06-10T15:30:00+08:00 lastmod: 2023-06-10T15:30:00+08:00 categories: [\u0026#34;博客\u0026#34;] tags: [\u0026#34;Hugo\u0026#34;, \u0026#34;入门\u0026#34;] slug: \u0026#34;my-first-post\u0026#34; description: \u0026#34;这是我使用Hugo创建的第一篇博客文章\u0026#34; --- ## 介绍 这是我的第一篇Hugo博客文章。 \u0026lt;!--more--\u0026gt; 这是摘要后的内容。 English Article hugo new post/english/my-first-post.md Edit content/english/post/my-first-post.md:\n--- title: \u0026#34;My First Blog Post\u0026#34; date: 2023-06-10T15:30:00+08:00 lastmod: 2023-06-10T15:30:00+08:00 categories: [\u0026#34;Blog\u0026#34;] tags: [\u0026#34;Hugo\u0026#34;, \u0026#34;Getting Started\u0026#34;] slug: \u0026#34;my-first-post\u0026#34; description: \u0026#34;This is my first blog post created with Hugo\u0026#34; --- ## Introduction This is my first Hugo blog post. \u0026lt;!--more--\u0026gt; This is the content after the summary. Conclusion At this point, we have completed the entire migration process from Hexo to Hugo, including article conversion, multilingual settings, and deployment preparation. Hugo\u0026rsquo;s powerful performance and flexible features will bring a new experience to your blog.\n","permalink":"https://www.mfun.ink/english/post/hexo-to-hugo-migration-guide/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHexo and Hugo are both excellent static site generators, but due to performance considerations or personal preference, you might want to migrate from Hexo to Hugo. This article will document the complete migration process in detail, including configuration, article conversion, multilingual support, and more.\u003c/p\u003e\n\u003ch2 id=\"preparation\"\u003ePreparation\u003c/h2\u003e\n\u003cp\u003eBefore starting the migration, you need to install Hugo and understand the basic site creation process. Here are the official documentation links, which are recommended to follow:\u003c/p\u003e\n\u003ch3 id=\"1-install-hugo\"\u003e1. Install Hugo\u003c/h3\u003e\n\u003cp\u003eHugo provides multiple installation methods, including pre-compiled binaries and package managers. Based on your operating system, please refer to the official installation documentation:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/installation/\"\u003eHugo Official Installation Guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-create-a-hugo-site\"\u003e2. Create a Hugo Site\u003c/h3\u003e\n\u003cp\u003eAfter installing Hugo, you can create a new Hugo site using the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new site your-site-name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd your-site-name\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor more detailed information about creating a site, please refer to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/getting-started/quick-start/\"\u003eHugo Quick Start Guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-install-a-theme\"\u003e3. Install a Theme\u003c/h3\u003e\n\u003cp\u003eHugo has a rich selection of themes to choose from. You can browse and select a suitable theme on the \u003ca href=\"https://themes.gohugo.io/\"\u003eHugo Themes page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe basic steps to install a theme are as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/theme-author/theme-name.git themes/theme-name\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen set the theme in your configuration file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;theme = \u0026#39;theme-name\u0026#39;\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; hugo.toml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"site-configuration\"\u003eSite Configuration\u003c/h2\u003e\n\u003cp\u003eCreate a \u003ccode\u003ehugo.toml\u003c/code\u003e configuration file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ebaseURL\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;https://www.mfun.ink/\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edefaultContentLanguage\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;zh-cn\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mengboy\u0026#39;s Blog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003etheme\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;PaperMod\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehasCJKLanguage\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Google Analytics configuration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eGoogleAnalytics\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;G-xxxxxxx\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# Please replace with your Google Analytics ID\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Add permalink configuration to make link format compatible with Hexo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003epermalinks\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003epost\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/:year/:month/:day/:contentbasename/\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# PaperMod theme parameters\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Set environment to production, which is important for Google Analytics and AdSense loading\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eenv\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;production\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Author information\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eauthor\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mengboy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Main sections\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emainSections\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;post\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003edefaultTheme\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;auto\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowReadingTime\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowShareButtons\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowPostNavLinks\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowBreadCrumbs\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowCodeCopyButtons\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowRssButtonInSectionTermList\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003edisableSpecial1stPost\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003edisableScrollToTop\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ehideMeta\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ehideFooter\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Website favicon settings\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eassets\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efavicon\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efavicon16x16\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efavicon32x32\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eapple_touch_icon\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Google AdSense configuration, requires custom extension or theme support\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003egoogleAdsense\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ca-pub-xxxxxxxxxx\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# Please replace with your Google AdSense publisher ID\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003egoogleAdsenseSlot\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xxxxxxxx\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# Please replace with your Google AdSense ad unit ID\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Sidebar configuration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprofileMode\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eenabled\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mengboy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esubtitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Recording Learning and Life\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eimageUrl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eimageWidth\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e120\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eimageHeight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e120\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Social icons\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esocialIcons\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://github.com/mengboy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Search settings\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efuseOpts\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eisCaseSensitive\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eshouldSort\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elocation\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edistance\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ethreshold\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0.4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eminMatchCharLength\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ekeys\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;permalink\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;summary\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;content\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Allow HTML\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003emarkup\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egoldmark\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erenderer\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Ignore HTML warnings\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eignoreWarnings\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;raw-html\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eignoreLogs\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;warning-goldmark-raw-html\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econtentDir\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;content\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elanguageName\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;简体中文\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mengboy\u0026#39;s Blog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Chinese homepage information\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehomeInfoParams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eTitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;记录学习与生活点滴\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Chinese menu\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;首页\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;categories\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;分类\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/categories/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tags\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;标签\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tags/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;archives\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;归档\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/archives/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;about\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;关于我\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/about/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e]    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econtentDir\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;content/english\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elanguageName\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;English\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mengboy\u0026#39;s Blog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# English homepage information\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehomeInfoParams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eTitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Recording Learning and Life\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# English menu\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Home\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;categories\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Categories\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/en/categories/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tags\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Tags\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/en/tags/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;archives\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Archives\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/en/archives/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;about\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;About Me\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/en/about/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"create-content-directories\"\u003eCreate Content Directories\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p content/post\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p content/english/post  \u003cspan style=\"color:#75715e\"\u003e# Directory for English articles\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"create-basic-pages\"\u003eCreate Basic Pages\u003c/h2\u003e\n\u003ch3 id=\"about-page\"\u003eAbout Page\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p content/about\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCreate Chinese about page \u003ccode\u003econtent/about/index.md\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etitle: \u0026#34;关于我\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edate: 2023-06-01T12:00:00+08:00\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e这是关于我的页面内容...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCreate English about page \u003ccode\u003econtent/english/about/index.md\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etitle: \u0026#34;About Me\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edate: 2023-06-01T12:00:00+08:00\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThis is about me page...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can create other basic pages using the about page as a reference.\u003c/p\u003e\n\u003ch2 id=\"write-the-conversion-script\"\u003eWrite the Conversion Script\u003c/h2\u003e\n\u003cp\u003eCreate a Python script to convert Hexo articles to Hugo format:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#!/usr/bin/env python3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Convert Hexo Markdown files to Hugo format\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e os\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e re\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e datetime\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e shutil\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e pathlib \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Path\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Setup paths\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehexo_posts_dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hexo/source/_posts\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo_posts_dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hugo/content/post\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehexo_img_dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hexo/source/images\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo_static_dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hugo/static/images\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Ensure target directories exist\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eos\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emakedirs(hugo_posts_dir, exist_ok\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eos\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emakedirs(hugo_static_dir, exist_ok\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Copy image folder\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecopy_images\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexists(hexo_img_dir):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Copying image files from \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ehexo_img_dir\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e to \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ehugo_static_dir\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Copy folder contents\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e item \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elistdir(hexo_img_dir):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            s \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hexo_img_dir, item)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            d \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hugo_static_dir, item)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eisdir(s):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                shutil\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecopytree(s, d, dirs_exist_ok\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                shutil\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecopy2(s, d)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Process YAML front-matter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvert_front_matter\u003c/span\u003e(content):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Extract front-matter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;^---\\s+(.*?)\\s+---\\s*\u0026#39;\u003c/span\u003e, content, re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDOTALL)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e content\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    front_matter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egroup(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    rest_content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e content[\u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eend():]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Convert tags and categories\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    new_front_matter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    categories \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    tags \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    date \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e line \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        line \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Process date\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;date:\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            date_str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e line[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e:]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                date \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e datetime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edatetime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrptime(date_str, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;%Y-%m-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e %H:%M:%S\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;date: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003edate\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eT%H:%M:%S+08:00\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Add lastmod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;lastmod: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003edate\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eT%H:%M:%S+08:00\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eValueError\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(line)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Process tags\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;tags:\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            tags_str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e line[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e:]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e tags_str\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e tags_str\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;]\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Format is tags: [tag1, tag2]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                tags \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [tag\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e tag \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e tags_str[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Might be multi-line format\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Process categories\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;categories:\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cats_str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e line[\u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e:]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e cats_str\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e cats_str\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;]\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Format is categories: [cat1, cat2]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                categories \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [cat\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e cat \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e cats_str[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Might be multi-line format\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Copy other lines\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e (line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;- \u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e (\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;tags:\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e front_matter \u003cspan style=\"color:#f92672\"\u003eor\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;categories:\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e front_matter)):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(line)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Add categories and tags\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e categories:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;categories: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ecategories\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e tags:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;tags: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003etags\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Add slug\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;slug:\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e front_matter:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        filename \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplitext(os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ebasename(content))[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;slug: \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003efilename\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Combine new front-matter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    new_content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;---\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(new_front_matter) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e---\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e rest_content\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e new_content\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Convert Markdown content\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvert_markdown_content\u003c/span\u003e(content):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Replace image links\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esub(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;!\\[(.*?)\\]\\((.*?)/images/(.*?)\\)\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;![\\1](/images/\\3)\u0026#39;\u003c/span\u003e, content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Handle the \u0026#34;more\u0026#34; marker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esub(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;!--\\s*more\\s*--\u0026gt;\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;, content)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e content\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Main conversion function\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvert_posts\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Starting to convert posts from \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ehexo_posts_dir\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e to \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ehugo_posts_dir\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    files \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elistdir(hexo_posts_dir)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e file \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e files:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e file\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.md\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        source_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hexo_posts_dir, file)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        target_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hugo_posts_dir, file)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Converting: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003esource_file\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e -\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003etarget_file\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Read source file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(source_file, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Convert content\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e convert_front_matter(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e convert_markdown_content(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Write to target file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(target_file, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Detect language and create multilingual files\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandle_multilingual\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Processing multilingual articles...\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e file \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elistdir(hugo_posts_dir):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e file\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.md\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        filepath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hugo_posts_dir, file)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Read file content\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(filepath, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Check if there\u0026#39;s a language marker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        lang_match \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esearch(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;language:\\s*[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]?([a-z\\-]+)[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]?\u0026#39;\u003c/span\u003e, content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e lang_match:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            lang \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lang_match\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egroup(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e lang\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;en\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Create English version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                en_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplitext(file)[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.en.md\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                en_filepath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hugo_posts_dir, en_file)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Remove language marker and write to new file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esub(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;language:\\s*[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]?[a-z\\-]+[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]?\\n\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e, content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(en_filepath, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# Delete original file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eremove(filepath)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;  Created English article: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003een_filepath\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    copy_images()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    convert_posts()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    handle_multilingual()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Conversion complete!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"run-the-conversion-script\"\u003eRun the Conversion Script\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd ~/dev/book\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epython3 convert_hexo_to_hugo.py\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"create-a-start-script\"\u003eCreate a Start Script\u003c/h2\u003e\n\u003cp\u003eCreate \u003ccode\u003estart.sh\u003c/code\u003e:\u003c/p\u003e","title":"Complete Guide to Migrating from Hexo to Hugo"},{"content":"前言 Hexo和Hugo都是优秀的静态网站生成器，但由于性能考虑或个人喜好，你可能想从Hexo迁移到Hugo。本文将详细记录完整迁移过程，包括配置、文章转换、多语言支持等方面。\n准备工作 在开始迁移前，你需要先安装Hugo并了解基本的站点创建流程。以下是官方文档链接，建议按照官方文档进行操作：\n1. 安装Hugo Hugo提供了多种安装方式，包括预编译二进制文件和包管理器。请根据你的操作系统，参考官方安装文档：\nHugo官方安装指南 2. 创建Hugo站点 安装完Hugo后，你可以使用以下命令创建一个新的Hugo站点：\nhugo new site your-site-name cd your-site-name 更多关于创建站点的详细信息，请参考：\nHugo快速入门指南 3. 安装主题 Hugo有丰富的主题可供选择，你可以在Hugo主题页面浏览并选择适合的主题。\n安装主题的基本步骤如下：\ngit init git submodule add https://github.com/theme-author/theme-name.git themes/theme-name 然后在配置文件中设置主题：\necho \u0026#34;theme = \u0026#39;theme-name\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml 站点配置 创建hugo.toml配置文件：\nbaseURL = \u0026#39;https://www.mfun.ink/\u0026#39; defaultContentLanguage = \u0026#39;zh-cn\u0026#39; title = \u0026#34;Mengboy\u0026#39;s Blog\u0026#34; theme = \u0026#39;PaperMod\u0026#39; hasCJKLanguage = true # Google Analytics配置 GoogleAnalytics = \u0026#34;G-xxxxxxx\u0026#34; # 请替换为您的Google Analytics ID # 添加permalink配置，使得链接格式与Hexo兼容 [permalinks] post = \u0026#39;/:year/:month/:day/:contentbasename/\u0026#39; # PaperMod主题参数 [params] # 设置环境为生产环境，这对于Google Analytics和AdSense加载非常重要 env = \u0026#34;production\u0026#34; # 作者信息 author = \u0026#34;mengboy\u0026#34; # 主要部分 mainSections = [\u0026#39;post\u0026#39;] defaultTheme = \u0026#34;auto\u0026#34; ShowReadingTime = true ShowShareButtons = true ShowPostNavLinks = true ShowBreadCrumbs = true ShowCodeCopyButtons = true ShowRssButtonInSectionTermList = true disableSpecial1stPost = false disableScrollToTop = false hideMeta = false hideFooter = false # 网站favicon设置 [params.assets] favicon = \u0026#34;/images/site/favicon.png\u0026#34; favicon16x16 = \u0026#34;/images/site/favicon.png\u0026#34; favicon32x32 = \u0026#34;/images/site/favicon.png\u0026#34; apple_touch_icon = \u0026#34;/images/site/favicon.png\u0026#34; # Google AdSense配置 需要自定义扩展，或者主题支持 googleAdsense = \u0026#34;ca-pub-xxxxxxxxxx\u0026#34; # 请替换为您的Google AdSense发布商ID googleAdsenseSlot = \u0026#34;xxxxxxxx\u0026#34; # 请替换为您的Google AdSense广告单元ID # 侧边栏配置 [params.profileMode] enabled = false title = \u0026#34;mengboy\u0026#34; subtitle = \u0026#34;记录学习与生活点滴\u0026#34; imageUrl = \u0026#34;images/site/favicon.png\u0026#34; imageWidth = 120 imageHeight = 120 # 社交图标 [[params.socialIcons]] name = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/mengboy\u0026#34; # 搜索设置 [params.fuseOpts] isCaseSensitive = false shouldSort = true location = 0 distance = 1000 threshold = 0.4 minMatchCharLength = 0 keys = [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] # 允许HTML [markup.goldmark.renderer] unsafe = true # 忽略HTML警告 ignoreWarnings = [\u0026#39;raw-html\u0026#39;] ignoreLogs = [\u0026#39;warning-goldmark-raw-html\u0026#39;] [languages] [languages.zh-cn] contentDir = \u0026#39;content\u0026#39; languageName = \u0026#39;简体中文\u0026#39; weight = 10 title = \u0026#34;Mengboy\u0026#39;s Blog\u0026#34; # 中文主页信息 [languages.zh-cn.params] [languages.zh-cn.params.homeInfoParams] Title = \u0026#34;记录学习与生活点滴\u0026#34; # 中文菜单 [languages.zh-cn.menu] [[languages.zh-cn.menu.main]] identifier = \u0026#34;home\u0026#34; name = \u0026#34;首页\u0026#34; url = \u0026#34;/\u0026#34; weight = 10 [[languages.zh-cn.menu.main]] identifier = \u0026#34;categories\u0026#34; name = \u0026#34;分类\u0026#34; url = \u0026#34;/categories/\u0026#34; weight = 20 [[languages.zh-cn.menu.main]] identifier = \u0026#34;tags\u0026#34; name = \u0026#34;标签\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 30 [[languages.zh-cn.menu.main]] identifier = \u0026#34;archives\u0026#34; name = \u0026#34;归档\u0026#34; url = \u0026#34;/archives/\u0026#34; weight = 40 [[languages.zh-cn.menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;关于我\u0026#34; url = \u0026#34;/about/\u0026#34; weight = 50 [languages.en] contentDir = \u0026#39;content/english\u0026#39; languageName = \u0026#39;English\u0026#39; weight = 20 title = \u0026#34;Mengboy\u0026#39;s Blog\u0026#34; # 英文主页信息 [languages.en.params] [languages.en.params.homeInfoParams] Title = \u0026#34;Recording Learning and Life\u0026#34; # 英文菜单 [languages.en.menu] [[languages.en.menu.main]] identifier = \u0026#34;home\u0026#34; name = \u0026#34;Home\u0026#34; url = \u0026#34;/\u0026#34; weight = 10 [[languages.en.menu.main]] identifier = \u0026#34;categories\u0026#34; name = \u0026#34;Categories\u0026#34; url = \u0026#34;/en/categories/\u0026#34; weight = 20 [[languages.en.menu.main]] identifier = \u0026#34;tags\u0026#34; name = \u0026#34;Tags\u0026#34; url = \u0026#34;/en/tags/\u0026#34; weight = 30 [[languages.en.menu.main]] identifier = \u0026#34;archives\u0026#34; name = \u0026#34;Archives\u0026#34; url = \u0026#34;/en/archives/\u0026#34; weight = 40 [[languages.en.menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;About Me\u0026#34; url = \u0026#34;/en/about/\u0026#34; weight = 50 创建内容目录 mkdir -p content/post mkdir -p content/post/english # 英文文章目录 创建基础页面 关于页面 mkdir -p content/about 创建中文关于页面 content/about/index.md：\n--- title: \u0026#34;关于我\u0026#34; date: 2023-06-01T12:00:00+08:00 --- 这是关于我的页面内容... 创建英文关于页面 content/english/about/index.md：\n--- title: \u0026#34;About Me\u0026#34; date: 2023-06-01T12:00:00+08:00 --- This is about me page... 其他基础页面参考about页面。\n编写转换脚本 创建一个Python脚本来转换Hexo文章到Hugo格式：\n#!/usr/bin/env python3 # 将Hexo的Markdown文件转换为Hugo格式 import os import re import datetime import shutil from pathlib import Path # 设置路径 hexo_posts_dir = \u0026#34;hexo/source/_posts\u0026#34; hugo_posts_dir = \u0026#34;hugo/content/post\u0026#34; hexo_img_dir = \u0026#34;hexo/source/images\u0026#34; hugo_static_dir = \u0026#34;hugo/static/images\u0026#34; # 确保目标目录存在 os.makedirs(hugo_posts_dir, exist_ok=True) os.makedirs(hugo_static_dir, exist_ok=True) # 复制图片文件夹 def copy_images(): if os.path.exists(hexo_img_dir): print(f\u0026#34;正在复制图片文件从 {hexo_img_dir} 到 {hugo_static_dir}\u0026#34;) # 复制文件夹内容 for item in os.listdir(hexo_img_dir): s = os.path.join(hexo_img_dir, item) d = os.path.join(hugo_static_dir, item) if os.path.isdir(s): shutil.copytree(s, d, dirs_exist_ok=True) else: shutil.copy2(s, d) # 处理YAML front-matter def convert_front_matter(content): # 提取front-matter match = re.match(r\u0026#39;^---\\s+(.*?)\\s+---\\s*\u0026#39;, content, re.DOTALL) if not match: return content front_matter = match.group(1) rest_content = content[match.end():] # 转换标签和分类 new_front_matter = [] categories = [] tags = [] date = None for line in front_matter.strip().split(\u0026#39;\\n\u0026#39;): line = line.strip() # 处理日期 if line.startswith(\u0026#39;date:\u0026#39;): date_str = line[5:].strip() try: date = datetime.datetime.strptime(date_str, \u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) new_front_matter.append(f\u0026#39;date: {date.strftime(\u0026#34;%Y-%m-%dT%H:%M:%S+08:00\u0026#34;)}\u0026#39;) # 添加lastmod new_front_matter.append(f\u0026#39;lastmod: {date.strftime(\u0026#34;%Y-%m-%dT%H:%M:%S+08:00\u0026#34;)}\u0026#39;) except ValueError: new_front_matter.append(line) # 处理标签 elif line.startswith(\u0026#39;tags:\u0026#39;): tags_str = line[5:].strip() if tags_str.startswith(\u0026#39;[\u0026#39;) and tags_str.endswith(\u0026#39;]\u0026#39;): # 格式为 tags: [tag1, tag2] tags = [tag.strip(\u0026#39; \u0026#34;\\\u0026#39;\u0026#39;) for tag in tags_str[1:-1].split(\u0026#39;,\u0026#39;)] else: # 可能是多行格式 continue # 处理分类 elif line.startswith(\u0026#39;categories:\u0026#39;): cats_str = line[11:].strip() if cats_str.startswith(\u0026#39;[\u0026#39;) and cats_str.endswith(\u0026#39;]\u0026#39;): # 格式为 categories: [cat1, cat2] categories = [cat.strip(\u0026#39; \u0026#34;\\\u0026#39;\u0026#39;) for cat in cats_str[1:-1].split(\u0026#39;,\u0026#39;)] else: # 可能是多行格式 continue # 复制其他行 elif not (line.startswith(\u0026#39;- \u0026#39;) and (\u0026#39;tags:\u0026#39; in front_matter or \u0026#39;categories:\u0026#39; in front_matter)): new_front_matter.append(line) # 添加分类和标签 if categories: new_front_matter.append(f\u0026#39;categories: {categories}\u0026#39;) if tags: new_front_matter.append(f\u0026#39;tags: {tags}\u0026#39;) # 添加slug if \u0026#39;slug:\u0026#39; not in front_matter: filename = os.path.splitext(os.path.basename(content))[0] new_front_matter.append(f\u0026#39;slug: \u0026#34;{filename}\u0026#34;\u0026#39;) # 组合新的front-matter new_content = \u0026#39;---\\n\u0026#39; + \u0026#39;\\n\u0026#39;.join(new_front_matter) + \u0026#39;\\n---\\n\\n\u0026#39; + rest_content return new_content # 转换Markdown内容 def convert_markdown_content(content): # 替换图片链接 content = re.sub(r\u0026#39;!\\[(.*?)\\]\\((.*?)/images/(.*?)\\)\u0026#39;, r\u0026#39;![\\1](/images/\\3)\u0026#39;, content) # 处理更多标记 content = re.sub(r\u0026#39;\u0026lt;!--\\s*more\\s*--\u0026gt;\u0026#39;, \u0026#39; \u0026#39;, content) return content # 主转换函数 def convert_posts(): print(f\u0026#34;开始转换文章从 {hexo_posts_dir} 到 {hugo_posts_dir}\u0026#34;) files = os.listdir(hexo_posts_dir) for file in files: if not file.endswith(\u0026#39;.md\u0026#39;): continue source_file = os.path.join(hexo_posts_dir, file) target_file = os.path.join(hugo_posts_dir, file) print(f\u0026#34;转换: {source_file} -\u0026gt; {target_file}\u0026#34;) # 读取源文件 with open(source_file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: content = f.read() # 转换内容 content = convert_front_matter(content) content = convert_markdown_content(content) # 写入目标文件 with open(target_file, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(content) # 检测语言并创建多语言文件 def handle_multilingual(): print(\u0026#34;处理多语言文章...\u0026#34;) for file in os.listdir(hugo_posts_dir): if not file.endswith(\u0026#39;.md\u0026#39;): continue filepath = os.path.join(hugo_posts_dir, file) # 读取文件内容 with open(filepath, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: content = f.read() # 检查是否有language标记 lang_match = re.search(r\u0026#39;language:\\s*[\\\u0026#39;\u0026#34;]?([a-z\\-]+)[\\\u0026#39;\u0026#34;]?\u0026#39;, content) if lang_match: lang = lang_match.group(1) if lang.startswith(\u0026#39;en\u0026#39;): # 创建英文版本 en_file = os.path.splitext(file)[0] + \u0026#39;.en.md\u0026#39; en_filepath = os.path.join(hugo_posts_dir, en_file) # 移除语言标记并写入新文件 content = re.sub(r\u0026#39;language:\\s*[\\\u0026#39;\u0026#34;]?[a-z\\-]+[\\\u0026#39;\u0026#34;]?\\n\u0026#39;, \u0026#39;\u0026#39;, content) with open(en_filepath, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(content) # 删除原文件 os.remove(filepath) print(f\u0026#34; 创建英文文章: {en_filepath}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: copy_images() convert_posts() handle_multilingual() print(\u0026#34;转换完成!\u0026#34;) 运行转换脚本 cd ~/dev/book python3 convert_hexo_to_hugo.py 创建启动脚本 创建start.sh：\n#!/bin/bash # 启动Hugo服务器 hugo server -D 添加执行权限：\nchmod +x start.sh 创建部署脚本 创建deploy.sh：\n#!/bin/bash echo -e \u0026#34;\\033[0;32m部署博客到GitHub Pages...\\033[0m\u0026#34; # 生成静态文件 hugo # 进入public目录 cd public # 初始化git仓库 if [ ! -d \u0026#34;.git\u0026#34; ]; then git init git remote add origin YOUR_GITHUB_REPOSITORY_URL # 替换为您的GitHub仓库URL fi # 添加文件 git add . # 提交更改 msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ $# -eq 1 ]; then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # 推送到GitHub git push -u origin master # 返回上层目录 cd .. 添加执行权限：\nchmod +x deploy.sh 测试运行 ./start.sh 创建多语言文章示例 中文文章 hugo new post/my-first-post.md 编辑content/post/my-first-post.md：\n--- title: \u0026#34;我的第一篇博客\u0026#34; date: 2023-06-10T15:30:00+08:00 lastmod: 2023-06-10T15:30:00+08:00 categories: [\u0026#34;博客\u0026#34;] tags: [\u0026#34;Hugo\u0026#34;, \u0026#34;入门\u0026#34;] slug: \u0026#34;my-first-post\u0026#34; description: \u0026#34;这是我使用Hugo创建的第一篇博客文章\u0026#34; --- ## 介绍 这是我的第一篇Hugo博客文章。 \u0026lt;!--more--\u0026gt; 这是摘要后的内容。 英文文章 hugo new post/english/my-first-post.md 编辑content/english/post/my-first-post.md：\n--- title: \u0026#34;My First Blog Post\u0026#34; date: 2023-06-10T15:30:00+08:00 lastmod: 2023-06-10T15:30:00+08:00 categories: [\u0026#34;Blog\u0026#34;] tags: [\u0026#34;Hugo\u0026#34;, \u0026#34;Getting Started\u0026#34;] slug: \u0026#34;my-first-post\u0026#34; description: \u0026#34;This is my first blog post created with Hugo\u0026#34; --- ## Introduction This is my first Hugo blog post. \u0026lt;!--more--\u0026gt; This is the content after the summary. 结语 至此，我们已经完成了从Hexo到Hugo的迁移全过程，包括文章转换、多语言设置和部署准备。Hugo强大的性能和灵活的功能将为你的博客带来新的体验。\n","permalink":"https://www.mfun.ink/2025/05/04/hexo-to-hugo-migration/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eHexo和Hugo都是优秀的静态网站生成器，但由于性能考虑或个人喜好，你可能想从Hexo迁移到Hugo。本文将详细记录完整迁移过程，包括配置、文章转换、多语言支持等方面。\u003c/p\u003e\n\u003ch2 id=\"准备工作\"\u003e准备工作\u003c/h2\u003e\n\u003cp\u003e在开始迁移前，你需要先安装Hugo并了解基本的站点创建流程。以下是官方文档链接，建议按照官方文档进行操作：\u003c/p\u003e\n\u003ch3 id=\"1-安装hugo\"\u003e1. 安装Hugo\u003c/h3\u003e\n\u003cp\u003eHugo提供了多种安装方式，包括预编译二进制文件和包管理器。请根据你的操作系统，参考官方安装文档：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/installation/\"\u003eHugo官方安装指南\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-创建hugo站点\"\u003e2. 创建Hugo站点\u003c/h3\u003e\n\u003cp\u003e安装完Hugo后，你可以使用以下命令创建一个新的Hugo站点：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new site your-site-name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd your-site-name\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e更多关于创建站点的详细信息，请参考：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gohugo.io/getting-started/quick-start/\"\u003eHugo快速入门指南\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-安装主题\"\u003e3. 安装主题\u003c/h3\u003e\n\u003cp\u003eHugo有丰富的主题可供选择，你可以在\u003ca href=\"https://themes.gohugo.io/\"\u003eHugo主题页面\u003c/a\u003e浏览并选择适合的主题。\u003c/p\u003e\n\u003cp\u003e安装主题的基本步骤如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/theme-author/theme-name.git themes/theme-name\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后在配置文件中设置主题：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;theme = \u0026#39;theme-name\u0026#39;\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; hugo.toml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"站点配置\"\u003e站点配置\u003c/h2\u003e\n\u003cp\u003e创建\u003ccode\u003ehugo.toml\u003c/code\u003e配置文件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ebaseURL\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;https://www.mfun.ink/\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edefaultContentLanguage\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;zh-cn\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mengboy\u0026#39;s Blog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003etheme\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;PaperMod\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehasCJKLanguage\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Google Analytics配置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eGoogleAnalytics\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;G-xxxxxxx\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# 请替换为您的Google Analytics ID\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 添加permalink配置，使得链接格式与Hexo兼容\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003epermalinks\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003epost\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/:year/:month/:day/:contentbasename/\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# PaperMod主题参数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 设置环境为生产环境，这对于Google Analytics和AdSense加载非常重要\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eenv\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;production\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 作者信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eauthor\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mengboy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 主要部分\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emainSections\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;post\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003edefaultTheme\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;auto\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowReadingTime\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowShareButtons\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowPostNavLinks\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowBreadCrumbs\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowCodeCopyButtons\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eShowRssButtonInSectionTermList\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003edisableSpecial1stPost\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003edisableScrollToTop\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ehideMeta\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ehideFooter\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 网站favicon设置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eassets\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efavicon\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efavicon16x16\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efavicon32x32\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eapple_touch_icon\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# Google AdSense配置 需要自定义扩展，或者主题支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003egoogleAdsense\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ca-pub-xxxxxxxxxx\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# 请替换为您的Google AdSense发布商ID\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003egoogleAdsenseSlot\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xxxxxxxx\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# 请替换为您的Google AdSense广告单元ID\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 侧边栏配置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprofileMode\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eenabled\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mengboy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esubtitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;记录学习与生活点滴\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eimageUrl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;images/site/favicon.png\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eimageWidth\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e120\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eimageHeight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e120\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 社交图标\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esocialIcons\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://github.com/mengboy\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 搜索设置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efuseOpts\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eisCaseSensitive\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eshouldSort\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003elocation\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003edistance\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ethreshold\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0.4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eminMatchCharLength\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ekeys\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;permalink\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;summary\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;content\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 允许HTML\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003emarkup\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egoldmark\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erenderer\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eunsafe\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 忽略HTML警告\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eignoreWarnings\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;raw-html\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eignoreLogs\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;warning-goldmark-raw-html\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econtentDir\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;content\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elanguageName\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;简体中文\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mengboy\u0026#39;s Blog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 中文主页信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehomeInfoParams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eTitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;记录学习与生活点滴\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 中文菜单\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;首页\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;categories\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;分类\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/categories/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tags\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;标签\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tags/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;archives\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;归档\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/archives/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ezh-cn\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;about\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;关于我\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/about/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e]    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econtentDir\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;content/english\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elanguageName\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;English\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mengboy\u0026#39;s Blog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 英文主页信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehomeInfoParams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eTitle\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Recording Learning and Life\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 英文菜单\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        [\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Home\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;categories\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Categories\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/en/categories/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tags\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Tags\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/en/tags/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;archives\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Archives\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/en/archives/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          [[\u003cspan style=\"color:#a6e22e\"\u003elanguages\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003een\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emenu\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eidentifier\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;about\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;About Me\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/en/about/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eweight\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"创建内容目录\"\u003e创建内容目录\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p content/post\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p content/post/english  \u003cspan style=\"color:#75715e\"\u003e# 英文文章目录\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"创建基础页面\"\u003e创建基础页面\u003c/h2\u003e\n\u003ch3 id=\"关于页面\"\u003e关于页面\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkdir -p content/about\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建中文关于页面 \u003ccode\u003econtent/about/index.md\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etitle: \u0026#34;关于我\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edate: 2023-06-01T12:00:00+08:00\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e这是关于我的页面内容...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建英文关于页面 \u003ccode\u003econtent/english/about/index.md\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etitle: \u0026#34;About Me\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edate: 2023-06-01T12:00:00+08:00\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThis is about me page...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其他基础页面参考about页面。\u003c/p\u003e\n\u003ch2 id=\"编写转换脚本\"\u003e编写转换脚本\u003c/h2\u003e\n\u003cp\u003e创建一个Python脚本来转换Hexo文章到Hugo格式：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#!/usr/bin/env python3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 将Hexo的Markdown文件转换为Hugo格式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e os\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e re\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e datetime\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e shutil\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e pathlib \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Path\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 设置路径\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehexo_posts_dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hexo/source/_posts\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo_posts_dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hugo/content/post\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehexo_img_dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hexo/source/images\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo_static_dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hugo/static/images\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 确保目标目录存在\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eos\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emakedirs(hugo_posts_dir, exist_ok\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eos\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emakedirs(hugo_static_dir, exist_ok\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 复制图片文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecopy_images\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexists(hexo_img_dir):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;正在复制图片文件从 \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ehexo_img_dir\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e 到 \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ehugo_static_dir\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 复制文件夹内容\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e item \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elistdir(hexo_img_dir):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            s \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hexo_img_dir, item)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            d \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hugo_static_dir, item)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eisdir(s):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                shutil\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecopytree(s, d, dirs_exist_ok\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                shutil\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecopy2(s, d)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 处理YAML front-matter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvert_front_matter\u003c/span\u003e(content):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 提取front-matter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;^---\\s+(.*?)\\s+---\\s*\u0026#39;\u003c/span\u003e, content, re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDOTALL)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e content\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    front_matter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egroup(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    rest_content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e content[\u003cspan style=\"color:#66d9ef\"\u003ematch\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eend():]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 转换标签和分类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    new_front_matter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    categories \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    tags \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    date \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e line \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        line \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 处理日期\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;date:\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            date_str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e line[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e:]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                date \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e datetime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edatetime\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrptime(date_str, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;%Y-%m-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e %H:%M:%S\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;date: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003edate\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eT%H:%M:%S+08:00\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# 添加lastmod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;lastmod: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003edate\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eT%H:%M:%S+08:00\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eValueError\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(line)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 处理标签\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;tags:\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            tags_str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e line[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e:]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e tags_str\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e tags_str\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;]\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# 格式为 tags: [tag1, tag2]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                tags \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [tag\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e tag \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e tags_str[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# 可能是多行格式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 处理分类\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;categories:\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cats_str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e line[\u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e:]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e cats_str\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e cats_str\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;]\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# 格式为 categories: [cat1, cat2]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                categories \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [cat\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrip(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e cat \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e cats_str[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# 可能是多行格式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 复制其他行\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e (line\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;- \u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e (\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;tags:\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e front_matter \u003cspan style=\"color:#f92672\"\u003eor\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;categories:\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e front_matter)):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(line)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 添加分类和标签\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e categories:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;categories: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ecategories\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e tags:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;tags: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003etags\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 添加slug\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;slug:\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e front_matter:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        filename \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplitext(os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ebasename(content))[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        new_front_matter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;slug: \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003efilename\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 组合新的front-matter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    new_content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;---\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(new_front_matter) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e---\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e rest_content\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e new_content\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 转换Markdown内容\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvert_markdown_content\u003c/span\u003e(content):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 替换图片链接\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esub(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;!\\[(.*?)\\]\\((.*?)/images/(.*?)\\)\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;![\\1](/images/\\3)\u0026#39;\u003c/span\u003e, content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 处理更多标记\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esub(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;!--\\s*more\\s*--\u0026gt;\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;, content)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e content\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 主转换函数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvert_posts\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;开始转换文章从 \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ehexo_posts_dir\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e 到 \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ehugo_posts_dir\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    files \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elistdir(hexo_posts_dir)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e file \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e files:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e file\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.md\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        source_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hexo_posts_dir, file)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        target_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hugo_posts_dir, file)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;转换: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003esource_file\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e -\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003etarget_file\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 读取源文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(source_file, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 转换内容\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e convert_front_matter(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e convert_markdown_content(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 写入目标文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(target_file, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 检测语言并创建多语言文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehandle_multilingual\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;处理多语言文章...\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e file \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elistdir(hugo_posts_dir):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e file\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eendswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.md\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        filepath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hugo_posts_dir, file)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 读取文件内容\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(filepath, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 检查是否有language标记\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        lang_match \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esearch(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;language:\\s*[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]?([a-z\\-]+)[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]?\u0026#39;\u003c/span\u003e, content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e lang_match:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            lang \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lang_match\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003egroup(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e lang\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;en\u0026#39;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# 创建英文版本\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                en_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplitext(file)[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.en.md\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                en_filepath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ejoin(hugo_posts_dir, en_file)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# 移除语言标记并写入新文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esub(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;language:\\s*[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]?[a-z\\-]+[\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]?\\n\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e, content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(en_filepath, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(content)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e# 删除原文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                os\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eremove(filepath)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;  创建英文文章: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003een_filepath\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    copy_images()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    convert_posts()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    handle_multilingual()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;转换完成!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"运行转换脚本\"\u003e运行转换脚本\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd ~/dev/book\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epython3 convert_hexo_to_hugo.py\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"创建启动脚本\"\u003e创建启动脚本\u003c/h2\u003e\n\u003cp\u003e创建\u003ccode\u003estart.sh\u003c/code\u003e：\u003c/p\u003e","title":"从Hexo迁移到Hugo完全指南"},{"content":"About Me I\u0026rsquo;m a programmer who enjoys exploring new technologies and documenting my learning process.\nTechnology Stack Backend: Go, Python, Java Frontend: Vue, JavaScript Databases: MySQL, Redis, MongoDB Others: Docker, Kubernetes Contact Me If you have any questions or suggestions, feel free to contact me through:\nEmail: bai.white86@gmail.com GitHub: github.com/mengboy ","permalink":"https://www.mfun.ink/en/about/","summary":"\u003ch2 id=\"about-me\"\u003eAbout Me\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m a programmer who enjoys exploring new technologies and documenting my learning process.\u003c/p\u003e\n\u003ch2 id=\"technology-stack\"\u003eTechnology Stack\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBackend: Go, Python, Java\u003c/li\u003e\n\u003cli\u003eFrontend: Vue, JavaScript\u003c/li\u003e\n\u003cli\u003eDatabases: MySQL, Redis, MongoDB\u003c/li\u003e\n\u003cli\u003eOthers: Docker, Kubernetes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"contact-me\"\u003eContact Me\u003c/h2\u003e\n\u003cp\u003eIf you have any questions or suggestions, feel free to contact me through:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEmail: \u003ca href=\"mailto:bai.white86@gmail.com\"\u003ebai.white86@gmail.com\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGitHub: \u003ca href=\"https://github.com/mengboy\"\u003egithub.com/mengboy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"About Me"},{"content":"关于我 程序员一枚，喜欢探索新技术，记录学习过程。\n技术栈 后端: Go, Python, Java 前端: Vue, JavaScript 数据库: MySQL, Redis, MongoDB 其他: Docker, Kubernetes 联系方式 如有问题或建议，欢迎通过以下方式联系我:\nEmail: bai.white86@gmail.com GitHub: github.com/mengboy ","permalink":"https://www.mfun.ink/about/","summary":"\u003ch2 id=\"关于我\"\u003e关于我\u003c/h2\u003e\n\u003cp\u003e程序员一枚，喜欢探索新技术，记录学习过程。\u003c/p\u003e\n\u003ch2 id=\"技术栈\"\u003e技术栈\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e后端: Go, Python, Java\u003c/li\u003e\n\u003cli\u003e前端: Vue, JavaScript\u003c/li\u003e\n\u003cli\u003e数据库: MySQL, Redis, MongoDB\u003c/li\u003e\n\u003cli\u003e其他: Docker, Kubernetes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"联系方式\"\u003e联系方式\u003c/h2\u003e\n\u003cp\u003e如有问题或建议，欢迎通过以下方式联系我:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEmail: \u003ca href=\"mailto:bai.white86@gmail.com\"\u003ebai.white86@gmail.com\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGitHub: \u003ca href=\"https://github.com/mengboy\"\u003egithub.com/mengboy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"关于我"},{"content":"deepseek出现后，AI的势头更加一路不可阻挡， cursor最近又更新了Claude 3.7，编程体验进一步提高，身为码农对未来还有几年职业生涯充满了焦虑。熟话说打不过就加入，AI的浪潮已经阻挡不了，最好的方式就是学习接受，细节算法实现暂且不提门槛太高，还是先从使用上入手，下面整理常见的prompt框架。\n常用提示语结构 清华大学DeepSeek PDF中提到的RTGO和CO-START 其他提示语结构 框架名 首字母含义 示例 APE - Action (行动)\n- Purpose (目的)\n- Execution (执行) - 行动: 为新推出的智能手表撰写产品描述\n- 目的: 在电商平台上吸引潜在买家并提升产品销量\n- 执行: 生成三段不同风格的产品描述，分别突出手表的健康监测、便捷支付和时尚外观功能 ERA - Expectation (期望)\n- Role (角色)\n- Action (行动) - 期望: 生成一篇能够提高社交媒体互动的产品宣传文案\n- 角色: 担任社交媒体营销专家\n- 行动: 撰写一篇突出产品优势并包含行动号召的简短文案，附带产品链接和互动问题 RTF - Role (角色)\n- Task (任务)\n- Format (格式) - 角色: 资深行业分析师\n- 任务: 解析新能源汽车市场趋势\n- 格式: 包含数据可视化图表与SWOT分析矩阵的PPT大纲 TAG - Task (任务)\n- Action (行动)\n- Goal (目标) - 任务: 提升长尾词排名\n- 行动: 优化TDK标签\n- 目标: 3周内自然流量增长20% CIDI - Context (上下文)\n- Instructions (指令)\n- Details (细节)\n- Input (输入) - 上下文: 你是一位金融分析师，需要对某科技公司的季度财报进行分析\n- 指令: 分析公司的收入增长、利润率、现金流和主要业务部门表现\n- 细节: 报告需包含数据可视化，长度限制在3页内，重点关注同比变化\n- 输入: 提供最近4个季度的财务报表数据、行业平均水平和主要竞争对手数据 CARE - Context (上下文)\n- Action (行动)\n- Result (结果)\n- Example (示例) - 上下文: 一家新开的咖啡店需要提升社交媒体知名度\n- 行动: 策划为期一个月的社交媒体营销活动，包括每日图文更新、互动活动和影响者合作\n- 结果: 粉丝数增长50%，每日互动率提升30%，带来线下客流增长20%\n- 示例: 参考星巴克的\u0026quot;#PSL季节\u0026quot;社媒活动，通过话题引导和用户原创内容带动参与度 RASE - Role (角色)\n- Action (行动)\n- Result (结果)\n- Example (示例) - 角色: 担任一位经验丰富的旅行顾问\n- 行动: 为一位计划前往日本旅行两周的客户制定行程计划\n- 结果: 生成一份包含每日行程、交通方式、住宿建议和餐饮推荐的详细旅行计划\n- 示例: 客户偏好文化体验和自然风光，预算中等 COAST - Context (上下文)\n- Objective (目标)\n- Actions (行动)\n- Scenario (场景)\n- Task (任务) - 背景: 一家电商公司过去一年客户留存率持续下降\n- 目标: 在下个季度将客户留存率提升10%\n- 行动: 实施客户忠诚度计划，改进客户服务流程，进行客户沟通个性化\n- 场景: 客户反馈表明服务响应速度慢，缺乏个性化关怀，且现有会员体系缺乏吸引力\n- 任务: 分析客户流失原因，设计新的客户忠诚度计划，优化客服培训内容，并制定个性化沟通方案 ROSES - Role (角色)\n- Objective (目标)\n- Scenario (场景)\n- Expected solution (期望解决方案) - 角色: 担任专业的职业规划师\n- 目标: 为一位希望转行到数据分析领域的客户提供职业发展建议\n- 场景: 客户目前从事市场营销工作五年，具备一定的商业分析能力，但缺乏数据分析技能和经验\n- 期望解决方案: 一份详细的职业发展规划，包括技能提升路径、认证建议和实践项目推荐 RISEN - Role (角色)\n- Instructions (指令)\n- Steps (步骤)\n- End Goal/Expectations (最终目标/期望)\n- Narrowing/Novelty (约束/新颖性) - 角色: 担任资深营销活动策划专家\n- 指令: 为一款新推出的智能家居产品策划一场线上发布会\n- 步骤: 详细列出发布会策划步骤，包括活动主题、内容环节、嘉宾邀请、宣传推广、互动环节设计等\n- 最终目标/期望: 发布会目标是吸引10,000名观众在线观看，并在活动后一周内提升产品官网访问量50%\n- 约束/新颖性: 发布会时长控制在60分钟内，采用虚拟现实技术增加互动性，并结合时下流行的直播带货模式 TRACE - Task (任务)\n- Request (请求)\n- Action (行动)\n- Context (上下文)\n- Example (示例) - 任务: 为一篇科技博客文章撰写引人入胜的开头段落\n- 请求: 开头段落需要吸引读者继续阅读，并概括文章的主题\n- 行动: 使用悬念、提问或引人注目的事实来开头\n- 上下文: 文章主题是关于人工智能在医疗健康领域的应用，目标读者是对科技和健康领域感兴趣的普通大众\n- 示例: 提供几个优秀博客文章开头段落的例子，例如《纽约时报》或《连线》杂志的科技文章 CREATE - Character (角色)\n- Request (请求)\n- Examples (示例)\n- Action (行动)\n- Task (任务)\n- Execution (执行) - 角色: 担任一位资深的社交媒体内容编辑\n- 请求: 为一家环保组织撰写一篇关于塑料污染危害的社交媒体帖子\n- 示例: 分享类似环保主题的成功社媒案例\n- 行动: 结合数据和故事性叙述\n- 任务: 在有限字数内传达关键信息\n- 执行: 创作引人共鸣的内容并配以适当的多媒体元素 COSTAR - Context (上下文)\n- Objective (目标)\n- Style (风格)\n- Tone (语调)\n- Audience (受众)\n- Response (回复) - 上下文: 一家时尚品牌正在进行新品发布预热\n- 目标: 在社交媒体上发布一段文字，预告即将发布的新系列，并引发用户期待\n- 风格: 时尚、简约、高级\n- 语调: 自信、优雅、略带神秘感\n- 受众: 关注时尚潮流的年轻消费者和品牌忠实用户\n- 回复: 撰写一段社交媒体文案，字数控制在50字以内 框架使用建议 以上介绍的这些prompt框架各有特点，可以根据不同场景选择合适的框架：\n内容创作类：CREATE、TRACE、COSTAR框架更适合用于文案、文章等创意内容的生成，它们注重风格、语调和受众定位。\n项目规划类：COAST、RISEN框架适合用于项目策划和执行，它们包含了详细的步骤和目标设定。\n分析报告类：CIDI、RTF框架适合用于撰写分析报告和专业文档，它们强调结构化输出和专业性。\n营销策划类：CARE、ERA框架适合用于营销活动策划，它们关注结果导向和实际效果。\n简单任务类：APE、TAG框架结构简单，适合日常小型任务的prompt编写。\n在实际使用中，可以根据任务的复杂程度和需求特点，选择合适的框架，甚至将多个框架的优势结合起来，构建更适合自己需求的prompt模板。记住，这些框架仅是参考，最重要的是能够清晰地表达你的需求和期望。\n","permalink":"https://www.mfun.ink/2025/03/01/ai-prompt-methodology/","summary":"\u003cp\u003edeepseek出现后，AI的势头更加一路不可阻挡， cursor最近又更新了Claude 3.7，编程体验进一步提高，身为码农对未来还有几年职业生涯充满了焦虑。熟话说打不过就加入，AI的浪潮已经阻挡不了，最好的方式就是学习接受，细节算法实现暂且不提门槛太高，还是先从使用上入手，下面整理常见的prompt框架。\u003c/p\u003e","title":"常见prompt框架"},{"content":"继续压榨主机生产力，在wsl Ubuntu中部署ai绘图，安装过程中需要代理，系统版本如下:\nwsl 2 windows 11 ubuntu 24.04 安装python 安装pyenv ubuntu 24.04自带的python版本是3.12，sd-webui要求3.10或者3.11这里先安装python，可以参考sd-webui github文档直接apt安装，这里为了方便管理多版本安装pyenv $ curl https://pyenv.run | bash 安装编译依赖 pyenv安装成功后，执行pyenv install报错，安装编译python需要的依赖 # 安装依赖 $ sudo apt-get update $ sudo apt-get install make build-essential libssl-dev zlib1g-dev \\ libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \\ libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev 再次安装成功\n# 安装python $ pyenv install 3.11.10 # 切换至3.11.10版本 $ pyenv global 3.11.10 安装cuda 参考nvida官网安装wsl cuda\n$ wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin $ sudo mv cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600 $ wget https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda-repo-wsl-ubuntu-12-6-local_12.6.2-1_amd64.deb $ sudo dpkg -i cuda-repo-wsl-ubuntu-12-6-local_12.6.2-1_amd64.deb $ sudo cp /var/cuda-repo-wsl-ubuntu-12-6-local/cuda-*-keyring.gpg /usr/share/keyrings/ $ sudo apt-get update $ sudo apt-get -y install cuda-toolkit-12-6 安装后可以执行nvidia-smi查看安装情况\n$ nvidia-smi Sat Oct 19 22:41:42 2024 +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 565.51.01 Driver Version: 565.90 CUDA Version: 12.7 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA GeForce RTX 4060 Ti On | 00000000:01:00.0 On | N/A | | 0% 37C P8 8W / 165W | 1050MiB / 16380MiB | 1% Default | | | | N/A | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | 0 N/A N/A 23 G /Xwayland N/A | +-----------------------------------------------------------------------------------------+ 安装sd-webui 直接按照sd-webui GitHub 文档安装，安装完成后将模型放置**stable-diffusion-webui/models/Stable-diffusion/**目录，模型去c站下载，直接执行webui.sh启动\n# 安装 $ git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git # 启动 $ ./webui.sh 启动成功会提示访问http://127.0.0.1:7860， 问题 代理导致http://127.0.0.1:7860访问不通，可以增加 \u0026ndash;listen 启动参数，会在0.0.0.0:7860地址启动 urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=\u0026#39;192.168.1.11\u0026#39;, port=1081): Max retries exceeded with url: http://127.0.0.1:7860/startup-events (Caused by ProxyError(\u0026#39;Unable to connect to proxy\u0026#39;, RemoteDisconnected(\u0026#39;Remote end closed connection without response\u0026#39;))) $ ./webui.sh --listen 启动过程中还可能会报如下问题，提示安装TCMalloc，优化CPU、内存使用，不安装也不影响使用 Cannot locate TCMalloc. Do you have tcmalloc or google-perftool installed on your system? (improves CPU memory usage) # 安装TCMallocls $ sudo apt-get install libtcmalloc-minimal4 -y 整个安装下来需要下载很多软件包，国内的话需要代理，没有代理就要找其他离线包安装的方式了。\n","permalink":"https://www.mfun.ink/2024/10/19/wsl-sd-webui/","summary":"\u003cp\u003e继续压榨主机生产力，在wsl Ubuntu中部署ai绘图，安装过程中需要代理，系统版本如下:\u003c/p\u003e","title":"wsl Ubuntu 安装 stable-diffusion-webui"},{"content":"最近组了台台式机，日常主力机从Mac OS切到了Windows，Windows下的终端之前一直是被吐槽的对象，不过自从有了WSL后，Windows下的开发体验有了极大的提升，终端体验已经完全能赶得上Mac、Linux。贴两张调整后的终端截图：\n安装ho my posh 直接在Windows store搜索安装即可 修改配置文件 安装完成后打开Windows terminal，命令行输入$PROFILE获取配置文件位置，类似Linux的.zshrc、.bashrc\n\u0026gt;\u0026gt; $PROFILE C:\\Users\\wow\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 直接使用notepad编辑$PROFILE文件，若文件不存在直接新建\n❯❯ notepad C:\\Users\\wow\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 输入如下内容\n# 终端主题，可以修改montys.omp.json比如改成gmay.omp.json切换其他主题 C:\\\\Users\\\\wow\\\\AppData\\\\Local\\\\Programs\\\\oh-my-posh\\\\bin\\\\oh-my-posh.exe init pwsh --config $env:POSH_THEMES_PATH\\montys.omp.json | Invoke-Expression # 插件类似zsh的各种插件 Import-Module posh-git # 引入 posh-git Import-Module PSReadLine # 历史命令联想 # 设置预测文本来源为历史记录 Set-PSReadLineOption -PredictionSource History # 设置 Tab 为菜单补全和 Intellisense Set-PSReadLineKeyHandler -Key \u0026#34;Tab\u0026#34; -Function MenuComplete # 每次回溯输入历史，光标定位于输入内容末尾 Set-PSReadLineOption -HistorySearchCursorMovesToEnd # 设置向上键为后向搜索历史记录 Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向下键为前向搜索历史纪录 Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward 安装字体 保存重新载入后，再打开就会发现主题已修改，但有些乱码字符，很明显是某些字体没有安装，如果在Linux、Mac下折腾过终端对这些肯定都很熟悉。 安装字体, 可以直接在终端使用oh-my-posh安装，可能需要代理\n# 安装字体 ❯❯ oh-my-posh font install # 安装失败，如果有代理，可以设置代理后尝试重试 ❯❯ set HTTP_PROXY=http://ip:port ❯❯ set HTTPS_PROXY=http://ip:port 如果安装失败也可以直接浏览器下载字体解压安装，比如安装JetBrainsMono可以直接去github下载字体包，下载后解压安装 进入终端配置，修改字体和主题 进入power shell -\u0026gt; 外观 修改想要的主题和新安装的字体，保存后乱码问题就解决了，如果没解决换其他字体 安装插件 上面说到安装了两个插件，进入终端的时候会提示插件没有安装可以执行以下命令安装\n❯❯ Install-Module PSReadLine -Force ❯❯ Install-Module posh-git -Force 至此Windows-terminal基本调教完成，看着舒服多了。\nwsl安装oh-my-zsh 最后把wsl ubuntu子系统切成zsh并安装oh-my-zsh，进入Linux终端，安装zsh\n# 安装zsh $ sudo apt intall zsh # 切换当前用户默认shell $ chsh -s /usr/bin/zsh 后续安装zsh可以参考我之前写的在Mac下安装zsh的文章\n","permalink":"https://www.mfun.ink/2024/10/19/windows-teminal/","summary":"\u003cp\u003e最近组了台台式机，日常主力机从Mac OS切到了Windows，Windows下的终端之前一直是被吐槽的对象，不过自从有了WSL后，Windows下的开发体验有了极大的提升，终端体验已经完全能赶得上Mac、Linux。贴两张调整后的终端截图：\u003c/p\u003e","title":"windows-teminal 美化"},{"content":"seo 是什么 SEO，即搜索引擎优化（Search Engine Optimization），是一种通过优化网站结构、内容和外部链接来提高网站在搜索引擎中的排名的技术和策略。SEO的目的是增加网站的可见性，从而吸引更多的自然流量（即非付费流量）。\n影响seo的关键因素 关键词研究： 识别用户在搜索引擎中使用的关键词。 确保网站内容包含这些关键词。 网站内容优化： 创建高质量、有价值的内容。 确保内容与用户搜索意图相匹配。 技术优化： 提高网站加载速度。 确保网站对移动设备友好。 优化网站结构和导航，以便搜索引擎能够更好地抓取和索引内容。 链接建设： 获取高质量的外部链接（反向链接），即其他网站链接到你的网站。 内部链接优化，即网站内部页面之间的链接。 用户体验（UX）： 提高网站的易用性和可访问性。 确保用户在网站上的体验良好，从而减少跳出率（bounce rate）。 本地SEO： 优化本地搜索结果，如在Google My Business中创建和优化你的商家信息。 获取本地评论和评价。 社交媒体整合： 利用社交媒体平台推广你的内容和网站。 增加社交分享和关注度，间接提升SEO效果。 seo 优化措施 SEO优化措施分为站内优化（On-Page SEO）和站外优化（Off-Page SEO）。以下是具体的优化措施：\n站内优化（On-Page SEO） 关键词优化： 关键词研究：使用工具（如Google Keyword Planner、Ahrefs、SEMrush）研究目标关键词。 标题标签（Title Tags）：每个页面都有独特且包含关键词的标题标签。 元描述（Meta Descriptions）：编写包含关键词的简洁、吸引人的元描述。 标题（Headings, H1, H2等）：合理使用标题标签，H1用于主要标题，H2、H3用于子标题。 内容优化：在文章和页面内容中自然地融入关键词。 内容优化： 高质量内容：创作原创、有价值的内容，满足用户需求。 内容长度：确保内容足够详细，通常长内容（1500字以上）在搜索引擎中表现更好。 多媒体内容：使用图片、视频、信息图表等多种媒体形式丰富内容。 更新频率：定期更新内容，保持网站活跃。 技术优化： 网站速度：优化网站加载速度，减少页面加载时间。可以使用CDN、压缩图片、精简代码等方法。 移动友好性：确保网站在移动设备上的良好显示和操作体验。 URL结构：简洁、包含关键词的URL，有助于搜索引擎和用户理解页面内容。 内部链接：合理设置内部链接，提升网站各页面的关联性和用户体验。 用户体验（UX）： 易用性：提高网站导航的简洁性和可用性。 可读性：使用合适的字体大小、行间距和段落分隔，增强内容的可读性。 交互设计：设计吸引人的CTA（Call to Action）按钮，提升用户互动。 结构化数据： Schema Markup：使用结构化数据标记（如Schema.org）帮助搜索引擎更好地理解和展示内容。 站外优化（Off-Page SEO） 链接建设（Link Building）： 获取高质量反向链接：从权威和相关性高的网站获得链接。 内容推广：通过社交媒体、论坛、博客等平台推广内容，吸引外部链接。 客座博客：在相关行业网站发表客座文章，包含回链。 社交媒体营销： 内容分享：在各大社交媒体平台分享网站内容，增加内容的曝光和流量。 互动交流：与用户互动，增加品牌知名度和信任度。 在线评论和口碑： 获取用户评论：鼓励用户在Google My Business、Yelp等平台留下评论。 管理在线声誉：积极回应用户评论，维护良好的在线声誉。 合作与联盟： 行业合作：与其他网站或品牌进行合作，交换资源和链接。 参加行业活动：参与行业会议、研讨会等，提升品牌影响力和知名度。 html 标签优化建议 在进行SEO优化时，HTML标签的使用至关重要。以下是一些关键的HTML标签及其对SEO的影响：\n1. 标题标签（Title Tag） \u0026lt;title\u0026gt;页面标题\u0026lt;/title\u0026gt; 作用：定义网页标题，是搜索引擎和用户首先看到的内容。 优化建议：标题应简洁、有吸引力，包含主要关键词，长度最好控制在60个字符以内。 2. 元描述标签（Meta Description） \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;页面描述\u0026#34;\u0026gt; 作用：提供网页内容的简短描述，出现在搜索结果摘要中。 优化建议：描述应简洁明了，包含主要关键词，长度最好控制在155-160个字符以内。 3. 标题标签（Headings，H1-H6） \u0026lt;h1\u0026gt;主要标题\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;副标题\u0026lt;/h2\u0026gt; 作用：结构化页面内容，帮助搜索引擎理解内容层次。 优化建议：每个页面应有且仅有一个H1标签，包含主要关键词。H2、H3等用于次要标题，合理使用其他标题标签（H2-H6）以分层次组织内容。 4. 关键词标签（Meta Keywords）【不再推荐】 \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;关键词1, 关键词2\u0026#34;\u0026gt; 作用：曾经用于提供页面关键词，现已被大多数搜索引擎忽略。 优化建议：不再推荐使用。 5. 图片标签（Image Tag）及其属性 \u0026lt;img src=\u0026#34;image.jpg\u0026#34; alt=\u0026#34;图片描述\u0026#34;\u0026gt; 作用：提供图片的替代文本，帮助搜索引擎理解图片内容，并在图片无法加载时显示。 优化建议：使用描述性文本，包含相关关键词。 6. 链接标签（Anchor Tag） \u0026lt;a href=\u0026#34;https://example.com\u0026#34;\u0026gt;链接文本\u0026lt;/a\u0026gt; 作用：创建超链接，帮助搜索引擎和用户导航至其他页面。 优化建议：使用描述性链接文本，包含关键词，避免使用“点击这里”等模糊词语。 7. 规范标签（Canonical Tag） \u0026lt;link rel=\u0026#34;canonical\u0026#34; href=\u0026#34;https://example.com/page\u0026#34;\u0026gt; 作用：指示搜索引擎优先抓取和索引的页面，防止重复内容问题。 优化建议：在有重复内容或相似内容的页面上使用，指向优选版本。 8. 结构化数据标记（Schema Markup） \u0026lt;script type=\u0026#34;application/ld+json\u0026#34;\u0026gt; { \u0026#34;@context\u0026#34;: \u0026#34;https://schema.org\u0026#34;, \u0026#34;@type\u0026#34;: \u0026#34;Article\u0026#34;, \u0026#34;headline\u0026#34;: \u0026#34;文章标题\u0026#34;, \u0026#34;datePublished\u0026#34;: \u0026#34;2023-01-01\u0026#34;, \u0026#34;author\u0026#34;: { \u0026#34;@type\u0026#34;: \u0026#34;Person\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;作者名\u0026#34; } } \u0026lt;/script\u0026gt; 作用：帮助搜索引擎更好地理解和展示页面内容，提升在搜索结果中的展示效果（如富文本摘要）。 优化建议：使用适当的Schema标记，如文章、产品、评论等，提升页面在搜索引擎中的可见性。 9. 列表标签（List Tags） \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;列表项1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;列表项2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;有序列表项1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;有序列表项2\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; 作用：结构化内容，使其更易于阅读和理解。 优化建议：合理使用无序列表（ul）和有序列表（ol），提升内容的可读性和用户体验。 10. 段落标签（Paragraph Tag） \u0026lt;p\u0026gt;段落内容\u0026lt;/p\u0026gt; 作用：定义文本段落，提升内容的可读性。 优化建议：每个段落应围绕一个主要思想展开，保持简洁。 ","permalink":"https://www.mfun.ink/2024/07/20/seo-base/","summary":"\u003ch2 id=\"seo-是什么\"\u003eseo 是什么\u003c/h2\u003e\n\u003cp\u003eSEO，即搜索引擎优化（Search Engine Optimization），是一种通过优化网站结构、内容和外部链接来提高网站在搜索引擎中的排名的技术和策略。SEO的目的是增加网站的可见性，从而吸引更多的自然流量（即非付费流量）。\u003c/p\u003e","title":"seo 优化措施"},{"content":"单文件组件 什么是单文件组件？ 简称SFC，将模版（template）、逻辑（script）、样式（style）整合在一个文件中，通常以`.vue`的形式存在。 简化组件开发和管理，使得代码更加清晰、模块化、便于维护\n结构 模版 使用\u0026lt;template\u0026gt;标签定义 用来描述HTTML结构和内容 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;my-component\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 脚本 使用\u0026lt;script\u0026gt;标签定义 包含组件的逻辑代码，通常是JavaScript或者TypeScript \u0026lt;script\u0026gt; export default { data() { return { title: \u0026#39;Hello, Vue!\u0026#39;, message: \u0026#39;This is a single file component.\u0026#39; }; } }; \u0026lt;/script\u0026gt; 样式 使用\u0026lt;stype\u0026gt;标签定义 定义组件css样式，可以选择是否使用scoped来限定样式作用范围 \u0026lt;style scoped\u0026gt; .my-component { font-family: Arial, sans-serif; } \u0026lt;/style\u0026gt; 单文件组件优点 模块化 将模版、逻辑、样式整合在一个文件中，方便组件开发、阅读和维护。\n作用域样式 使用scoped属性，组件的样式仅作用于当前组件，避免样式污染其他组件\n增强可读性 将相关的代码放在一起，使得代码结构更加清晰，增强了可读性\n代码复用 通过创建独立组件，可以方便的在不同的项目或者应用中重用代码\nVue cli的支持 提供对单文件组件的强大支持，可以轻松创建、贬义词和打包单文件组件\n使用 通常情况下，使用 Vue CLI 或 Vue Loader 来处理单文件组件。它们可以将 .vue 文件编译成标准的 JavaScript 文件，供浏览器运行。\n组件示例 \u0026lt;!-- MyComponent.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;greeting\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ message }}\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#39;Hello, World!\u0026#39; }; } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .greeting { color: blue; } \u0026lt;/style\u0026gt; 组件使用：\n// 在 App.vue 或其他组件中使用 \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import MyComponent from \u0026#39;./components/MyComponent.vue\u0026#39;; export default { components: { MyComponent } }; \u0026lt;/script\u0026gt; ","permalink":"https://www.mfun.ink/2024/06/16/vue-sfc/","summary":"\u003ch1 id=\"单文件组件\"\u003e单文件组件\u003c/h1\u003e\n\u003cp\u003e什么是单文件组件？\n简称SFC，将模版（template）、逻辑（script）、样式（style）整合在一个文件中，通常以`.vue`的形式存在。 简化组件开发和管理，使得代码更加清晰、模块化、便于维护\u003c/p\u003e","title":"Vue名词介绍--单文件组件"},{"content":"核心概念 在 Vue.js 中，“应用”（Application）是指整个 Vue 项目的一个实例。它是 Vue 应用的基础结构和运行的起点，负责管理和协调所有的组件、状态、路由、和其他功能模块。 一个 Vue 应用通常是由一个 Vue 实例或多个 Vue 实例组成，通过实例化 Vue 对象创建应用。应用实例负责初始化应用的根组件，并提供应用范围内的配置和资源，例如插件、全局状态管理等。\n基本结构 一、主文件 main.js或main.ts 应用的入口文件，负责初始化和配置 Vue 应用实例。 // main.js import { createApp } from \u0026#39;vue\u0026#39;; import App from \u0026#39;./App.vue\u0026#39;; import router from \u0026#39;./router\u0026#39;; import store from \u0026#39;./store\u0026#39;; const app = createApp(App); app.use(router); app.use(store); app.mount(\u0026#39;#app\u0026#39;); 二、根组件 (App.vue) 应用的根组件，通常用作应用的顶层容器，包含应用的基本结构和逻辑。 \u0026lt;!-- App.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;router-view\u0026gt;\u0026lt;/router-view\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;App\u0026#39; }; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* 全局样式 */ \u0026lt;/style\u0026gt; 三、路由(Router) 定义应用的页面导航和 URL 路径的映射关系。 // router/index.js import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39;; import Home from \u0026#39;../views/Home.vue\u0026#39;; import About from \u0026#39;../views/About.vue\u0026#39;; const routes = [ { path: \u0026#39;/\u0026#39;, name: \u0026#39;Home\u0026#39;, component: Home }, { path: \u0026#39;/about\u0026#39;, name: \u0026#39;About\u0026#39;, component: About } ]; const router = createRouter({ history: createWebHistory(process.env.BASE_URL), routes }); export default router; 四、状态管理(Store) 管理应用的全局状态，可以使用 Vuex 或者其他状态管理库。 // store/index.js import { createStore } from \u0026#39;vuex\u0026#39;; const store = createStore({ state: { count: 0 }, mutations: { increment(state) { state.count++; } } }); export default store; 五、组件 Vue 应用是由多个组件组成的，组件是应用的基本构建块。 如，一个按钮组件：\n\u0026lt;!-- ButtonComponent.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;handleClick\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { methods: { handleClick() { this.$emit(\u0026#39;clicked\u0026#39;); } } }; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; button { background-color: blue; color: white; } \u0026lt;/style\u0026gt; 应用生命周期 1、创建：实例初始化、根组件加载\n2、挂载：实例挂载在DOM上，渲染根组件\n3、更新：数据发生变化，重新渲染组件\n4、销毁：示例被销毁，事件监听器和DOM被移除\n应用配置 应用可以通过创建实例时传入配置选项进行配置\n根组件：使用 render方法指定根组件 createApp({ render: h =\u0026gt; h(App) }); 全局方法和属性：通过 app.config配置全局属性或方法 app.config.globalProperties.$myGlobalMethod = function() { /* ... */ }; 插件：使用 app.use注册插件 app.use(myPlugin); 应用示例 \u0026lt;!-- index.html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My Vue App\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/path/to/main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; // main.js import { createApp } from \u0026#39;vue\u0026#39;; import App from \u0026#39;./App.vue\u0026#39;; createApp(App).mount(\u0026#39;#app\u0026#39;); \u0026lt;!-- App.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Welcome to My Vue App\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#39;Hello, Vue!\u0026#39; }; } }; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; #app { text-align: center; color: #2c3e50; } \u0026lt;/style\u0026gt; ","permalink":"https://www.mfun.ink/2024/06/16/vue-application/","summary":"\u003ch2 id=\"核心概念\"\u003e核心概念\u003c/h2\u003e\n\u003cp\u003e在 Vue.js 中，“应用”（Application）是指整个 Vue 项目的一个实例。它是 Vue 应用的基础结构和运行的起点，负责管理和协调所有的组件、状态、路由、和其他功能模块。\n一个 Vue 应用通常是由一个 Vue 实例或多个 Vue 实例组成，通过实例化 Vue 对象创建应用。应用实例负责初始化应用的根组件，并提供应用范围内的配置和资源，例如插件、全局状态管理等。\u003c/p\u003e","title":"Vue名词介绍--应用"},{"content":"最近在服务器上跑docker应用映射通过smb挂载的nas目录时遇到一些问题，在这里记录下，服务器系统是Linux Ubuntu 22.04。\nSqlite database is locked 最初的挂载参数如下，uid和gid取的是当前登录用户的用户id和用户组id。结果就是报database is locked，修改文件权限，添加dir_mode=0777,file_mode=0777参数也还是不行。\n//192.168.1.4/xx /mnt/xx cifs credentials=/home/.smbcredentials,uid=1000,gid=1000,rw,noauto,x-systemd.automount,iocharset=utf8 0 0 最后添加nobrl参数后可以了，官方文档里对这个参数的解释：Do not send byte range lock requests to the server. This is necessary for certain applications that break with cifs style mandatory byte range locks (and most cifs servers do not yet support requesting advisory byte range locks).\n大概意思是：不要向服务发送字节范围的锁请求，也就是挂载的smb目录不支持字节范围的锁请求。修改后挂载参数如下：\n//192.168.1.4/xx /mnt/xx cifs credentials=/home/.smbcredentials,uid=1000,gid=1000,rw,noauto,x-systemd.automount,nobrl,iocharset=utf8 0 0 附上github上关于这个问题的讨论：\nSQLITE_BUSY: database is locked · Issue #1678 · NginxProxyManager/nginx-proxy-manager (github.com)\nmariadb/mysql 使用远程目录不可用 尝试使用挂载的smb目录映射到mariadb的数据目录，先是报如下问题：\nInstallation of system tables failed! Examine the logs in /var/lib/mysql for more information. The problem could be conflicting information in an external my.cnf files. You can ignore these by doing: shell\u0026gt; /usr/bin/mariadb-install-db --defaults-file=~/.my.cnf You can also try to start the mysqld daemon with: shell\u0026gt; /usr/bin/mariadbd --skip-grant-tables --general-log \u0026amp; and use the command line tool /usr/bin/mariadb to connect to the mysql database and look at the grant tables: shell\u0026gt; /usr/bin/mysql -u root mysql mysql\u0026gt; show tables; Try \u0026#39;mysqld --help\u0026#39; if you have problems with paths. Using --general-log gives you a log in /var/lib/mysql that may be helpful. 尝试添加查了一圈应该是权限问题，上面挂载uid和gid是1000，mariadb和mysql的docker镜像构建的时候创建了mysql用户和用户组id是999，导致没有目录权限。尝试修改文件权限，直接挂载成0777的权限，docker启动没有报错，但是却卡住没有进行db初始化，登录容器后使用命令行连接db连接失败，就像没有启动成功。\n又查了下docker映射smb目录，db启动失败相关的问题，发现还挺多人碰到这个问题的，有人建议不要使用SBM挂载要用nfsv4，开启NAS的的nfs共享，尝试通过nfs挂载，结果还是不行，报没有写权限，不清楚是不是nas的nfs是不是没有开启写权限，还是说协议版本不对，折腾了半天还是没有成功。\n最后找到了官方说法\nYou should be cautious when considering whether to use NFS with MySQL. Potential issues, which vary by operating system and NFS version, include the following: MySQL data and log files placed on NFS volumes becoming locked and unavailable for use. Locking issues may occur in cases where multiple instances of MySQL access the same data directory or where MySQL is shut down improperly, due to a power outage, for example. NFS version 4 addresses underlying locking issues with the introduction of advisory and lease-based locking. However, sharing a data directory among MySQL instances is not recommended. Data inconsistencies introduced due to messages received out of order or lost network traffic. To avoid this issue, use TCP with hard and intr mount options. Maximum file size limitations. NFS Version 2 clients can only access the lowest 2GB of a file (signed 32 bit offset). NFS Version 3 clients support larger files (up to 64 bit offsets). The maximum supported file size also depends on the local file system of the NFS server. Using NFS within a professional SAN environment or other storage system tends to offer greater reliability than using NFS outside of such an environment. However, NFS within a SAN environment may be slower than directly attached or bus-attached non-rotational storage. If you choose to use NFS, NFS Version 4 or later is recommended, as is testing your NFS setup thoroughly before deploying into a production environment. 翻译如下，使用nfs需谨慎：\n考虑将 MySQL 与 NFS 一起使用时，您应该谨慎行事。潜在问题因操作系统和 NFS 版本而异，包括以下几点： MySQL 数据和日志文件放置在 NFS 卷上，可能会被锁定并无法使用。锁定问题可能发生在多个 MySQL 实例访问相同数据目录或 MySQL 因断电等原因不正确关闭的情况下。NFS 版本 4 通过引入咨询和基于租期的锁定来解决底层锁定问题。但是，不建议在 MySQL 实例之间共享数据目录。 由于消息乱序接收或网络流量丢失而导致的数据不一致。为了避免这个问题，请使用带有 hard 和 intr 挂载选项的 TCP。 最大文件大小限制。NFS 版本 2 客户端只能访问文件最低的 2GB（带符号的 32 位偏移量）。NFS 版本 3 客户端支持更大的文件（高达 64 位偏移量）。支持的最大文件大小还取决于 NFS 服务器的本地文件系统。 在专业 SAN 环境或其他存储系统中使用 NFS 通常比在该环境之外使用 NFS 更可靠。但是，SAN 环境中的 NFS 可能比直接连接或总线连接的非旋转存储更慢。 如果您选择使用 NFS，建议使用 NFS 4 或更高版本，并在部署到生产环境之前彻底测试您的 NFS 设置。 最终还是选择放弃挂载nas磁盘作为db数据盘，改为直接使用本地磁盘。\n参考： SQLITE_BUSY: database is locked · Issue #1678 · NginxProxyManager/nginx-proxy-manager (github.com)\nMySQL :: MySQL 8.0 Reference Manual :: 10.12.1 Optimizing Disk I/O\nmount.cifs(8) - Linux man page (die.net)\nDocker MariaDB cannot use mount NAS folder - Open Source Projects / DockerEngine - Docker Community Forums\n","permalink":"https://www.mfun.ink/2024/02/16/docker-app-mount-smb/","summary":"\u003cp\u003e最近在服务器上跑docker应用映射通过smb挂载的nas目录时遇到一些问题，在这里记录下，服务器系统是Linux Ubuntu 22.04。\u003c/p\u003e","title":"docker应用挂载SMB网络目录遇到的问题"},{"content":"记录笔记或者写博客的时候经常会直接复制mac截图插入图片，默认复制得到的是无损png图片，图片体积比较大，占空间带宽，就基于go实现了个命令行批量压缩工具。\n基于图片尺寸压缩 主要是用到了github.com/nfnt/resize 库\nfunc (j *JPG) Resizer(filePath string, dstPath string, compressFactor float64) error { // 打开图片文件 file, err := os.Open(filePath) if err != nil { return err } defer file.Close() // 解码图片 img, _, err := image.Decode(file) if err != nil { return err } // 计算新的宽高 width := uint(float64(img.Bounds().Dx()) * compressFactor) height := uint(float64(img.Bounds().Dy()) * compressFactor) // 缩放图片 resizedImg := resize.Resize(width, height, img, resize.Lanczos3) // 创建输出文件 outputFile, err := os.Create(dstPath) if err != nil { return err } defer outputFile.Close() // 保存压缩后的图片 err = jpeg.Encode(outputFile, resizedImg, nil) if err != nil { return err } return nil } 基于质量的压缩 直接使用的Go image标准库\nfunc (j *JPG) QualityLower(filePath string, dstPath string, quality int) error { if quality \u0026lt; 0 { return nil } if quality \u0026lt; 10 { quality = quality * 10 } if quality \u0026gt; 100 { return nil } // 打开图片文件 file, err := os.Open(filePath) if err != nil { return err } defer file.Close() // 解码图片 img, _, err := image.Decode(file) if err != nil { return err } // 创建输出文件 outputFile, err := os.Create(dstPath) if err != nil { return err } defer outputFile.Close() // 设置JPEG编码参数 options := \u0026amp;jpeg.Options{ Quality: int(quality), } // 保存压缩后的图片 err = jpeg.Encode(outputFile, img, options) if err != nil { return err } return nil } png属于无损格式，go默认库无法进行有效压缩，就算用png.BestCompression 参数压缩效果也不理想，如果不是很在乎质量，可以转成jpg图片，再压缩\n// QualityLower png 压缩 func (p *PNG) QualityLower(filePath string, dstPath string) error { // 打开PNG图片文件 file, err := os.Open(filePath) if err != nil { return err } defer file.Close() // 解码PNG图片 img, _, err := image.Decode(file) if err != nil { return err } // 创建输出文件 outputFile, err := os.Create(dstPath) if err != nil { return err } defer outputFile.Close() encoder := png.Encoder{ CompressionLevel: png.BestCompression, } // 保存为PNG格式 err = encoder.Encode(outputFile, img) if err != nil { return err } return nil } png转jpg再压缩\nfunc (i *ImageConvert) ToJPEG(filePath string, dstPath string, quality int) error { file, err := os.Open(filePath) if err != nil { return err } defer file.Close() img, _, err := image.Decode(file) if err != nil { return err } // 创建输出文件 outputFile, err := os.Create(dstPath) if err != nil { return err } defer outputFile.Close() // 设置JPEG编码参数 jpegOptions := \u0026amp;jpeg.Options{ Quality: quality, } // 将PNG转为JPEG并进行压缩 err = jpeg.Encode(outputFile, img, jpegOptions) if err != nil { return err } return nil } 完整代码在github，直接用go安装go install github.com/mengboy/img@latest使用示例：\n# 将image下的png图片批量转换为jpeg图片并压缩质量到80 img convert -s /images -d /imagesjpeg -c jpeg -q 80 # 将image下的test.png转换为test.jpeg并压缩质量到80 img convert -s /images/test.png -d /images/test.jpeg -c jpeg -q 80 # 将image下的图片批量压缩质量到80 img resize -s /images -d /images8 -q 80 # 将image下的test.jpeg压缩质量到80 img resize -s /images/test.jpeg -d /images/test8.jpeg - 80 # 将image下的png图片尺寸批量缩小至原来的80% img resize -s /images -d /images8 -f 0.8 # 将image下的test.png图片尺寸缩小至原来的80% img resize -s /images/test.png -d /images/test8.png -f 0.8 ","permalink":"https://www.mfun.ink/2024/01/28/img-tool/","summary":"\u003cp\u003e记录笔记或者写博客的时候经常会直接复制mac截图插入图片，默认复制得到的是无损png图片，图片体积比较大，占空间带宽，就基于go实现了个命令行批量压缩工具。\u003c/p\u003e","title":"Go 语言实现jpg和png图片的批量压缩"},{"content":"在部署了N个docker服务后，我的极空间Z4CPU性能终于是被榨的一点不剩了，还想继续折腾怎么办，一是升级新款Z423，看了眼价格还是算了；二是服务和存储分开，搞个专门的服务器用来部署服务，NAS回归到它原本的定位上只用来做网络存储，刚好有台闲置的Windows笔记本搞起！\nWindows 11 docker安装和使用 安装docker 安装流程可以参考官方文档， 安装完wsl里会多出两个docker的linux分发版，如过自己没有用wsl安装过分发版，后续拉取镜像启动镜像都会基于这两个分发版，默认是arm架构的，有些镜像可能没有支持arm架构芯片，所以我又用wsl安装了Ubuntu。\nC:\\Users\\vector\u0026gt; wsl -l -v NAME STATE VERSION * Ubuntu Stopped 2 docker-desktop Stopped 2 docker-desktop-data Stopped 2 wsl需要访问github可能需要代理或者绑定host，安装完后在docker设置里打开\n打开后进入Linux命令行就可以直接使用docker了，在命令行拉取启动镜像，windows下docker管理界面会同步更新。\nC:\\Users\\vector\u0026gt; wsl Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.133.1-microsoft-standard-WSL2 x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s just raised the bar for easy, resilient and secure K8s cluster deployment. https://ubuntu.com/engage/secure-kubernetes-at-the-edge This message is shown once a day. To disable it please create the /home/vector/.hushlogin file. vector@DESKTOP-62URPQ2:/mnt/c/Users/vector$ docker --version Docker version 25.0.1, build 29cf629 挂载smb 这里安装ubuntu还有一个原因：默认的那两个docker分发版不支持挂载远程smb。ubuntu下执行下面两条命令用来安装挂载smb相关的依赖：\nsudo apt update sudo apt-get install smbclient cifs-utils 执行以下命令进行挂载，挂载时需要指定权限，不然会导致只有root用户有写权限，其他用户包括docker服务都没有写权限：\nmkdir /mnt/zkj // 创建挂载目录 sudo mount.cifs //192.168.1.4/nvme2-1XXXXXXXXX7/docker /mnt/zkj -o username=1XXXXXXXXX7,password=\u0026#34;xxxxxx\u0026#34;,uid=1000,gid=1000,iocharset=utf8,rw,dir_mode=0777,file_mode=0777 //执行挂载 挂载完后就可以正常映射目录到docker镜像里了，比如启动的wikijs的镜像，这样服务运行在windows服务器上， 存储在局域网下的NAS上\ndocker run -d -p 3080:3000 --name wiki --restart unless-stopped -v /mnt/zkj/docker/wikijs/data/db:/wiki/data/db -v /mnt/zkj/docker/wikijs/data/content:/wiki/data/content -e \u0026#34;DB_TYPE=sqlite\u0026#34; -e \u0026#34;DB_FILEPATH=/wiki/data/db/db-back.sqlite\u0026#34; requarks/wiki:latest 权限问题 上面wsl下的Linux直接挂载smb会有个文件权限问题，导致sqlite无法使用，就上面那个例子容器启动会一直报[SQLITE_BUSY] The database file is locked，解决办法是使用Widows的文件系统\n在windows下先挂载smb 映射到磁盘 右键此电脑唤出菜单，点击将刚挂载的smb映射到磁盘上\n映射为windows磁盘后，在wsl ubuntu里挂载这个磁盘\nmkdir /mnt/e sudo mount -t drvfs E: /mnt/e 启动后自动挂载：编辑sudo vi /etc/fstab添加一行下面的内容\nE: /mnt/e drvfs defaults 0 0 使用新的目录映射启动容器就可以了，如果没有识别到挂载的目录，可以重启下windows下的docker服务\ndocker run -d -p 3080:3000 --name wiki --restart unless-stopped -v /mnt/e/wikijs/data/db:/wiki/data/db -v /mnt/e/wikijs/data/content:/wiki/data/content -e \u0026#34;DB_TYPE=sqlite\u0026#34; -e \u0026#34;DB_FILEPATH=/wiki/data/db/db-back.sqlite\u0026#34; requarks/wiki:latest 总结 如果NAS性能跟得上，完全可以都在NAS上搞，不过这种性能的NAS也就不是传统意义的上的NAS了，更像是定制化的服务器。如过NAS性能不足又不想花钱搞升级可以整个单独的服务器，使用闲置的笔记本或者mini主机跟NAS组个局域网。\n参考 https://github.com/microsoft/WSL/issues/4689 https://github.com/sqlitebrowser/sqlitebrowser/issues/2142 WSL 上的 Docker 容器入门 | Microsoft Learn wsL2中挂载windows下的网络硬盘 | madgd\u0026rsquo;s blog ","permalink":"https://www.mfun.ink/2024/01/28/windows-wsl-docker/","summary":"\u003cp\u003e在部署了N个docker服务后，我的极空间Z4CPU性能终于是被榨的一点不剩了，还想继续折腾怎么办，一是升级新款Z423，看了眼价格还是算了；二是服务和存储分开，搞个专门的服务器用来部署服务，NAS回归到它原本的定位上只用来做网络存储，刚好有台闲置的Windows笔记本搞起！\u003c/p\u003e","title":"局域网下Windows docker 挂载 NAS 磁盘"},{"content":"生命不息，折腾不止，继续压榨NAS的CPU，RSSHub+FreshRSS-FeedMe 打造个人RSS信息聚合服务\nRSS rss是一种内容聚合工具，有rss和atom两种协议，xml为基础协议。通常在一些blog网站比较常见。通过订阅这种方式可以只接收自己选择自己想要关注的信息。\nRSSHub RSSHub是一款开源、简单易用的rss生成器，主要用于将不支持rss的网站变得可以使用rss这种方式订阅。目前已经支持数百个主流网站。\n安装 镜像下载 配置 基本上不需要特别复杂的配置，设置好端口和访问密钥就行，更多配置参考官方文档。\n启动 浏览器通过ip+端口方法出现这个页面就说明安装好了。\n浏览器插件 支持主流浏览器github地址选择相应的浏览器插件进行安装。\n安装完后设置服务地址(上面访问页面时输入的ip+端口)和访问密钥\n插件支持在多种rss订阅服务里添加订阅，这里用的是FreshRss免费开源，支持docker部署。\n使用 使用也十分方便，如过网站支持rss，插件自动就有提示，点击FreshRSS就会将当前网站的rss订阅添加到FreshRSS中。下面的RSSHub针对当前网站支持的api，用法就是可以将订阅地址直接写成 rsshub服务地址+路径 的形式，如过设置了密钥后面要加上密钥参数。\n使用中遇到的问题 按RssHub文档中的api访问有些时候会出现数据获取不到的情况，看报错像是被禁止访问了，可能是目标网站有反爬机制，我就直接使用的官方服务了，不过官方域名国内访问需要使用代理，在FreshRss里配置的时候需要配置上代理。\nFreshRSS 安装 同样先下载freshrss镜像 freshrss会有些配置数据和缓存数据，需要设置下目录映射 设置端口 使用 主要就是阅读和管理订阅，在rsshub浏览器里添加订阅后，联动这里就可以直接查看订阅，不过这个是网页端，移动端的话还需要一个rss阅读器，支持freshrss服务的就行，这里用的是feedme 只支持安卓端，ios端可以用reader。\n添加订阅 正常情况下订阅地址可以正常访问手动添加订阅时能正常添加，一些需要走代理的订阅需要添加#force_feed参数强制添加，然后再在下面代理配置里设置代理\n强制添加订阅 代理配置 FeedMe 安装使用 直接github下载相应apk安装打开选FreshRss，会让输入freshrss api地址和账号密码，api地址需要在freshrss 开启允许api访问，api是服务地址 ip+端口/api/greader.php，比如我这个是http://192.168.1.4:8889/api/greader.php\n账户里设置api密码 登录后效果 ","permalink":"https://www.mfun.ink/2024/01/18/rsshub-freshrss-feedme/","summary":"\u003cp\u003e生命不息，折腾不止，继续压榨NAS的CPU，RSSHub+FreshRSS-FeedMe 打造个人RSS信息聚合服务\u003c/p\u003e\n\u003ch3 id=\"rss\"\u003eRSS\u003c/h3\u003e\n\u003cp\u003erss是一种内容聚合工具，有rss和atom两种协议，xml为基础协议。通常在一些blog网站比较常见。通过订阅这种方式可以只接收自己选择自己想要关注的信息。\u003c/p\u003e\n\u003ch3 id=\"rsshub\"\u003eRSSHub\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://docs.rsshub.app/zh/\"\u003eRSSHub\u003c/a\u003e是一款开源、简单易用的rss生成器，主要用于将不支持rss的网站变得可以使用rss这种方式订阅。目前已经支持数百个主流网站。\u003c/p\u003e","title":"RSSHub+FreshRSS-FeedMe 打造个人RSS信息聚合服务"},{"content":"年纪越来越大，脑力变得大不如之前，这两年越发感觉到记忆力的衰退，好多事情想的时候就是想不起来，找一个趁手的笔记类应用越来越迫在眉睫。正好买了NAS物尽其用就把常见的几款开源支持docker部署的笔记类应用Joplin、思源、Trilium、Blossom都部署体验了下，最终选择了Joplin+Trilium下面记录下个人使用体验。\n思源笔记 国人开发的一款非常棒的开源笔记，社区活跃，插件众多，颜值高而且国人开发使用起来没有语言障碍，一些插件比较贴合国内市场，也有挺多整活有趣的插件，其他功能特点可以看官网介绍。\n为什么没有继续使用了？\n同步问题 部署之后使用的NAS自身的webdav同步，不知怎么的安装几个挂件后同步巨慢，局域网下也巨慢，看了思源是把所有数据分成了小块进行同步的所以文件数据较多、体积小，同步时不能用满带宽，就跟平时复制文件夹时如果小文件太多复制起来会变慢一样。看官方也推荐使用S3同步，不过NAS不支持S3就没继续折腾了。 账号问题 部署后要使用同步功能必须要注册登录他们论坛的账号，对强制要求注册账号这种事比较抵触 收费问题 同步功能非免费，后面需要付费才能使用 Joplin Joplin部署目前用Joplin更多的是来收集网页内容，它的chrome插件配合本地客户端实在是太好用，直接一键把网页内容同步到本地笔记中。Joplin本身功能加上一些插件补充功能上还是满足使用的，就是界面有些简陋。\nTrilium 这个有汉化版也有完整的使用wiki文档，支持双链导出markdown等。可以通过js、html、css实现各种插件比如字数统计、笔记统计等等非常容易扩展。另外一个比较好用的点是对画布excalidraw的支持很好。其他各种功能wiki都很详细，基本上看一遍wiki啥都清楚了。桌面客户端可以和服务器同步，也支持直接在web端访问。\nblossom 目前接触到界面最漂亮的一款笔记，github readme 有详细介绍可以直接在线试用，不过云笔记对服务器端可用性要求比较高。\n其他一些比较受流行的笔记Notion、Obsidian等没法私有部署就没一一体验，就目前使用来Trilium已经完美满足需求了，就不想在折腾其他笔记了，毕竟部署笔记应用的初衷是为了记笔记。之前也一直想找款all in one的笔记最终折腾下来还是各种工具组合下来更舒服些。目前的话网页收集Joplin，笔记整理Trilium，一些项目类wiki使用wiki.js对draw.io的支持太棒了。\n","permalink":"https://www.mfun.ink/2024/01/06/note-software/","summary":"\u003cp\u003e年纪越来越大，脑力变得大不如之前，这两年越发感觉到记忆力的衰退，好多事情想的时候就是想不起来，找一个趁手的笔记类应用越来越迫在眉睫。正好买了NAS物尽其用就把常见的几款开源支持docker部署的笔记类应用\u003ca href=\"https://joplinapp.org/\"\u003eJoplin\u003c/a\u003e、\u003ca href=\"https://b3log.org/siyuan/?lang=cn\"\u003e思源\u003c/a\u003e、\u003ca href=\"https://github.com/zadam/trilium\"\u003eTrilium\u003c/a\u003e、\u003ca href=\"https://github.com/blossom-editor/blossom\"\u003eBlossom\u003c/a\u003e都部署体验了下，最终选择了Joplin+Trilium下面记录下个人使用体验。\u003c/p\u003e","title":"个人笔记类应用使用体验"},{"content":"wiki.js 是一款开源、颜值极高，功能强大的wiki软件，基于Node构建，本身支持嵌入draw.io画流程图，这个是真的方便，就果断部署来体验下。官网 和 github。\n部署 官方有详细的个平台部署文档，这里记录下基于极空间docker的部署，这里直接部署的最新版本v2.5.300.\n镜像拉取 点击部署 路径映射：\n端口映射：\n环境变量：\n部署存粹是个人使用，就直接用的sqlite，目前官方支持这几种数据库：mysql, postgres, mariadb, mssql,sqlite\n初始化配置 设置密码 启动后通过ip+端口访问，填写邮箱和登录密码，site URL可以先不用管，下面开关是否允许官方收集信息来优化产品。\n设置语言 登录后选择进入管理台：\n进入后台后，在Local里下载本地语言并切换到本地语言\n权限管理 访客默认有查看权限，可以在用户组里把访客权限干掉：\n存储 这里相当于一个备份存储，可选择种类很多，我这里就启用了一个git存储，下面可以配置同步方向、同步周期等\n这里需要注意的是，填的git仓库和分支一定要先创建好，如过配置没问题还是同步失败，有可能是下面这个问题，登录到容器找到git仓库目录执行下git config --global --add safe.directory /wiki/data/repo\ncfe4c4613525:/wiki/data/repo# git remote -v fatal: detected dubious ownership in repository at \u0026#39;/wiki/data/repo\u0026#39; To add an exception for this directory, call: git config --global --add safe.directory /wiki/data/repo cfe4c4613525:/wiki/data/repo# git config --global --add safe.directory /wiki/data/repo 其他一些功能可以根据官方文档自行探索，对于个人使用目前的配置已经满足了。\n创建页面 首次进入需要创建首页，根据习惯选择编辑器即可，支持markdown，创建类似目录的层级关系话可以在下面路径里直接填写\n编辑支持嵌入draw.io画图，并且画完后支持在原来基础上编辑，这个功能真的是太棒了，很多支持插入的画图的工具都是画完后插入一张图片就不可编辑了，这里是直接渲染的数据，不是图片，所以可以继续编辑。\nwiki 本身还有很多偏向团队方面的功能，适合小型团队作为知识管理的工具，本身颜值也高。槽点的话就目前体验来看，渲染速度不是很快每次编辑完发布需要等待；侧边栏不能收起，不过说是3.x版本会支持。\n","permalink":"https://www.mfun.ink/2023/12/31/wiki-js-deploy/","summary":"\u003cp\u003ewiki.js 是一款开源、颜值极高，功能强大的wiki软件，基于Node构建，本身支持嵌入draw.io画流程图，这个是真的方便，就果断部署来体验下。\u003ca href=\"https://js.wiki/\"\u003e官网\u003c/a\u003e 和 \u003ca href=\"https://github.com/Requarks/wiki\"\u003egithub\u003c/a\u003e。\u003c/p\u003e","title":"NAS部署wiki.js"},{"content":"问题提出 提出这个问题主要是因为日常开发中有这样的场景，比如服务配置热加载或者一些全局缓存的异步更新，通常会单独启一个协程去获取最新数据再通过赋值更新原数据。因为更新逻辑是单独的协程，变量的写和读就存在并发访问的情况，于是就有了这个问题。一个简单异步刷新例子 如下：\ntype conf struct { } var c *conf func loadConf() { c = \u0026amp;conf{} go func() { ticker := time.NewTicker(time.Second) for range ticker.C{ newC := \u0026amp;conf{} c = newC } }() } 这里的关键点在于c = newC 是否是原子性的，需不需要加锁。go 指针和int64一样都是8位在32位机器上一条指令最多只能操作4字节的数据所以一次赋值操作至少得两条指令，所以在32位机器上肯定存在并发问题。那么在64位机器上8位的数据是可以通过一条指令操作的那在64位机器上存在并发问题吗？\n竞态检测 关于数据并发问题，go本身提供了竞态检测来帮助发现代码中的存在竞态情况，如下代码，通过 go run -race main.go 会显示代码中存在的竟态情况\nfunc main() { var data map[string]string temp := make(map[string]string) data = temp go func() { v := data[\u0026#34;d\u0026#34;] fmt.Println(v) }() go func() { temp := make(map[string]string) temp[\u0026#34;a\u0026#34;] = \u0026#34;a\u0026#34; data = temp }() time.Sleep(time.Second) } // go run -race main.go 输出如下： ================== WARNING: DATA RACE Write at 0x00c000012028 by goroutine 7: main.main.func2() /Users/vector/go/src/demo/conf/main.go:19 +0x93 Previous read at 0x00c000012028 by goroutine 6: main.main.func1() /Users/vector/go/src/demo/conf/main.go:13 +0x34 Goroutine 7 (running) created at: main.main() /Users/vector/go/src/demo/conf/main.go:16 +0x16e Goroutine 6 (running) created at: main.main() /Users/vector/go/src/demo/conf/main.go:12 +0x104 ================== Found 1 data race(s) exit status 66 通过-race参数可以看到go给出了告警，并发赋值存在数据竞争。本着小心使得万年船的态度我们可以加个读写锁，至于这条赋值语句是不是原子的我们继续看。\n汇编代码 想看到赋值是不是一条指令只能看编译之后的汇编代码了，通过go tool compile -S -N main.go \u0026gt; main.s生成中间汇编代码(64位机器)：\n;;... 0x008c 00140 (main.go:19)\tPCDATA\tZR, $-1 0x008c 00140 (main.go:19)\tMOVD\tmain.\u0026amp;data-8(SP), R2 ;;将栈指针（SP）减 8 后的地址处的数据（main.\u0026amp;data）加载到寄存器 R2 中。 0x0090 00144 (main.go:19)\tMOVD\tmain.temp-24(SP), R3 ;;将栈指针（SP）减 24 后的地址处的数据（main.temp）加载到寄存器 R3 中。 0x0094 00148 (main.go:19)\tPCDATA\tZR, $-2 0x0094 00148 (main.go:19)\tMOVWU\truntime.writeBarrier(SB), R0 0x00a0 00160 (main.go:19)\tCBZW\tR0, 168 0x00a4 00164 (main.go:19)\tJMP\t176 0x00a8 00168 (main.go:19)\tMOVD\tR3, (R2) ;;将寄存器 R3 中的数据存储到寄存器 R2 指向的地址。 0x00ac 00172 (main.go:19)\tJMP\t184 0x00b0 00176 (main.go:19)\tCALL\truntime.gcWriteBarrier(SB) 0x00b4 00180 (main.go:19)\tJMP\t184 ;;... 一行赋值语句生成了这么多条汇编指令，真正发生值修改是这句MOVD R3, (R2)可以看出指针的赋值确实是原子的。\n网上的一些讨论 关于这个问题，也在网上搜了下，有说是原子的也有说不是原子的。结合go官方文档只有使用atomic包才保证原子性，并没有显示指出指针赋值是原子的，所以无法保证指针赋值是原子的，虽然上面汇编值修改是只有一条指令，但谁也无法保证随着后续的升级go语言本身会不会有什么修改。所以普遍建议是使用读写锁或者使用atomic，刚好go 1.19新出了atomic.Pointer 专门用来处理指针的原子操作，用法如下：\ntype conf struct { v1 string v2 int } var atomicC = atomic.Pointer[conf]{} func main() { tempc := \u0026amp;conf{ v1: \u0026#34;\u0026#34;, v2: 0, } atomicC.Store(tempc) go func() { ticker := time.NewTicker(time.Second) for range ticker.C { newC := \u0026amp;conf{} atomicC.Store(newC) } }() var c = \u0026amp;conf{} c = atomicC.Load() fmt.Println(c.v2, c.v1) } 总结 go 官方没有显示保证指针赋值是原子的，变量建议使用atomic保证原子性 不同架构的cpu比如x86、x64实现不一样，如过想保证全平台一致一定要显示做原子性处理，加锁或使用atomic 在性能损失可接受的情况下使用atomic或者加锁保证原子性 参考 is-assigning-a-pointer-atomic-in-go golang中多goroutine操作map时直接赋值不用加锁 Is assigning a pointer atomic in go How do I atomically move a 64bit value in x86 ASM? ","permalink":"https://www.mfun.ink/2023/12/06/is-assigning-pointer-atomic-go/","summary":"\u003ch3 id=\"问题提出\"\u003e问题提出\u003c/h3\u003e\n\u003cp\u003e提出这个问题主要是因为日常开发中有这样的场景，比如服务配置热加载或者一些全局缓存的异步更新，通常会单独启一个协程去获取最新数据再通过赋值更新原数据。因为更新逻辑是单独的协程，变量的写和读就存在并发访问的情况，于是就有了这个问题。一个简单异步刷新例子 如下：\u003c/p\u003e","title":"go 指针赋值是原子性的吗"},{"content":"命名是编码过程中让程序员十分纠结的一个点，就像每天饭点纠结选择吃什么饭一样，常见且令人抓头，为此专门有人开发了各种命名神器。命名也是十分能体现一个程序员编码水平的一项，好的命名一定程度能代替代码注释，让代码更加清晰易阅读。好的命名取决于你的词汇量、对业务逻辑的理解以及命名过程中的一些通用规范。遵循一定的命名规范，可以使得代码更加优雅，写起代码来更加如鱼得水。Go语言中主要涉及到包命名、文件命名、结构体命名、接口命名、变量命名下面一一介绍这些相关部分的命名规范。\n包命名 命名简洁且能概括包功能，参考go标准包都是些简短且辨识度极高的命名。 保持包名和文件目录名称一致 全小写，不要包含特殊分隔符如下划线 不用复数。例如net/url，而不是net/urls。 项目名可以使用中横线分隔多个单词 除了广为人知的单词缩写，尽量不要使用缩写 不要用含义宽泛的单词命名，比如“common”，“util”，“lib”等，一般这些单词命名都会往里塞各种乱七八糟的东西，导致依赖关系复杂，不利于阅读。这些包命名作为包下的一个子包名是可以的比如net/util整个包的被引用范围仅限于父包内。 避免将src、pkg放到可导入包路径中 github.com/user/repo/src/httputil // DON\u0026#39;T DO IT, AVOID SRC!! github.com/user/repo/gosrc/httputil // DON\u0026#39;T DO IT, AVOID GOSRC!! 导入的包如果包名冲突，可以采用重命名的方式 import ( gourl \u0026#34;net/url\u0026#34; \u0026#34;myother.com/url\u0026#34; ) 文件命名 简短有意义 所有单词小写，多个单词使用下划线分隔 结构体命名 采用驼峰命名，首字母根据访问控制决定是否大小写 避免使用意义宽泛的单词命名 避免使用包名作为前缀，因为引用过程中包名已经在代码关系中了，如果使用GoLand IDE的话ide也会自动提示 接口命名 基本规则和结构体命名保持一致 单函数接口一般函数名加上er后缀作为接口名，如Reader、 Writer、 Formatter、 CloseNotifier。 多个函数类似结构体命名 变量命名 采用驼峰命名，首字母根据访问控制决定是否大小写 专有名词全大写或全小写，比如UrlArr应该写成URLArr或者urlArr。 包内私有全局变量小写字母开头，或者使用\u0026quot;_\u0026ldquo;开头，保持统一即可 命名简洁，特别是局部变量作用域比较集中时可以使用单首字母，比如index可以直接使用i 常量命名 采用驼峰式 包内私有全局变量小写字母开头，或者使用\u0026rdquo;_\u0026ldquo;开头，保持统一即可 枚举类型的常量需要先声明相应类型比如 type Color string const ( Blue color = \u0026#34;blue\u0026#34; Red color = \u0026#34;red\u0026#34;\t) 函数命名 采用驼峰命名，首字母根据访问控制决定是否大小写 单测可以使用下划线比如TestFunc_xxx 一些吐槽 命名规范里多次强调简洁简短，这也符合Go语言的设计理念。但在实际业务代码中命名的简短就意味着牺牲一定的可读性，因为业务代码中各种复杂嵌套逻辑很难用一两个单词描述清楚，这就要你做出取舍是保持代码简洁还是保证代码更易读，个人认为在团队里易读让别人更容易看懂还是更重要些。\n参考 uber Go编程规范 Style guideline for Go packages Go官方博客包命名 ","permalink":"https://www.mfun.ink/2023/11/26/go-name-standard/","summary":"\u003cp\u003e命名是编码过程中让程序员十分纠结的一个点，就像每天饭点纠结选择吃什么饭一样，常见且令人抓头，为此专门有人开发了各种命名神器。命名也是十分能体现一个程序员编码水平的一项，好的命名一定程度能代替代码注释，让代码更加清晰易阅读。好的命名取决于你的词汇量、对业务逻辑的理解以及命名过程中的一些通用规范。遵循一定的命名规范，可以使得代码更加优雅，写起代码来更加如鱼得水。Go语言中主要涉及到包命名、文件命名、结构体命名、接口命名、变量命名下面一一介绍这些相关部分的命名规范。\u003c/p\u003e","title":"Go语言编程规范-命名篇"},{"content":"Jellyfin是一款免费开源的媒体影音系统，集刮削、媒体库、转码等功能于一体，类似极空间自带的极影视。就目前个人使用体验来看，极影视的刮削、以及影视库管理功能已经非常强大了，那为何还要安装Jellyfin呢，当然是给收集的小姐姐们一个家啊。\n安装 NAS下当然还是docker安装，安装教程基本上随手一搜就是一大把，这里简单记录下配置项，主要是文件映射和端口映射\n文件映射 端口映射 配置完成后直接启动容器，之后在浏览器里通过ip+端口访问，首次访问需要设置用户名和密码。\n使用优化 硬件解码 如果使用服务端解码的话一定要开启硬件解码，否则可以说是毫无使用体验，硬件加速选择根据机器配置进行选择，极空间是Intel CPU+集显，所以就选Intel加速。\n实际上在开启硬件加速后，就目前使用体验来看，播放起4K高清视频，还是卡顿明显。所以还是建议使用串流让客户端解码。\n客户端解码 这种方式的话默认就内网播放了，因为串流播放非常依赖带宽，相当于把完整的视频下载下来，一部高清视频大十几G，外网播放流量带宽属实扛不住，当然如果你说你公网带宽无压力那请随意。\n将用户播放设置里，允许转码播放都取消勾选 客户端设置，客户端可以勾选使用fMP4-HLS播放器，不过实际上还是建议使用第三方播放器 第三方播放器 桌面端 MacOS和windows都可以选择jellyfin-mpv-shim播放器，适配了Jellyfin的MPV播放器，支持mpv的各种配置，对mpv不熟悉可以直接用默认配置，安装的话windows有现成安装包，mac下可以用brew+pip安装。安装完成后，启动jellyfin-mpv-shim按照提示登录jellyfin服务器即可。之后打开Jellyfin客户端播放一个视频，点击右上角那个框可以选择在其他播放器播放。\nMac下还有一个好用的客户端Infuse，infuse支持多种类型的播放源Jellyfin是其中之一，支持同步Jellyfin的元数据以及媒体库。播放进度也可以同步到Jellyfin服务器。最关键的是播放高清视频十分流畅，我尝试和MPV、VLC对比了下，这俩都有卡顿的情况下infuse居然十分流畅，当然也有可能是我mpv和vlc配置不对。\n移动端 移动端安装官方客户端后，修改设置可以使用第三方播放器，设置-\u0026gt;客户端设置-\u0026gt;video player type 改为External player\n点击播放会让你选择已经安装的播放器播放，这里推荐MXPlayer，除了播放器自身强大外，也是我找到的唯一可以同步播放进度到Jellyfin服务的播放器\n其他一些客户端，参考这个github仓库 客户端界面设置 安装官方客户端后可以先在设置-》显示里修改客户端语言以及主题\n一些网络错误解决 TMDB访问不通 通过tmdb刮削元数据时，报如下错误\nSystem.Net.Http.HttpRequestException: Connection timed out (api.themoviedb.org:443) github访问不通 某些插件可能会访问github下载资源，出现如下错误\nSystem.Net.Http.HttpRequestException: Connection refused (raw.githubusercontent.com:443) 上面两个问题一般是查询DNS没有找到相应ip地址，可以修改默认DNS服务器地址，一些默认的国内DNS比如114.114.114.114会封禁一些访问，这时候通过修改DNS一定程度上能解决问题。\n也可以到到这个DNS checker网站查询可使用的ip，通过修改host文件直接绑定可使用ip解决问题\n如果这里找到的ip都访问不通的话，那可能就需要挂代理了。\n","permalink":"https://www.mfun.ink/2023/10/29/jellyfin-install-use/","summary":"\u003cp\u003eJellyfin是一款免费开源的媒体影音系统，集刮削、媒体库、转码等功能于一体，类似极空间自带的极影视。就目前个人使用体验来看，极影视的刮削、以及影视库管理功能已经非常强大了，那为何还要安装Jellyfin呢，当然是给收集的小姐姐们一个家啊。\u003c/p\u003e","title":"Jellyfin安装及使用体验优化"},{"content":"有了NAS之后就想着物尽其用，把能够私有化部署的都全部都私有化部署，突出一个折腾。下面基于calibre-web打造个人数字图书馆。\n下载部署 这里在极空间docker下部署，其他品牌支持docker的NAS也是差不多的流程。\n拉取镜像linuxserver/calibre-web 双击拉取成功的镜像开始部署 设置挂载路径 设置端口映射 设置环境变量 TZ是时区设置；PUID、PGID是服务进程在docker下的启动用户，0的话表示是以root用户运行，一般不推荐，官方镜像文档给的例子是1000；HTTPS_PROXY是docker系统级别的环境变量，设置这个目的是calibre-web元数据抓取有google，不挂代理的话有些元数据抓取没法用，代理就需要自己想办法了嘿嘿。。。\n修改配置 安装部署完成后，通过ip+端口访问，初始登录用户：admin，密码：admin123。\n登录之后设置书籍存储路径 若提示以下错误表示初始db文件不存在，官方githubREADME有提到，可以通过这个链接下载，下载之后放到/book目录下，如果有权限问题可以修改db文件权限chmod 644 metadata.db\n修改用户配置 点击右上角的用户，进入用户配置，可以修改用户名和密码；用来接收书籍的电子阅读器邮箱地址一般是类似Kindle这种可以直接通过邮箱接收书籍的应用使用。\n元数据获取 点击上传的书籍，会弹出书籍详情，点击下面的编辑元数据会进入元数据详情，可以手动编辑元数据或者点击最下方的获取元数据自动获取\n国内如果没有代理的话google是用不了的，不过豆瓣基本上也够用了。\n书籍资源查找 关于找书我一般是在zlibrary，其他一些图书网站如图，有些需要挂代理。\n客户端阅读器 calibre-web 支持opds协议，ip+端口/opds就是opds路径，所有支持opds的客户端都可以。\n安卓下推荐静读天下，ios推荐kybook。 另外有一款开源的fbreader跨平台ios、安卓、pc、mac都支持，且支持google drive同步，就是文件格式支持不好不支持pdf。 kindle用户也可以通过邮件推送方式获取书籍。 如果希望阅读过程中支持标注、注解可以选择以上应用。\ncalibre-web自带的web阅读基本功能也都有，如果想要支持批准、注解可以安装浏览器插件比如简阅或者开源的hypothes。如果使用hypothes Joplin也有相关插件支持导出批注到笔记。\n","permalink":"https://www.mfun.ink/2023/10/23/docker-calibre-web/","summary":"\u003cp\u003e有了NAS之后就想着物尽其用，把能够私有化部署的都全部都私有化部署，突出一个折腾。下面基于calibre-web打造个人数字图书馆。\u003c/p\u003e","title":"docker部署calibre-web"},{"content":"在之前的一篇文章中记录了使用docker部署joplin-server的流程。有提到joplin-server可以使用SQLite或者PostgresSQL，这两种存储方式分别该如何备份数据呢？\nSQLite 备份 默认使用SQLite的时候，服务会在/home/joplin/packages/server下创建db-prod.sqlite文件来存储笔记数据。\nroot@cd7e1f960db0:/home/joplin/packages/server# ls -al ... -rw-r--r-- 1 joplin joplin 8165 Jul 13 10:26 README.md drwxr-xr-x 1 joplin joplin 10 Jul 13 10:26 assets -rw-r--r-- 1 joplin joplin 5054464 Sep 29 04:36 db-prod.sqlite drwxr-xr-x 1 joplin joplin 390 Jul 13 10:38 dist -rw-r--r-- 1 joplin joplin 624 Jul 13 10:26 gulpfile.js ... 显然，这种在docker里创建的文件，docker镜像一旦销毁文件啥的就都没了，一般我们需要持久化的数据都会选择挂载卷的方式把主机目录挂载到docker镜像里，这样docker应用实际操作就是主机目录下文件，即使docker镜像销毁主机目录下的文件也不会受影响，那接下来尝试使用挂载路径存储笔记数据。 首先，首次部署的时候挂载好目录 服务启动后进入容器内命令行，把初始化的db-prod.sqlite拷贝到挂载的目录里\nroot@cd7e1f960db0:/home/joplin/packages/server# cp db-prod.sqlite /back/ root@cd7e1f960db0:/home/joplin/packages/server# ls /back db-prod.sqlite 最后，添加环境变量使用自定义数据库路径，重新启动 理想情况下，joplin-server会使用挂载的这个数据库作为存储，然而启动后报错，看错误信息是因为没有写权限，我又尝试修改文件权限，清理knex_migrations_lock表的数据，但是还是不行。最终放弃了挂载这种方式。\n[error] db: update `knex_migrations_lock` set `is_locked` = 1 where `is_locked` = 0 - SQLITE_READONLY: attempt to write a readonly database 接着又考虑其他方法，启动后使用/back/db-prod.sqlite覆盖默认初始化的/home/joplin/packages/server/db-prod.sqlite，一试还真行，覆盖之后通过浏览器访问，登录账号确实是修改之后的，笔记数据也都在。那这种方法是可以的，接下来就好办了，我们定期备份db-prod.sqlite就行，可以写个脚本启个定时任务，定期把数据库文件备份到挂载的主机目录下。 当然客户端本地数据都有的情况下，server端docker容器由于某种原因销毁，重新部署后，也可以通过本地覆盖远程的方式强行覆盖远程数据。不过这样总归是有些麻烦的，毕竟重新部署server端后还得修改账号数据。\nPostgresSQL 备份 使用PostgresSQL的话实际是备份PostgresSQL数据库，docker部署PostgresSQL的时候挂载好路径就行，这样docker镜像异常销毁，数据也不会受到影响。 总结下来，还是PostgresSQL更方便些，数据和镜像分割开来，更加安全，果断切到PostgresSQL上来。\n","permalink":"https://www.mfun.ink/2023/09/29/docker-joplin-server-data-backup/","summary":"\u003cp\u003e在之前的一篇\u003ca href=\"https://www.mfun.ink/2023/09/12/joplin-docker-deploy/\"\u003e文章\u003c/a\u003e中记录了使用docker部署joplin-server的流程。有提到joplin-server可以使用SQLite或者PostgresSQL，这两种存储方式分别该如何备份数据呢？\u003c/p\u003e","title":"docker部署joplin-server数据备份问题"},{"content":"Go语言处理zip压缩还是比较方便的，可以直接使用Go标准库archive/zip。下面记录下具体使用方法，以及注意事项。\nGo 处理zip解压 一般zip文件是来自于磁盘或者网络，不管处理磁盘还是网络中的zip文件首先都是读取文件数据\n// 读取磁盘文件 func getFromDisk(filePath string) ([]byte, error) { return os.ReadFile(filePath) } // 读取网络文件 func getZipFromNet(zipURL string) ([]byte, error) { rsp, err := http.Get(zipURL) if err != nil { return nil, err } rspBody, err := io.ReadAll(rsp.Body) if err != nil { return nil, err } defer rsp.Body.Close() return rspBody, nil } 拿到数据后在使用标准库解压就好，需要注意的是要记得校验目录是否存在，如果不存在要先创建不然下面Open打开文件的时候会报错。\n// @zipData 压缩数据 // @destDir 要解压的文件夹 func unzip(zipData []byte, destDir string) error { zipReader, err := zip.NewReader(bytes.NewReader(zipData), int64(len(zipData))) if err != nil { return err } for _, f := range zipReader.File { err := writeUnzipFile(f, destDir) if err != nil { fmt.Println(err) return err } } return nil } // isFileExist 文件或目录是否存在 func isFileExist(filePath string) bool { _, err := os.Stat(filePath) if err != nil { if os.IsExist(err) { return true } return false } return true } func writeUnzipFile(f *zip.File, destDir string) error { fName := f.Name destPath := filepath.Join(destDir, fName) // 判断文件夹是否存在，主要是处理zip包含多层文件目录的情况 if f.FileInfo().IsDir() \u0026amp;\u0026amp; !isFileExist(destPath) { err := os.MkdirAll(destPath, os.ModePerm) return err } // 创建要写入的文件 fw, err := os.Open(destPath) if err != nil { return err } defer fw.Close() fr, err := f.Open() if err != nil { return err } defer fr.Close() _, err = io.Copy(fw, fr) return err } 压缩文件 压缩文件就要用到zip writer了，这里用到filepath.Walk遍历目录下所有文件读取并写入到zip writer里，需要注意的是filepath.Walk方法会遍历目录自身，处理的时候要跳过。\n// @toZipFilePath 要压缩的文件所在目录 绝对路径 // @destDir 生成压缩文件的目录 // @fileName 生成的压缩文件名称 如xxx.zip func zipData(toZipFilePath string, destDir string, fileName string) error { if !isFileExist(destDir) { err := os.MkdirAll(destDir, os.ModePerm) return err } // 创建新的压缩文件 archive, err := os.Create(destDir + \u0026#34;/\u0026#34; + fileName) if err != nil { return err } zipWriter := zip.NewWriter(archive) defer zipWriter.Close() err = filepath.Walk(toZipFilePath, func(path string, info fs.FileInfo, err error) error { if err != nil { return err } fmt.Println(\u0026#34;walk\u0026#34;, path) // 跳过目录自身 if path == toZipFilePath { return nil } // 获取zip包中的相对路径 比如要压缩的目录是/tmp/tozip // 要压缩的文件是/tmp/tozip/tozip.file // 则得到的zipPath = tozip.file // 保证压缩后文件目录结构和之前是一样的 // 如果需要使用新的目录，可以根据需要自定义 zipPath := path[len(toZipFilePath)+1:] if info.IsDir() { zipPath += \u0026#34;/\u0026#34; } w, err := zipWriter.Create(zipPath) if err != nil { return err } if info.IsDir() { return nil } fr, err := os.Open(path) defer fr.Close() if err != nil { return err } _, err = io.Copy(w, fr) if err != nil { return err } return nil }) // 在这里读取新的zip文件可能会出问题 // 除非吧上面的defer zipWriter.Close()去掉，然后在这里先执行zipWriter.Close()在读取 return err } 处理压缩的时候在zipWriter close之前读取文件读到的数据可能会有问题，因为缓冲区的数据不一定写入完成。在这里被坑过一次，想要读取压缩后的文件重新上传到文件服务结果缓冲区没有flush导致读取的数据有问题。\n在内存中将zip文件解压修改后重新压缩 直接将zip reader中解压后的文件重新写入zip writer也是可以的，如果需要修改zip包中的某些数据并重新压缩可以直接在内存中完成，不用先解压至磁盘，再从磁盘读取数据压缩。需要注意的是获取压缩数据前zipWriter要先close保证缓冲区数据都已写入。\nfunc reZip(zipData []byte) ([]byte, error) { zipReader, err := zip.NewReader(bytes.NewReader(zipData), int64(len(zipData))) if err != nil { fmt.Println(err) return nil, err } buf := []byte{} writer := bytes.NewBuffer(buf) zipWriter := zip.NewWriter(writer) for _, f := range zipReader.File { w, err := zipWriter.Create(f.Name) if err != nil { fmt.Println(err) return nil, err } fr, err := f.Open() if err != nil { fmt.Println(err) return nil, err } _, err = io.Copy(w, fr) if err != nil { fmt.Println(err) return nil, err } } zipWriter.Close() return writer.Bytes(), nil } ","permalink":"https://www.mfun.ink/2023/09/26/go-zip/","summary":"\u003cp\u003eGo语言处理zip压缩还是比较方便的，可以直接使用Go标准库\u003ccode\u003earchive/zip\u003c/code\u003e。下面记录下具体使用方法，以及注意事项。\u003c/p\u003e","title":"Go处理zip压缩以及解压"},{"content":"最近使用搜索引擎被返回的某些网站搞的有些烦，于是就查了下该如何屏蔽某些搜索结果。 实际上搜索引擎本身是支持一些参数来达到目的的，比如使用Chrome时如果不想搜索结果里出现CSDN网站的内容可以在搜索框里加-csdn，效果如下：\n不加-csdn 添加-csdn bing也可以通过加-site:*.csdn.net实现同样的效果\n不加-site:*.csdn.net 加-site:*.csdn.net 虽然添加参数可以解决问题，但总不能每次搜索都额外输入一些参数，使用起来反而更加麻烦，有没有什么好方法不用增加额外成本呢，一番搜索终于找到了个浏览器插件 uBlacklist适用于Chrome或者Edge浏览器。安装后可以在搜索结果里将某些站点添加黑名单。\n也可以直接在插件选项里添加屏蔽配置 这个插件在使用chrome搜索引擎时可以完美工作，在使用bing时虽然也正常工作了，但是bing默认有个搜索推荐，如下： 在这里还是展示了想要屏蔽的网站，有没有办法把这个也屏蔽呢，找了下，就找到了另一个插件stylebot了chrome地址、 edge地址。这个插件允许添加css样式作用到页面。 在bing搜索结果页面查看页面元素可以看到开头的两条推荐的html标签class属性都有b_ans这个值 我们通过stylebot插件直接隐藏包含b_ans类属性值的标签，上面输入框里可以选择生效的具体页面，针对域名或者域名下自级目录都可以。 最终效果，开头的两条推荐被完美隐藏： ","permalink":"https://www.mfun.ink/2023/09/19/chrome-edge-add-black-list/","summary":"\u003cp\u003e最近使用搜索引擎被返回的某些网站搞的有些烦，于是就查了下该如何屏蔽某些搜索结果。\n实际上搜索引擎本身是支持一些参数来达到目的的，比如使用Chrome时如果不想搜索结果里出现CSDN网站的内容可以在搜索框里加\u003ccode\u003e-csdn\u003c/code\u003e，效果如下：\u003c/p\u003e","title":"好用的浏览器插件——搜索结果屏蔽指定网页"},{"content":"Joplin是一款开源的笔记系统，跨平台，支持同步，支持docker私有化部署。除了UI界面有点一言难进，作为笔记本身功能很全面。我是部署到了内网nas上，通过frp内网穿透实现的公网访问。部署过程如下：\n下载镜像并安装 这里使用的极空间nas，其他支持docker的nas也是类似的部署步骤，进入nas的docker服务，在仓库里搜索joplin，选择第一个官方的下载就是。 下载完成后可以在本地镜像里找到，点击安装，安装时需要修改的一些配置\n添加端口映射\n本地端口可以根据需要修改 添加环境变量\n首先是APP_BASE_URL这个是最外层用来访问服务的地址，一般是公网域名或者ip+端口，如果只在内网访问内网ip+端口就够了。 接着是存储相关的配置，Joplin支持SQLite和PostgreSQL作为存储，单人使用的话SQLite就已经满足需要了，如果想使用PostgreSQL需要在环境变量里添加如下配置,红框里的改为你自己的配置。 再接着是邮箱服务配置，邮箱不配的话也能使用，就是没有邮件发送功能 Joplin完整的环境变量配置可以在官方github仓库里找到 以上配置完后启动容器即可。\n添加访问配置\n如果直接用部署机器的ip+端口访问可以不用配置nginx代理，如果不是直接访问可以使用nginx反代或者类似nginx的应用配置反代，nginx配置如下，这里关键是设置Host header，就是把访问host透传下去，上面的APP_BASE_URL配置的值就是这个。\nserver { listen 8888; //端口 server_name domain; location / { proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://ip:port; //Jopin 地址 } } 部署完成后通过浏览器访问，初始邮箱admin@localhost，初始密码admin 登录后先更新密码，这里如果上面不配置邮件服务相关的环境变量的话是没办法修改邮箱的，因为修改邮箱会发送一封确认邮件，点击确认后才能修改成功。 客户端安装 客户端直接去官网下载客户端就好，下载完成后在配置里添加同步配置 以上就是整个安装配置过程\n内网穿透 如果是部署到内网，没有公网ip话，想要在公网访问可以搞个内网穿透。我这直接使用的frp加上一个云服务商的轻量云服务器，frp配置如下\n# 服务端 [common] bind_port = 7000 token = token log_file = ./frps.log log_max_days = 3 # 客户端配置 [common] server_addr = 公网ip server_port = 7000 token = token [joplin] type = tcp local_port = 22300 local_ip = joplin局域网ip remote_port = 8083 对应的nginx配置如下，这里nginx和frps部署在了同一个服务器上，所以直接代理到127.0.0.1，端口就是上面frpc配的remote_port，当然直接访问的话就不用nginx反代了，直接通过公网域名/ip+remote_port访问。\nserver { listen 8888; //端口 server_name domain; location / { proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://127.0.0.1:8083; } } ","permalink":"https://www.mfun.ink/2023/09/12/joplin-docker-deploy/","summary":"\u003cp\u003e\u003ca href=\"https://github.com/laurent22/joplin\"\u003eJoplin\u003c/a\u003e是一款开源的笔记系统，跨平台，支持同步，支持docker私有化部署。除了UI界面有点一言难进，作为笔记本身功能很全面。我是部署到了内网nas上，通过frp内网穿透实现的公网访问。部署过程如下：\u003c/p\u003e","title":"内网NAS使用docker部署Joplin笔记服务"},{"content":"最近碰到一个curl使用问题，现象是在终端里设置proxy环境变量然后curl没有生效，其他命令比如git clone、brew等等都是有效的，于是怀疑curl是不是有什么不为认知的特殊配置，想到这里就来了兴致，立马开始查起。最终发现是被自己遗忘的一个配置，属实大乌龙。\n下面是终端执行过程中的输出，无论是否设置proxy curl都使用了另一个代理配置。\n$ curl cip.cc curl: (7) Failed to connect to 127.0.0.1 port 51837 after 8 ms: Connection refused $ HTTP_PROXY=http://127.0.0.1:58591; export HTTPS_PROXY=http://127.0.0.1:58591; export ALL_PROXY=socks5://127.0.0.1:51838 $ curl cip.cc curl: (7) Failed to connect to 127.0.0.1 port 51837 after 8 ms: Connection refused $ unset HTTP_PROXY; unset HTTPS_PROXY; unset ALL_PROXY $ curl cip.cc curl: (7) Failed to connect to 127.0.0.1 port 51837 after 8 ms: Connection refused 一开始怀疑iterm2终端是不是有什么配置，于是换了Mac OS系统终端，发现还是一样的问题，排除终端问题。接着又怀疑是不是curl版本问题，使用brew安装了新版本的curl，问题依旧。再然后直接命令行里执行env命令，一股脑把全部环境变量都打了出来，并没有任何关于proxy的环境变量设置，有意思了，到底哪里出了问题呢？\n作为一个程序员从源码里找答案是基本技能，于是从git clone了curl的源码，开始从代码里找curl设置proxy相关逻辑，终于发现curl除了会从环境变量里读proxy设置外还读了一个.curlrc的配置文件\n/* return 0 on everything-is-fine, and non-zero otherwise */ int parseconfig(const char *filename, struct GlobalConfig *global) { FILE *file = NULL; bool usedarg = FALSE; int rc = 0; struct OperationConfig *operation = global-\u0026gt;last; char *pathalloc = NULL; if(!filename) { /* NULL means load .curlrc from homedir! */ char *curlrc = findfile(\u0026#34;.curlrc\u0026#34;, CURLRC_DOTSCORE); if(curlrc) { file = fopen(curlrc, FOPEN_READTEXT); if(!file) { free(curlrc); return 1; } filename = pathalloc = curlrc; } 虽然还没找到解析配置文件设置proxy相关的逻辑，但是可以先去home目录下看一下了，一看还真有个.curlrc的文件，5个月前创建的，打开一看只有一行配置socks5=127.0.0.1:51837。看到这里终于有了点印象，之前为了设置socks5 proxy就加了这么个配置，删掉重新执行curl终于正常了。\n","permalink":"https://www.mfun.ink/2023/08/20/curl-proxy-no-use/","summary":"\u003cp\u003e最近碰到一个curl使用问题，现象是在终端里设置proxy环境变量然后curl没有生效，其他命令比如git clone、brew等等都是有效的，于是怀疑curl是不是有什么不为认知的特殊配置，想到这里就来了兴致，立马开始查起。最终发现是被自己遗忘的一个配置，属实大乌龙。\u003c/p\u003e","title":"curl proxy设置无效问题排查"},{"content":"最近搞出来一个挺弱智的问题，记录一下，以示警戒。代码主要逻辑如下，使用 select和time.After()实现超时控制，doSomething()一定会返回结果。\nsign := make(chan struct{}) go func() { doSomething() sign \u0026lt;- struct{} close(sign) }() select { case \u0026lt;-time.After(timeout): fmt.Println(\u0026#34;timeout\u0026#34;) return case \u0026lt;-sign: fmt.Println(\u0026#34;succ\u0026#34;) return } 实际执行过程中，会发现goroutine数量在不断增长，很明显这段代码发生了协程泄漏。 这段代码新启goroutine的地方只有一处，就是这个go func，goroutine数量不断增长说明goroutine一直没有退出。 继续看，为什么协程没有退出呢，代码里唯一会产生阻塞的地方就是这个sign \u0026lt;- struct{}通过channel通知函数执行完了，正常无超时的情况下，select里能正常消费这个channel，协程能正常退出，但是一旦发生超时，select直接退出，sign channel就没有消费者了，由于是无缓冲channel，写入方就会被阻塞导致协程无法退出，造成协程泄漏。及其低级的一个错误，属于是对go基础掌握不牢了。 正确的实现方式，创建一个有缓冲channel就可以了\nsign := make(chan struct{}, 1) go func() { doSomething() sign \u0026lt;- struct{}{} close(sign) }() select { case \u0026lt;-time.After(timeout): fmt.Println(\u0026#34;timeout\u0026#34;) return case \u0026lt;-sign: fmt.Println(\u0026#34;succ\u0026#34;) return } 另外，也可以使用context实现超时控制\nsign := make(chan struct{}, 1) ctx, cancel := context.WithTimeout(context.Background(), time.Second) defer cancel() go func() { doSomething() sign \u0026lt;- struct{}{} close(sign) }() select { case \u0026lt;-ctx.Done(): fmt.Println(\u0026#34;timeout\u0026#34;) return case \u0026lt;-sign: fmt.Println(\u0026#34;done\u0026#34;) return } 需要明确的一点是，以上的超时控制并不会影响到已经启动的goroutine的执行，即便超时启动的goroutine还是会继续执行直到退出，这里的超时只是你可以不用阻塞在这苦苦等待已启动的这个goroutine执行完，你可以继续执行其他逻辑。如果超时后我想立即退出goroutine该怎么办呢，这里是做不到立即退出的，不过可以把ctx传到goroutine里，每执行一步就判断下ctx是否已经超时了，如果超时就退出，一定程度控制goroutine的执行。\nsign := make(chan struct{}, 1) ctx, cancel := context.WithTimeout(context.Background(), time.Second) defer cancel() go func(ctx context.Context) { defer close(sign) doSomething() if ctx.Err() != nil { fmt.Println(\u0026#34;goroutine exit\u0026#34;) return } fmt.Println(\u0026#34;other\u0026#34;) doSomeOtherThing() sign \u0026lt;- struct{}{} }(ctx) select { case \u0026lt;-ctx.Done(): fmt.Println(\u0026#34;timeout\u0026#34;) case \u0026lt;-sign: fmt.Println(\u0026#34;done\u0026#34;) } ","permalink":"https://www.mfun.ink/2023/08/19/goroutine-leak/","summary":"\u003cp\u003e最近搞出来一个挺弱智的问题，记录一下，以示警戒。代码主要逻辑如下，使用\nselect和time.After()实现超时控制，doSomething()一定会返回结果。\u003c/p\u003e","title":"无缓冲channel导致的goroutine泄露"},{"content":"最近在折腾nas，遇到一种情况需要访问子网，当前nas通过网线连的光猫，路由器连的光猫，pc笔记本电脑连的路由器。网络拓补图如下，现在想要nas中跑的docker服务访问到pc中的服务。 nas和pc放到一个局域网\n首先最简单的方法，把nas网线插到路由器上，让nas和pc处于同一个局域网下，然后直接通过ip访问pc中的服务，简单快速。但由于不可抗因素nas无法直接连到路由器上，所以这种方法pass掉。 光猫配置路由\n接下来继续找可以访问子网的方法，看到网上说可以在光猫里配置路由，唉不错，赶紧登录光猫结果普通用户没有权限配置，需要管理员才能配置。又在网上找联通光猫如何管理员登录，挨个试了个遍连管理员登录界面都没找到，遂放弃继续想其他办法。 路由器配置虚拟服务器\n既然光猫不可行那路由器可不可以呢，路由器下的子网没法直接访问但是路由器本身和nas是在一个局域网的。登录路由器发现一个虚拟服务器的配置，可以把外部ip+端口访问映射到内部服务ip+端口上。配上试试，完美运行。 ","permalink":"https://www.mfun.ink/2023/07/30/lan-access-subnet/","summary":"\u003cp\u003e最近在折腾nas，遇到一种情况需要访问子网，当前nas通过网线连的光猫，路由器连的光猫，pc笔记本电脑连的路由器。网络拓补图如下，现在想要nas中跑的docker服务访问到pc中的服务。\n\u003cimg loading=\"lazy\" src=\"/images/lan-access-subnet/net.png\"\u003e\u003c/p\u003e","title":"局域网下通过路由器虚拟服务访问子网"},{"content":"最近使用xorm更新db的时候碰到一个挺有意思的问题，db中字段类型是日期datetime，对应go model中的字段是time.Time类型，在分别使用model和map两种方式进行更新时，使用model的方式更新能得到正确结果，db中的日期能被更新成当地时间；使用map kv的方式进行更新时db中的字段被更新成了格林尼治标准时间。都是取的go time.Now为什么更新结果不一样呢？\n// demo type TimeTest struct { ID int64 `xorm:\u0026#34;not null pk autoincr INT(11) \u0026#39;id\u0026#39;\u0026#34;` UpdateTime time.Time `xorm:\u0026#34;update_time\u0026#34;` } func UpdateTime(o *xorm.Session) { o.Table(new(TimeTest)).Where(\u0026#34;id = ?\u0026#34;, 1).Update(\u0026amp;TimeTest{ UpdateTime: time.Now(), }) o.Table(new(TimeTest)).Where(\u0026#34;id = ?\u0026#34;, 1).Update(map[string]interface{}{ \u0026#34;update_time\u0026#34;: time.Now(), }) } 下文的源码分析基于xorm.io/xorm v1.0.5和github.com/go-sql-driver/mysql v1.5.0。\n通过LastSQL()函数获取执行的SQL语句和参数 xorm自身支持打印执行的sql语句和参数，咱们使用LastSQL()函数打印出两次update执行的sql语句。可以看出使用map时把time.Now转成了格林尼治标准时间。\n// model UPDATE `time_test` SET `update_time` = ? WHERE (id = ?) [2023-07-21 11:03:13 1] // map UPDATE `time_test` SET `update_time` = ? WHERE (id = ?) [2023-07-21 03:03:13.760772475 +0800 CST m=+21.239008382 1] Update方法的具体实现 为什么会得到这样的结果呢，接下就得看Update方法的具体实现了，这段代码还是挺明显的使用struct model或使用map会走到两个代码分支里。\n// xorm.io/xorm@v1.0.5/session_update.go@Update() // 167 行 var isMap = t.Kind() == reflect.Map var isStruct = t.Kind() == reflect.Struct if isStruct { if err := session.statement.SetRefBean(bean); err != nil { return 0, err } if len(session.statement.TableName()) \u0026lt;= 0 { return 0, ErrTableNotFound } if session.statement.ColumnStr() == \u0026#34;\u0026#34; { colNames, args, err = session.statement.BuildUpdates(v, false, false, false, false, true) } else { colNames, args, err = session.genUpdateColumns(bean) } // ...\t可以看到map的逻辑比较简单，把参数拼到一个interface的数组中就继续向下执行了 我们继续看下更新参数是model时怎么处理的SQL参数。 因为没有设置db column，这里继续执行的是session.statement.BuildUpdates，接下来看BuildUpdates函数，处理Time类型的字段代码如下，由于代码太长这里就只贴重点逻辑的代码。 // xorm.io/xorm@v1.0.5/internal/statements/update.go@BuildUpdates() // 194行 case reflect.Struct: if fieldType.ConvertibleTo(schemas.TimeType) { t := fieldValue.Convert(schemas.TimeType).Interface().(time.Time) if !requiredField \u0026amp;\u0026amp; (t.IsZero() || !fieldValue.IsValid()) { continue } val = dialects.FormatColumnTime(statement.dialect, statement.defaultTimeZone, col, t) // ...\t通过FormatColumnTime函数对时间类型的数据进行了格式化，这里defaultTimeZone实际取的是engine.DatabaseTZ，xorm engine 在初始化的时候，非sqlite3类型的数据库DatabaseTZ会赋值成Time.Local，col.TimeZone是在xorm初始化的时候通过连接串的url参数设置的例如：root:root@tcp(127.0.0.1:3306)/test?charset=utf8\u0026amp;parseTime=true\u0026amp;loc=Local，本文demo里初始化的时候没有设置，所以默认使用的engine.DatabaseTZ也就是time.Local使用的服务器所在时区。\n// xorm.io/xorm@v1.0.5/dialects/time.go@FormatColumnTime() // 37行 func FormatColumnTime(dialect Dialect, defaultTimeZone *time.Location, col *schemas.Column, t time.Time) (v interface{}) { if t.IsZero() { if col.Nullable { return nil } return \u0026#34;\u0026#34; } if col.TimeZone != nil { return FormatTime(dialect, col.SQLType.Name, t.In(col.TimeZone)) } return FormatTime(dialect, col.SQLType.Name, t.In(defaultTimeZone)) } 以上可以得到使用model进行更新时，日期时间类型的参数会被转成服务器所在时区的时间。\nSQL driver执行更新前对参数的处理 下面继续看map中日期时如何处理的，Update函数中拼接完参数args后，最终执行的是session.exec()，继续往下最终执行的各自SQL类型对应的具体实现，这里用的是MySQL下面看MySQL最终执行的具体实现github.com/go-sql-driver/mysql@v1.5.0/connection.go，可以找到是这个函数interpolateParams处理的SQL参数，对时间的处理逻辑如下：\n// github.com/go-sql-driver/mysql@v1.5.0/connection.go@interpolateParams() // 229行 case time.Time: if v.IsZero() { buf = append(buf, \u0026#34;\u0026#39;0000-00-00\u0026#39;\u0026#34;...) } else { v := v.In(mc.cfg.Loc) v = v.Add(time.Nanosecond * 500) // To round under microsecond // ...\t这里取了TimeZone取了mc.cfg.Loc，xorm engine进行初始化的时候会创建db 连接，就是下面代码里的Open方法。\n// xorm.io/xorm@v1.0.5/engine.go@NewEngine() // 53行 func NewEngine(driverName string, dataSourceName string) (*Engine, error) { dialect, err := dialects.OpenDialect(driverName, dataSourceName) if err != nil { return nil, err } db, err := core.Open(driverName, dataSourceName) if err != nil { return nil, err } 点到Open方法内，继续往下可以找到MySQLDriver创建连接的实现，可以看到这里进行了配置的初始化，cfg是通过解析dsn连接串里参数初始化的。继续点进ParseDSN函数看到cfg默认初始化函数NewConfig将Loc赋值成了格林尼治标准时间time.UTC，初始化xorm engine的时候db连接串没有设置Loc导致这里MySQL driver把时区设置成了UTC。\n// github.com/go-sql-driver/mysql@v1.5.0/driver.go@OpenConnector() // 98行 // OpenConnector implements driver.DriverContext. func (d MySQLDriver) OpenConnector(dsn string) (driver.Connector, error) { cfg, err := ParseDSN(dsn) if err != nil { return nil, err } return \u0026amp;connector{ cfg: cfg, }, nil } // github.com/go-sql-driver/mysql@v1.5.0/dsn.go@ParseDSN() // 290行 // ParseDSN parses the DSN string to a Config func ParseDSN(dsn string) (cfg *Config, err error) { // New config with some default values cfg = NewConfig() 。。。 // github.com/go-sql-driver/mysql@v1.5.0/dsn.go@ParseDSN() // 64行 // NewConfig creates a new Config and sets default values. func NewConfig() *Config { return \u0026amp;Config{ Collation: defaultCollation, Loc: time.UTC, MaxAllowedPacket: defaultMaxAllowedPacket, AllowNativePasswords: true, CheckConnLiveness: true, } }\t结论 找到这里也就找到答案了，为什么通过map更新的日期时间是UTC时间，通过model struct更新的时间是服务器本地时间，因为map里的更新参数是最终SQL Driver进行解析格式化的，model struct是xorm先进行了参数格式化，两者初始化的默认时区不一样导致日期时间参数格式化的结果不一样。 最后为了避免这种问题，最好是在初始化连接的时候在dsn里显示设置Loc，这样xorm和SQL driver就都是用的显示设置的这个了。\n","permalink":"https://www.mfun.ink/2023/07/29/xorm-update-time/","summary":"\u003cp\u003e最近使用xorm更新db的时候碰到一个挺有意思的问题，db中字段类型是日期datetime，对应go model中的字段是time.Time类型，在分别使用model和map两种方式进行更新时，使用model的方式更新能得到正确结果，db中的日期能被更新成当地时间；使用map kv的方式进行更新时db中的字段被更新成了格林尼治标准时间。都是取的go time.Now为什么更新结果不一样呢？\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Go\" data-lang=\"Go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// demo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTimeTest\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eID\u003c/span\u003e         \u003cspan style=\"color:#66d9ef\"\u003eint64\u003c/span\u003e     \u003cspan style=\"color:#e6db74\"\u003e`xorm:\u0026#34;not null pk autoincr INT(11) \u0026#39;id\u0026#39;\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eUpdateTime\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTime\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`xorm:\u0026#34;update_time\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUpdateTime\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003exorm\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSession\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTable\u003c/span\u003e(new(\u003cspan style=\"color:#a6e22e\"\u003eTimeTest\u003c/span\u003e)).\u003cspan style=\"color:#a6e22e\"\u003eWhere\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;id = ?\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eUpdate\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eTimeTest\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eUpdateTime\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eTable\u003c/span\u003e(new(\u003cspan style=\"color:#a6e22e\"\u003eTimeTest\u003c/span\u003e)).\u003cspan style=\"color:#a6e22e\"\u003eWhere\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;id = ?\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003eUpdate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;update_time\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNow\u003c/span\u003e(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"xorm使用map kv更新日期时间类型字段的时区问题"},{"content":"分布式锁主要解决分布式系统中并发更新安全问题，单机服务的话很简单直接使用语言自身的锁就可以了，现在随便一个服务基本上都是多台机器部署的，只是语言自身的锁就不满足需求了，因为它只能锁本台机器，管不了其他机器，这时候就需要分布式锁了，下面介绍下基于redis分布式锁的实现。\n以下是使用 Lua 脚本实现的 Redis 分布式锁示例，使用lua脚本是为了保证多个指令执行的原子性。\n加锁脚本 if redis.call(\u0026#39;setnx\u0026#39;, KEYS[1], ARGV[1]) == 1 then return redis.call(\u0026#39;expire\u0026#39;, KEYS[1], ARGV[2]) else return 0 end 这个脚本会尝试给指定的key加锁。如果加锁成功，返回1；如果key已经存在，加锁失败，返回0。PX指的是毫秒级别的key过期时间，换成EX则是秒级时间，可以根据需要使用。这里为什么要加过期时间，可不可以只使用 SETNX？为了防止释放锁脚本执行失败，加上过期时间可以当锁释放失败的时候，等锁自动过期不影响下次获取锁，防止死锁。过期时间长短根据锁期间的业务逻辑执行时间来确定，比这个时间稍长。 上面lua加锁脚本用起来还是比较繁琐的，实际上redis 2.6.12版本支持set命令设置nx、ex参数，我们可以直接用set命令完成加锁set [key] [val] px [expire_val] nx，更加简洁方便。\n释放锁脚本 if redis.call(\u0026#34;get\u0026#34;, KEYS[1]) == ARGV[1] then return redis.call(\u0026#34;del\u0026#34;, KEYS[1]) else return 0 end 这个脚本会尝试释放指定的key对应的锁。如果key不存在或者key对应的锁值与传入的锁值不匹配，释放锁失败，返回0；否则，释放锁成功，返回1。这里值不匹配说明锁已经被重新获取了。\n使用这两个脚本时，需要使用 Redis 的 EVAL 命令（或类似命令，如 evalsha）在 Redis 服务器上执行。另外，尽管使用 Lua 脚本可以提高分布式锁的可靠性，但在某些情况下（例如 Redis 主从切换）仍可能导致锁出现问题。在分布式系统中，除非必须，否则尽量避免使用分布式锁。\ngo 代码使用示例 package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/go-redis/redis/v8\u0026#34; \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; ) const LockScript = `if redis.call(\u0026#39;setnx\u0026#39;, KEYS[1], ARGV[1]) == 1 then return redis.call(\u0026#39;expire\u0026#39;, KEYS[1], ARGV[2]) else return 0 end` const unlockScript = `if redis.call(\u0026#34;get\u0026#34;, KEYS[1]) == ARGV[1] then return redis.call(\u0026#34;del\u0026#34;, KEYS[1]) else return 0 end` func main() { // 初始化 Redis 客户端 redisClient := redis.NewClient(\u0026amp;redis.Options{ Addr: \u0026#34;localhost:6379\u0026#34;, }) // 锁的 Key 和 Value lockKey := \u0026#34;my_lock\u0026#34; lockValue := \u0026#34;unique_value\u0026#34; lockExpire := 5000 // 锁的过期时间，单位：毫秒 var ctx = context.Background() defer func() { // 尝试释放锁 if releaseLock(ctx, redisClient, lockKey, lockValue) { fmt.Println(\u0026#34;释放锁成功\u0026#34;) return } fmt.Println(\u0026#34;释放锁失败，可能已经过期或者被其他客户端获取\u0026#34;) }() // 尝试加锁 if acquireLock(ctx, redisClient, lockKey, lockValue, time.Duration(lockExpire)) { fmt.Println(\u0026#34;加锁成功，开始执行业务逻辑\u0026#34;) // 模拟业务逻辑耗时 time.Sleep(3 * time.Second) fmt.Println(\u0026#34;业务逻辑处理完成，释放锁\u0026#34;) return } fmt.Println(\u0026#34;获取锁失败\u0026#34;) } // acquireLockByScript 使用lua 脚本获取锁 func acquireLockByScript(ctx context.Context, redisCli *redis.Client, lockKey, lockValue string, lockExpire int) bool { res, err := redisCli.Eval(ctx, LockScript, []string{lockKey}, lockValue, lockExpire).Int64() if err != nil { fmt.Println(\u0026#34;ac err\u0026#34;, err) return false } return res == 1 } // acquireLock 使用set ex nx 获取锁 func acquireLock(ctx context.Context, redisCli *redis.Client, lockKey, lockValue string, lockExpire time.Duration) bool { ac, err := redisCli.SetNX(ctx, lockKey, lockValue, lockExpire*time.Millisecond).Result() if err != nil { fmt.Println(\u0026#34;ac err\u0026#34;, err) return false } return ac } // releaseLock 尝试释放分布式锁 func releaseLock(ctx context.Context, redisCli *redis.Client, lockKey, lockValue string) bool { result, err := redisCli.Eval(ctx, unlockScript, []string{lockKey}, lockValue).Int64() if err != nil { log.Fatalf(\u0026#34;释放锁失败：%v\u0026#34;, err) } return result == 1 } ","permalink":"https://www.mfun.ink/2023/06/03/redis-lua-lock/","summary":"\u003cp\u003e分布式锁主要解决分布式系统中并发更新安全问题，单机服务的话很简单直接使用语言自身的锁就可以了，现在随便一个服务基本上都是多台机器部署的，只是语言自身的锁就不满足需求了，因为它只能锁本台机器，管不了其他机器，这时候就需要分布式锁了，下面介绍下基于redis分布式锁的实现。\u003c/p\u003e","title":"redis分布式锁"},{"content":"hexo版本升级还是很简单的，先切到hexo目录，使用npm i hexo-cli -g升级全局hexo，接下来再使用npm-check、npm-upgrade,npm-update升级相关依赖。\n正式升级前使用hexo version查看下当前版本：\n$ hexo version INFO Validating config INFO ================================== ███╗ ██╗███████╗██╗ ██╗████████╗ ████╗ ██║██╔════╝╚██╗██╔╝╚══██╔══╝ ██╔██╗ ██║█████╗ ╚███╔╝ ██║ ██║╚██╗██║██╔══╝ ██╔██╗ ██║ ██║ ╚████║███████╗██╔╝ ██╗ ██║ ╚═╝ ╚═══╝╚══════╝╚═╝ ╚═╝ ╚═╝ ======================================== NexT version 8.13.1 Documentation: https://theme-next.js.org ======================================== hexo: 5.4.2 hexo-cli: 4.3.0 os: darwin 22.1.0 13.0.1 node: 12.14.1 v8: 7.7.299.13-node.16 uv: 1.33.1 zlib: 1.2.11 brotli: 1.0.7 ares: 1.15.0 modules: 72 nghttp2: 1.40.0 napi: 5 llhttp: 2.0.1 http_parser: 2.8.0 openssl: 1.1.1d cldr: 35.1 icu: 64.2 tz: 2019c unicode: 12.1 使用npm i hexo-cli -g升级全局hexo\n$ npm i hexo-cli -g npm WARN EBADENGINE Unsupported engine { npm WARN EBADENGINE package: \u0026#39;hexo-cli@4.3.1\u0026#39;, npm WARN EBADENGINE required: { node: \u0026#39;\u0026gt;=14\u0026#39; }, npm WARN EBADENGINE current: { node: \u0026#39;v12.14.1\u0026#39;, npm: \u0026#39;8.19.2\u0026#39; } npm WARN EBADENGINE } npm WARN EBADENGINE Unsupported engine { npm WARN EBADENGINE package: \u0026#39;abbrev@2.0.0\u0026#39;, npm WARN EBADENGINE required: { node: \u0026#39;^14.17.0 || ^16.13.0 || \u0026gt;=18.0.0\u0026#39; }, npm WARN EBADENGINE current: { node: \u0026#39;v12.14.1\u0026#39;, npm: \u0026#39;8.19.2\u0026#39; } npm WARN EBADENGINE } ... 通过输出内容发现node版本过低导致升级失败，所以先升级node版本，需要的最低node版本是v14.17.0，直接nvm install v14.17.0升级node，升级完成后再次执行npm i hexo-cli -g。再次执行hexo verson就可以看到升级到6.3.0版本了。\n$ hexo version INFO Validating config hexo: 6.3.0 hexo-cli: 4.3.1 os: darwin 22.1.0 13.0.1 node: 16.20.0 v8: 9.4.146.26-node.26 uv: 1.43.0 zlib: 1.2.11 brotli: 1.0.9 ares: 1.19.0 modules: 93 nghttp2: 1.47.0 napi: 8 llhttp: 6.0.10 openssl: 1.1.1t+quic cldr: 41.0 icu: 71.1 tz: 2022f unicode: 14.0 ngtcp2: 0.8.1 nghttp3: 0.7.0 接下来依次执行以下命令升级依赖包：\n# 安装npm-check 如果之前安装过可以跳过 $ npm install -g npm-check # 检查需要升级的依赖 $ npm-check # 安装npm-upgrade 如果之前安装过可以跳过 $ npm install -g npm-upgrade # 更新package.json $ npm-upgrade # 更新依赖 $ npm update --save 升级完成后，可以使用hexo clean、hexo g、hexo s看下效果，如果一切正常那么恭喜升级成功了。非常不幸楼主这里执行hexo clean直接报下面这个错误:\n$ hexo clean INFO Validating config ERROR Script load failed: node_modules/hexo-theme-next/scripts/helpers/engine.js Error: Cannot find module \u0026#39;css\u0026#39; Require stack: - /Users/vector/dev/book/hexotest/node_modules/hexo-theme-next/scripts/events/lib/utils.js - /Users/vector/dev/book/hexotest/node_modules/hexo-theme-next/scripts/helpers/engine.js at Function.Module._resolveFilename (node:internal/modules/cjs/loader:1026:15) at Function.Module._load (node:internal/modules/cjs/loader:871:27) at Module.require (node:internal/modules/cjs/loader:1098:19) at require (node:internal/modules/cjs/helpers:108:18) at Object.\u0026lt;anonymous\u0026gt; (/Users/vector/dev/book/hexotest/node_modules/hexo-theme-next/scripts/events/lib/utils.js:5:13) ... 通过报错信息得知，找不到cssmodule，直接尝试安装npm install css，安装成功后再次执行hexo clean成功了，真棒，还好不是其他稀奇古怪的问题，不然就太为难楼主这个node渣渣了。\n","permalink":"https://www.mfun.ink/2023/05/21/hexo-upgrade/","summary":"\u003cp\u003ehexo版本升级还是很简单的，先切到hexo目录，使用\u003ccode\u003enpm i hexo-cli -g\u003c/code\u003e升级全局hexo，接下来再使用\u003ccode\u003enpm-check\u003c/code\u003e、\u003ccode\u003enpm-upgrade\u003c/code\u003e,\u003ccode\u003enpm-update\u003c/code\u003e升级相关依赖。\u003c/p\u003e","title":"hexo版本升级"},{"content":"上一篇文章记录了trojan的安装过程，但是使用过程发现443端口被trojan服务占用后，就不好部署一些自己的服务网站了。比如我想实现一个在线json解析的页面，并给这个页面申请个子域名json.mfun.ink，由于443端口已经被占用，我们无法直接使用nginx给json.mfun.ink在443端口上配置ssl。那该如何解决呢？我们可以通过nginx的流(stream)代理转发443端口的流量。把trojan的流量转发给trojan服务，把其他https域名的流量转发相应的https服务。\n首先，443端口要给nginx用，我们需要修改trojan-go服务的端口，修改配置文件/etc/trojan/conf/server.json的local_port字段随便改成一个未被使用的端口，比如这里改成8089。这里的配置文件路径以及下文中的都是上篇文章trojan-go 安装配置中介绍的一键脚本默认安装的路径，如果不是使用的这个脚本可以根据自己安装部署时的配置文件路径进行更改。\n接下来修改nginx配置文件/etc/nginx/conf/nginx.conf，在配置文件下方添加stream流转发配置：\nstream { map $ssl_preread_server_name $name { json.xxx.com json; default trojan; } upstream json { server json.xxx.com:8088; } upstream trojan { server xxx.com:8089; } server { listen 443; proxy_connect_timeout 5s; proxy_timeout 20s; proxy_pass $name; ssl_preread on; } } 这样就把来自 https://json.xxx.com 的流量转发到了 json.xxx.com:8088 上，把其他域名的443端口的流量转发给了trojan服务。这个配置就是指trojan在8089端口启动了服务，那我们的 json.xxx.com 在8088端口上也要开启服务，这是标准的http web页面直接在nginx http下添加配置即可。\nserver { listen 8808 ssl; server_name json.xxx.com; ssl_certificate /data/json.xxx.com/fullchain.cer; ssl_certificate_key /data/json.xxx.com/private.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; location / { root /usr/www/json; index index.html index.htm; } } 以上修改完trojan和nginx的配置后都可以使用脚本/etc/trojan_mgr.sh来重启相应服务\n./etc/trojan_mgr.sh ==================================================================== 检测到您当前安装的是Nginx + Trojan-go + Tls ==================================================================== 1. 停止trojan-go 2. 重启trojan-go ==================================================================== 3. 修改trojan-go密码 4. 停止nginx ==================================================================== 5. 重启nginx 6.启用websocket协议 ==================================================================== 7.禁用websocket协议 8. 查询证书有效期剩余天数 ==================================================================== 9. 更新证书有效期 10. 启用多路复用 ==================================================================== 11. 禁用多路复用 12. 修改trojan端口 ==================================================================== 0. 啥也不做，退出 ==================================================================== 请输入数字：2 如果是使用上一篇文章中的一键安装脚本部署安装的nginx会因为缺少了stream、stream_ssl_preread_module两个module启动失败，这时候我们需要重新编译安装nginx，加上这两个module。\nwget -nc --no-check-certificate http://nginx.org/download/nginx-1.18.0.tar.gz -P /usr/local/src wget -nc --no-check-certificate https://www.openssl.org/source/openssl-1.1.1g.tar.gz -P /usr/local/src cd /usr/local/src tar -zxvf nginx-1.18.0.tar.gz tar -zxvf openssl-1.1.1g.tar.gz cd nginx-1.18.0 ./configure --prefix=/etc/nginx \\ --with-http_ssl_module \\ --with-http_gzip_static_module \\ --with-http_stub_status_module \\ --with-pcre \\ --with-http_realip_module \\ --with-http_flv_module \\ --with-http_mp4_module \\ --with-http_secure_link_module \\ --with-http_v2_module \\ --with-cc-opt=\u0026#39;-O3\u0026#39; \\ --with-ld-opt=\u0026#34;-ljemalloc\u0026#34; \\ --with-openssl=../openssl-1.1.1g \\ --with-stream \\ --with-stream_ssl_preread_module make \u0026amp;\u0026amp; make install 安装完成后重启nginx就可以了。\n通过这种方式我们可以配置多个https子域名对应不同的https服务，而且都统一走443端口，也可以开启更多的trojan服务进程对应不同的域名，最为重要的是因为统一走的443端口，不会影响trojan的https伪装。\n","permalink":"https://www.mfun.ink/2023/05/20/nginx-stream-to-trojan/","summary":"\u003cp\u003e上一篇\u003ca href=\"https://www.mfun.ink/2023/03/04/trojan-install/\"\u003e文章\u003c/a\u003e记录了trojan的安装过程，但是使用过程发现443端口被trojan服务占用后，就不好部署一些自己的服务网站了。比如我想实现一个在线json解析的页面，并给这个页面申请个子域名json.mfun.ink，由于443端口已经被占用，我们无法直接使用nginx给json.mfun.ink在443端口上配置ssl。那该如何解决呢？我们可以通过nginx的流(stream)代理转发443端口的流量。把trojan的流量转发给trojan服务，把其他https域名的流量转发相应的https服务。\u003c/p\u003e","title":"通过nginx流代理转发流量到trojan服务"},{"content":"本文记录一下\u0026quot;科学上网\u0026quot;工具trojan的安装和配置，至于为什么是trojan，说出来也是够坎坷。楼主之前搭的梯子使用过ss、ssr、v2ray，后来不想折腾了买了Lantern，不过最近Lantern用起来也各种不稳定，终于到了无法忍受的地步，刚好手里有国外的服务器就想着的自己再搭一个。一开始搭的ssr结果不到一周ip就被封了，看来伟大的gfw已经能够精准识别ssr流量了，无奈只好寻求其他的方法。\n网上搜了一下发现了trojan，看介绍是把用户流量伪装成https流量绕过gfw的检测，由于https流量众多gfw不可能封锁所有https流量，毕竟如果真封锁那国内就真成局域网了，再者https流量是经过ssl加密的，保证了内容不被窃取，所以可以很好的混过gfw的检测。看着不错直接搞起，使用3个多月了现在依然坚挺。废话不多说下面进入正文安装配置流程。楼主go语言接触的比较多就选择了go版本trojan。\n首先准备工作，一个国外的服务器，一个有ssl证书的域名。ssl证书用免费申请的就行，比如freessl。 登录机器命令行，切到root用户，执行以下命令，有现成的脚本就很舒服，感谢大佬的贡献。\nbash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/kenzok8/Trojan/master/trojan-go_install.sh)\u0026#34; 输出如下，这里楼主选的nginx，不为啥就是对nginx更熟悉些\n=================================================== Trojan-go二合一脚本 =================================================== 如果已经安装了下列脚本之一，想要安装其他的，不需要单独执行卸载，直接选择想要安装脚本对应的数字即可…… 因为安装的同时会执行卸载，除非想卸载干净回到初始状态,可以执行3…… =================================================== 1. 安装trojan-go + nginx +tls =================================================== 2. 安装trojan-go + caddy +tls =================================================== 3. 卸载全部，系统回到初始状态 =================================================== 4. 安装BBR加速 =================================================== 0. 啥也不做，退出 请输入数字：1 确定后就是相关依赖安装流程了，下载完成后输入你的域名（my@example.com 替换为你域名）\n[信息] trojan-go下载 完成 Archive: /etc/trojan/bin/trojan-go-linux-amd64.zip inflating: /etc/trojan/bin/trojan-go inflating: /etc/trojan/bin/geoip.dat inflating: /etc/trojan/bin/geosite.dat inflating: /etc/trojan/bin/example/client.json inflating: /etc/trojan/bin/example/server.json inflating: /etc/trojan/bin/example/trojan-go.service [信息] trojan-go解压 完成 [信息] 80 端口未被占用 [信息] 443 端口未被占用 请输入您的域名(如果用Cloudflare解析域名，请点击小云彩使其变灰):my@example.com 输入确定后，签发过程可能会遇到下面的问题，按照提示acme需要更新下邮件地址，可以执行curl https://get.acme.sh | sh -s email=xxx@xx.com\n[Sat Mar 4 10:14:35 PM CST 2023] No EAB credentials found for ZeroSSL, let\u0026#39;s get one [Sat Mar 4 10:14:35 PM CST 2023] acme.sh is using ZeroSSL as default CA now. [Sat Mar 4 10:14:35 PM CST 2023] Please update your account with an email address first. [Sat Mar 4 10:14:35 PM CST 2023] acme.sh --register-account -m my@example.com [Sat Mar 4 10:14:35 PM CST 2023] See: https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA [Sat Mar 4 10:14:35 PM CST 2023] Please add \u0026#39;--debug\u0026#39; or \u0026#39;--log\u0026#39; to check more details. [Sat Mar 4 10:14:35 PM CST 2023] See: https://github.com/acmesh-official/acme.sh/wiki/How-to-debug-acme.sh [错误] TLS 证书生成失败 接下来再次执行最开始的shell命令就可以了，证书配置成功后提示配置伪装网站，这个是保证正常访问你的域名是能够正常返回页面，假如没有配置伪装网站，gfw识别到你的域名有异常流量，然后进行探测你没有任何返回，那么很明显你这个域名绝壁有问题，啪唧 给你封了。如果不想用下面列出的也可用自己的，比如自己blog站点啥的，这就可以一个域名多用了，明面上是正儿八经的博客网站，背地干着流量转发的活。\n[信息]证书配置成功 [注意]伪装网站未下载或下载失败,请选择下面的任意一个进行下载: [信息]1. https://templated.co/intensify [信息]2. https://templated.co/binary [信息]3. https://templated.co/retrospect [信息]4. https://templated.co/spatial [信息]5. https://templated.co/monochromed [信息]6. https://templated.co/transit [信息]7. https://templated.co/interphase [信息]8. https://templated.co/ion [信息]9. https://templated.co/solarize [信息]10. https://templated.co/phaseshift [信息]11. https://templated.co/horizons [信息]12. https://templated.co/grassygrass [信息]13. https://templated.co/breadth [信息]14. https://templated.co/undeviating [信息]15. https://templated.co/breadth [注意]请输入你要下载的网站的数字:15 再往下, 输入你的连接校验密码，再下面的是否启用websocket协议，websocket协议主要是用来开启cdn的，开启cdn后gfw探测的只会是cdn的ip，相当于再你自己服务外面挡了一层cdn，你自己的ip不会暴漏在外不会被探测到，自然就不会被封了，楼主这里没有cdn就没选。\n[信息]请输入您的Trojan-go密码:xxx [信息]是否启用websocket协议?注意：开启这个选项不会改善你的链路速度（甚至有可能下降） [信息]如果启用了websocket协议,您就可以开启CDN了，如果用cloudflare解析域名的，搭建完成后可以点亮小云彩了。 [信息]是否开启（Y/n）？（默认：n）n 再继续就是下载编译安装nginx的流程了，nginx正常安装完成后就是安装成功的提示了\n[信息] 修改密码、混淆密码、启用/禁用websocket、查询证书相关信息的管理脚本下载 完成 =========================Trojan-go+tls 安装成功============================== ========================= Trojan-go 配置信息 ============================= 地址： my@example.com 端口： 443 密码： xxxx websocket状态： 关闭 websocket路径： websocket多重TLS： 关闭 混淆密码： ========================= 客户端配置文件 =============================== 其他一些可以有的配置，比如把伪装网站配置成自己的blog，trojan默认伪装网站目录是 /usr/wwwroot，可以把自己的静态blog放到这个目录\nubuntu:/usr/wwwroot# ls 2020 about categories images js tags 2022 archives css index.html manifest.json page 然后修改nginx配置 /etc/nginx/conf/nginx.conf 把location root配置成/usr/wwwroot\nserver { listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { root /usr/wwwroot; index index.html index.htm; } 配置完成后重启nginx\nubuntu# service nginx restart 上面通过acme创建的免费证书有效期只有90天，这里创建一个shell脚本刷新证书，通过crontab 任务定期检查更新。 创建refresh_ssl.sh文件添加如下内容，检查证书剩余有效期如果少于5天的话就刷新证书，执行chmod +x refresh_ssl.sh，添加可执行权限。\n#!/bin/bash DOMAIN_RST=100 domain=\u0026#34;example.com\u0026#34; refresh_ssl(){ end_time=$(echo | openssl s_client -servername $domain -connect $domain:443 2\u0026gt;/dev/null | openssl x509 -in /data/$domain/fullchain.cer -noout -dates |grep \u0026#39;After\u0026#39;| awk -F \u0026#39;=\u0026#39; \u0026#39;{print $2}\u0026#39;| awk -F \u0026#39; +\u0026#39; \u0026#39;{print $1,$2,$4 }\u0026#39; ) end_times=$(date +%s -d \u0026#34;$end_time\u0026#34;) now_time=$(date +%s -d \u0026#34;$(date | awk -F \u0026#39; +\u0026#39; \u0026#39;{print $2,$3,$6}\u0026#39;)\u0026#34;) DOMAIN_RST=$(($((end_times-now_time))/(60*60*24))) echo $DOMAIN_RST if [ $DOMAIN_RST -lt 5 ]; then /root/.acme.sh/acme.sh --renew --domain $domain systemctl restart trojan.service systemctl restart nginx fi } refresh_ssl 执行sudo crontab -e 添加定时任务，每隔5天执行一下脚本\n0 0 */5 * * /path/refresh_ssl.sh \u0026gt; /dev/null 以上就是server端trojan的配置流程了，最后就是客户端下载了，Trojan-Qt5有mac和windows下客户端，安卓shadowsocksr-v2ray-trojan-android找不到trojan的配置入口，可以直接通过扫码配置，上面mac、pc下Trojan-Qt5都支持通过二维码分享。\n","permalink":"https://www.mfun.ink/2023/03/04/trojan-install/","summary":"\u003cp\u003e本文记录一下\u0026quot;科学上网\u0026quot;工具trojan的安装和配置，至于为什么是trojan，说出来也是够坎坷。楼主之前搭的梯子使用过ss、ssr、v2ray，后来不想折腾了买了Lantern，不过最近Lantern用起来也各种不稳定，终于到了无法忍受的地步，刚好手里有国外的服务器就想着的自己再搭一个。一开始搭的ssr结果不到一周ip就被封了，看来伟大的gfw已经能够精准识别ssr流量了，无奈只好寻求其他的方法。\u003c/p\u003e","title":"trojan-go 安装配置"},{"content":"安装 vue的安装就直接参考官方文档，描述的已经很详细了。\n项目创建 直接使用vue create + 项目名创建项目，默认有三种配置可选，vue2、vue3各有一个默认创建选项，也可以选第三种自定义项目创建要引入的features。\nvector@vectordeMBP  ~/dev/vue  vue create demo Vue CLI v4.5.4 ┌─────────────────────────────────────────┐ │ │ │ New version available 4.5.4 → 5.0.8 │ │ Run npm i -g @vue/cli to update! │ │ │ └─────────────────────────────────────────┘ ? Please pick a preset: Default ([Vue 2] babel, eslint) Default (Vue 3 Preview) ([Vue 3] babel, eslint) ❯ Manually select features 这里选择自定义后，会有以下选项可选，使用⬆️⬇️方向键上下移动，使用空格键选中或者取消选中，选完之后，点击回车键继续。\n? Please pick a preset: Manually select features ? Check the features needed for your project: ◉ Choose Vue version ◉ Babel ◯ TypeScript ◯ Progressive Web App (PWA) Support ◉ Router ◉ Vuex ◉ CSS Pre-processors ❯◉ Linter / Formatter ◯ Unit Testing ◯ E2E Testing 选择vue版本\n? Choose a version of Vue.js that you want to start the project with 2.x ❯ 3.x (Preview) 路由模式选择，是否使用历史路由模式\n? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) css预处理器选择\n? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys) ❯ Sass/SCSS (with dart-sass) Sass/SCSS (with node-sass) Less Stylus 代码检测工具模式选择\n? Pick a linter / formatter config: (Use arrow keys) ❯ ESLint with error prevention only ESLint + Airbnb config ESLint + Standard config ESLint + Prettier 代码检测时机\n? Pick additional lint features: (Press \u0026lt;space\u0026gt; to select, \u0026lt;a\u0026gt; to toggle all, \u0026lt;i\u0026gt; to invert selection) ❯◉ Lint on save // 保存时检测 ◯ Lint and fix on commit // fix commit 时检测 配置文件存放\n? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys) ❯ In dedicated config files // 各插件单独文件配置 In package.json // 放到 package.json 是否保存本次配置，方便之后创建项目简化步骤\nSave this as a preset for future projects? (y/N) 目录结构 ├── README.md ├── babel.config.js // babel 配置文件 ├── node_modules // node 依赖包下载目录 ├── package.json // 依赖目录，项目buid，启动指令配置 ├── public // 公共资源 ├── src // 主要代码目录 │ ├── App.vue // 项目入口文件 │ ├── assets // 静态资源 │ ├── components //组件目录 │ ├── main.js // 入口js，全局变量、js、插件引入 │ ├── router // 前端路由 │ ├── store // 应用数据 │ └── views // 页面目录 └── yarn.lock // yarn包管理自动生成文件，如果使用npm包管理会生成相应的npm包管理文件 项目启动 这里使用的yarn，使用npm的可以执行npm run serve，正常启动后就可以访问http://localhost:8080/查看页面。\nvector@vectordeMBP  ~/dev/vue/demo   master  yarn serve yarn run v1.22.19 $ vue-cli-service serve INFO Starting development server... 98% after emitting CopyPlugin DONE Compiled successfully in 2584ms 22:59:59 App running at: - Local: http://localhost:8080/ - Network: http://192.168.10.185:8080/ Note that the development build is not optimized. To create a production build, run yarn build. 以上的启动命令serve是package.json文件中的配置.\n\u0026#34;scripts\u0026#34;: { \u0026#34;serve\u0026#34;: \u0026#34;vue-cli-service serve\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vue-cli-service build\u0026#34; }, ","permalink":"https://www.mfun.ink/2022/10/16/vue3-study-init/","summary":"\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003evue的安装就直接参考\u003ca href=\"https://cn.vuejs.org/guide/quick-start.html\"\u003e官方文档\u003c/a\u003e，描述的已经很详细了。\u003c/p\u003e\n\u003ch2 id=\"项目创建\"\u003e项目创建\u003c/h2\u003e\n\u003cp\u003e直接使用vue create + 项目名创建项目，默认有三种配置可选，vue2、vue3各有一个默认创建选项，也可以选第三种自定义项目创建要引入的features。\u003c/p\u003e","title":"Vue3学习笔记一.项目初始化"},{"content":"分布式限流器也是项目开发中常用的，基于redis incr指令可以比较方便快捷的实现一个分布式限流器，因为这个指令自身的原子性，所以不用开发者考虑计数过程的并发问题。下面是go代码实现。\n限流器相关属性 counter计数器，这里把计数器单独定义为了一个接口，方便使用不同的方式实现，比如下文中将要介绍基于redis实现。 window限流窗口，指计数时间周期，比如初始化为1000就是1秒内请求不得超过指定阈值limit。\nretryTimeout重试超时时间，用来控制达到限流阈值后，继续重试的超时时间。\n// Limiter 限流器 type Limiter struct { name string // 限流器名称 window int64 // 限流窗口 ms limit int64 // 限流阈值 retryTimeout int64 // 超时时间 counter Count // 计数器 } // Count 计数器 type Count interface { IncrBy(ctx context.Context, key string, num int64) (int64, error) } // NewLimiter 初始化 func NewLimiter(counter Count, name string, window int64, limit int64, retryTimeout int64) *Limiter { return \u0026amp;Limiter{ counter: counter, name: name, window: window, limit: limit, retryTimeout: retryTimeout, } } 具体方法 Allow 到达阈值后，不再重试，直接返回false，丢弃掉超过阈值的请求。\nAllowRetry 到达阈值后，在超时时间范围内进行重试。 wait 每次重试等待时间，保证重试是在下一个窗口，避免不必要的重试。使用随机数是为了尽量打散请求。\ngetKey 计算当前窗口，根据当前窗口拼接计数key。\n// AllowRetry 在超时时间内重试 func (l *Limiter) AllowRetry(ctx context.Context, key string, num int64) (bool, error) { ctxWithTimeout, _ := context.WithTimeout(ctx, time.Duration(l.retryTimeout)*time.Millisecond) var allow bool var err error for { allow, err = l.Allow(ctx, key, num) if err == nil { return allow, nil } if ctxWithTimeout.Err() != nil { return false, ctxWithTimeout.Err() } l.wait() } } // Allow 不重试 func (l *Limiter) Allow(ctx context.Context, key string, num int64) (bool, error) { return l.getToken(ctx, key, num) } // getToken 进行计数 func (l *Limiter) getToken(ctx context.Context, key string, num int64) (bool, error) { unionKey := l.getKey(key) num, err := l.counter.IncrBy(ctx, unionKey, num) if err != nil { return false, err } return num \u0026lt; l.limit, nil } // wait 每次重试等待时间 func (l *Limiter) wait() { randWait := l.window - rand.Int63n(l.window/2) time.Sleep(time.Duration(randWait) * time.Millisecond) } // getKey 获取计数key func (l *Limiter) getKey(key string) string { // 计算当前窗口 nowWindow := time.Now().UnixMilli() / l.window return fmt.Sprintf(\u0026#34;%s:%s:%d\u0026#34;, l.name, key, nowWindow) } redis 计数器 redis计数器实现就比较简单了，直接调用redis的incr方法。\n// RedisCounter 使用redis分布式限流 type RedisCounter struct { redisCli *redis.Client expire int64 } // IncrBy ...计数 func (r *RedisCounter) IncrBy(ctx context.Context, key string, num int64) (int64, error) { defer func() { _ = r.redisCli.Expire(ctx, key, time.Duration(r.expire)*time.Millisecond) }() return r.redisCli.IncrBy(ctx, key, num).Result() } 以上就是基于redis实现的分布式限流器，把计数器以接口形式组装进去，可以使代码更加通用，直接基于内存实现就是单机限流。不想基于redis实现，也可以基于其他方式实现。\n","permalink":"https://www.mfun.ink/2022/10/15/redis-current-limiter/","summary":"\u003cp\u003e分布式限流器也是项目开发中常用的，基于redis incr指令可以比较方便快捷的实现一个分布式限流器，因为这个指令自身的原子性，所以不用开发者考虑计数过程的并发问题。下面是go代码实现。\u003c/p\u003e","title":"基于redis实现一个简单的分布式限流器"},{"content":"最近经常用go写一些脚本，为了执行效率，一般会开启多个goroutine并发执行,脚本中通常会调用一些线上服务或者数据库读写数据，为了不影响线上服务运行,为了不影响线上服务运行就要对执行的goroutine数量进行限制，避免并发太大打垮线上服务。下面就简单写一个goroutine并发控制器。\n控制器实现 limiter属性以及初始化部分如下，\n// ConcurrentLimiter 并发控制 type ConcurrentLimiter struct { max int64 // 最大并发数 currNum atomic.Int64 // 当前已启动并发数 wg sync.WaitGroup // 保证全部goroutine执行完后退出 } func NewConcurrentLimiter(max int64) *ConcurrentLimiter { return \u0026amp;ConcurrentLimiter{ max: max, currNum: atomic.Int64{}, wg: sync.WaitGroup{}, } } 具体执行方法, 传入goroutine要执行的方法，以及所需参数。\nfunc (c *ConcurrentLimiter) Do(params interface{}, f func(params interface{})) { c.waitLimit() c.wg.Add(1) // 当前并发数量 c.currNum.Add(1) go func(params interface{}) { defer func() { c.wg.Done() c.currNum.Add(-1) }() f(params) }(params) } // 当前并发达到最大时，就无限等待 func (c *ConcurrentLimiter) waitLimit() { if c.max == 0 { return } for { if c.currNum.Load() \u0026lt; c.max { return } time.Sleep(time.Microsecond * 10) } } 因为都是直接启动goroutine异步执行，为了脚本能够优雅退出，我们需要在程序最后用WaitGroup控制一下miangoroutine 退出。\nfunc (c *ConcurrentLimiter) Wait() { c.wg.Wait() } 最后再加一个获取当前正在执行的goroutine数量的方法，方便统计\nfunc (c *ConcurrentLimiter) CurrNum() int64 { return c.currNum.Load() } 使用例子 简单写个test\nfunc TestConcurrentLimiter_Do(t *testing.T) { cl := NewConcurrentLimiter(2) f := func(params interface{}) { fmt.Println(\u0026#34;val: \u0026#34;, params) } go func() { for { fmt.Println(\u0026#34;curr num: \u0026#34;, cl.CurrNum()) time.Sleep(time.Microsecond * 100) } }() i := 0 for { cl.Do(i, f) i++ } } 通过输出,可以看到goroutine数量被控制在设置最大值以内\n=== RUN TestConcurrentLimiter_Do curr num: 2 curr num: 2 curr num: 1 curr num: 2 ","permalink":"https://www.mfun.ink/2022/10/15/goroutine-limit/","summary":"\u003cp\u003e最近经常用go写一些脚本，为了执行效率，一般会开启多个goroutine并发执行,脚本中通常会调用一些线上服务或者数据库读写数据，为了不影响线上服务运行,为了不影响线上服务运行就要对执行的goroutine数量进行限制，避免并发太大打垮线上服务。下面就简单写一个goroutine并发控制器。\u003c/p\u003e","title":"goroutine 并发数量限制"},{"content":"好未来 一面 自我介绍\n最近做到项目 没细聊\nredis 常用结构\nredis 宕机恢复 aop rdb\n连接池 获取句柄时并发控制\nmysql 引擎 区别\n索引结构 b树 b+树 二叉树\n算法 求数组交集 复杂度\n算法 链表 快慢指针\nhttp code 码\n常用orm框架\ntcp udp\n日志存储 elk\n接口稳定性监控\nsync map\nGMP\n垃圾回收\n你有什么想问的 问了下对面部门\n期望薪资\n二面 自我介绍 项目介绍 redis 相关 分布式锁 分布式可用性如何保证 mysql 引擎 b+树 索引左前缀原则 原理 grpc 相比http优越性 grpc-gateway gin 路由 中间件 链表交叉点 文本单词数量统计 最多的前几个 channel GMP 百度 一面 自我介绍\n项目介绍\n大秒 channel 使用 秒杀 异步缓存 长链接 epoll 三数求和\n二面 自我介绍\n项目介绍 中间穿插一些go基础知识\ntoken 加签 channel 使用场景 GMP 和线程相比为什么更轻量 map 如何有序 切片 redis\nsortset 跳表为啥不用b+树 mysql\nb树b+树 原子性如何保证的 事务隔离级别 原子性如何保证 隔离性如何保证 索引 触发条件 explain 获取索引触发情况 慢查询优化 设计题 获取朋友圈\n查询旋转数组\n有什么想问的\n你对我们这个部门有什么理解\n三面 聊项目 项目中遇到的问题怎么解决 和产品遇到分歧怎么办 个人发展 滴滴 go go 调度 goroutine是被阻塞到重新运行过程 go map 内存模型 channel 垃圾回收 内存逃逸 返回指针会不会发生内存逃逸 interface 底层结构 goroutine 泄露 如何排查 常见到goroutine泄露 如何避免 mysql 隔离级别 如何实现的 mvcc 原理 索引 b+树 b+树如何分裂 聚集索引 非聚集索引 索引创建原则 联合索引触发原则 分库分表原则 redis 哨兵 主从 持久化 支持数据类型 字符串 sds 实现原理 如何扩容 zsed底层数据结构 为什么 通过aop rdb 恢复过程， 会不会阻塞主线程 聊项目 你有什么想问了 字节 自我介绍 项目 redis 常用数据结构 字符串实现 为什么 zset 底层实现 跳表 压缩列表 分别什么情况下采取什么结构 实际应用 分布式锁 获取锁、删除锁的lua脚本 为什么不用 setnx setex hashmap 扩容 写时复制 长期没被访问的key如何处理 mysql 执行一次查询经历了哪些部分 优化器的做了什么 如何选择较优索引 单条sql查询时间过长 不涉及事务 如何排查 分页查询第一页和最后一页性能有没有差异 b树 b+树 二叉树 go map 为何输出是乱序的 缓存穿透 缓存击穿 http 502 504 499 接口响应时间过长 如何排查 下一个较大排列 概率题 ","permalink":"https://www.mfun.ink/2022/10/08/interview-2021/","summary":"\u003ch2 id=\"好未来\"\u003e好未来\u003c/h2\u003e\n\u003ch3 id=\"一面\"\u003e一面\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e自我介绍\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e最近做到项目 没细聊\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eredis 常用结构\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eredis 宕机恢复 aop rdb\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e连接池 获取句柄时并发控制\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003emysql 引擎 区别\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e索引结构 b树 b+树 二叉树\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e算法 求数组交集 复杂度\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e算法 链表 快慢指针\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ehttp code 码\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e常用orm框架\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003etcp udp\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e日志存储 elk\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e接口稳定性监控\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003esync map\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGMP\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e垃圾回收\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e你有什么想问的 问了下对面部门\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e期望薪资\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"2021年滴滴、腾讯视频、字节等面试记录"},{"content":"终端命令行 brew包管理工具 brew mac下的神器，类似linux的包管理工具，可以通过brew安装各种软件。 vector@vectordeMacBook-Pro  ~  brew -h Example usage: brew search [TEXT|/REGEX/] // 查找软件 brew info [FORMULA...] // 软件包信息 brew install FORMULA... // 安装 brew update // 更新 brew upgrade [FORMULA...] // 更新指定包 brew uninstall FORMULA... // 卸载 brew list [FORMULA...] // 已安装列表 Troubleshooting: brew config brew doctor brew install --verbose --debug FORMULA Contributing: brew create [URL [--no-fetch]] brew edit [FORMULA...] Further help: brew commands brew help [COMMAND] man brew https://docs.brew.sh iterm2 + oh-my-zsh + powerline 安装 iterm2 安装zsh并切换到zsh brew install zsh chsh -s /bin/zsh 安装antigen, oh-my-zsh插件管理工具, 编辑~/.zshrc文件 source ~/antigen.zsh #改成你的antigen安装路径 # Load the oh-my-zsh\u0026#39;s library. antigen use oh-my-zsh # Bundles from the default repo (robbyrussell\u0026#39;s oh-my-zsh). # oh-my-zsh 的一些常用插件 antigen bundle git antigen bundle heroku antigen bundle pip antigen bundle lein antigen bundle command-not-found # Syntax highlighting bundle. antigen bundle zsh-users/zsh-syntax-highlighting # 自动联想历史命令 antigen bundle zsh-users/zsh-autosuggestions # 主题 antigen theme agnoster # Tell Antigen that you\u0026#39;re done. antigen apply 安装powerline字体 修改iTerm2配置 打开iTerm2-\u0026gt;Preferences-\u0026gt;Profiles-Colors配置主题 打开iTerm2-\u0026gt;Preferences-\u0026gt;Profiles-Text配置字体 最终效果如下 根目录下创建目录 在/etc目录下使用root权限创建编辑synthetic.conf，添加想创建的目录, 如下home和后面的路径之间用tab符分隔，不能用空格，然后重启，这种方式会在/(根目录)下创建一个home目录软连接到/Users/xxx/data目录。可以直接通过cd /home 进入该目录。通过这种方式可以解决在根目录下创建文件无权限问题。\nhome\t/Users/xxx/data 安装tree命令 linux下是自带tree命令，可以用来查看文件目录结构，mac下需要手动安装\nbrew install tree // 显示前n级目录 tree -L 加数字 卸载锁定app 执行以下命令，解除锁定后可以正常卸载\nls -dleO@ /Applications/xxx sudo chflags -R noschg /Applications/xxx 启动项 通过系统设置-〉登录项查看 使用launchctl命令查看 # 查看用户级启动项 launchctl list 以上方式只能看到一部分，如过想看更加详细的启动项配置，可以到下面这些目录查看：\n// 用户级别启动项目 ls ~/Library/LaunchAgents // 系统级 ls /Library/LaunchAgents ls /Library/LaunchDaemons ","permalink":"https://www.mfun.ink/2020/11/18/mac-use/","summary":"\u003ch3 id=\"终端命令行\"\u003e终端命令行\u003c/h3\u003e\n\u003ch4 id=\"brew包管理工具\"\u003ebrew包管理工具\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://brew.sh/\"\u003ebrew\u003c/a\u003e mac下的神器，类似linux的包管理工具，可以通过brew安装各种软件。\u003c/li\u003e\n\u003c/ul\u003e","title":"MacOS 使用笔记"},{"content":"生成二进制可执行文件 首先，写一个go main函数，这里就简单输出以下hello world。\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;hello word\u0026#34;) } 执行go build -gcflags \u0026quot;-N -l\u0026quot; -ldflags=-compressdwarf=false -o main main.go生成可执行二进制文件。\n开启gdb调试 执行gdb main开始gdb调试。通过i files查看程序入口地址，再这个地址打上断点。\nLoading Go Runtime support. (gdb) i files Symbols from \u0026#34;/Users/vector/go/src/alg/source/main/main\u0026#34;. Local exec file: `/Users/vector/go/src/alg/source/main/main\u0026#39;, file type mach-o-x86-64. Entry point: 0x1063c80 0x0000000001001000 - 0x00000000010a6b73 is .text 0x00000000010a6b80 - 0x00000000010ee254 is __TEXT.__rodata 0x00000000010ee260 - 0x00000000010ee386 is __TEXT.__symbol_stub1 0x00000000010ee3a0 - 0x00000000010eeb40 is __TEXT.__typelink 0x00000000010eeb40 - 0x00000000010eebb0 is __TEXT.__itablink 0x00000000010eebb0 - 0x00000000010eebb0 is __TEXT.__gosymtab 0x00000000010eebc0 - 0x0000000001155c85 is __TEXT.__gopclntab 0x0000000001156000 - 0x0000000001156020 is __DATA.__go_buildinfo 0x0000000001156020 - 0x00000000011561a8 is __DATA.__nl_symbol_ptr 0x00000000011561c0 - 0x00000000011646c0 is __DATA.__noptrdata 0x00000000011646c0 - 0x000000000116b7f0 is .data 0x000000000116b800 - 0x000000000119b830 is .bss 0x000000000119b840 - 0x000000000119df08 is __DATA.__noptrbss (gdb) b *0x1063c80 Breakpoint 1 at 0x1063c80: file /usr/local/go/src/runtime/rt0_darwin_amd64.s, line 8. 执行run程序停在断点处，说明程序入口在/usr/local/go/src/runtime/rt0_darwin_amd64.s的第8行。\n(gdb) run Starting program: /Users/vector/go/src/alg/source/main/main [New Thread 0xc03 of process 99850] [New Thread 0x2903 of process 99850] warning: unhandled dyld version (16) Thread 2 hit Breakpoint 1, _rt0_amd64_darwin () at /usr/local/go/src/runtime/rt0_darwin_amd64.s:8 8 JMP _rt0_amd64(SB) 用编辑器打开go源码，入口程序执行_rt0_amd64(SB)\nTEXT _rt0_amd64_darwin(SB),NOSPLIT,$-8 JMP\t_rt0_amd64(SB) gdb输入s继续执行，找到_rt0_amd64()的位置\n(gdb) s _rt0_amd64 () at /usr/local/go/src/runtime/asm_amd64.s:15 15 MOVQ 0(SP), DI // argc (gdb) _rt0_amd64函数源码, 这部分主要是读取命令行参数argc、argv，分别读取到寄存器di、si，然后跳到runtime·rt0_go(SB)\nTEXT _rt0_amd64(SB),NOSPLIT,$-8 MOVQ\t0(SP), DI\t// argc LEAQ\t8(SP), SI\t// argv JMP\truntime·rt0_go(SB) gdb 继续执行，找到runtime.rt0_go\n_rt0_amd64 () at /usr/local/go/src/runtime/asm_amd64.s:15 15 MOVQ 0(SP), DI // argc [...] (gdb) s runtime.rt0_go () at /usr/local/go/src/runtime/asm_amd64.s:89 89 MOVQ DI, AX // argc (gdb) runtime.rt0_go 部分代码比较长，我们分块来看，首先是将命令行参数放到堆栈中，将栈顶寄存器SP进行16字节对齐。\nTEXT runtime·rt0_go(SB),NOSPLIT,$0 // copy arguments forward on an even stack MOVQ\tDI, AX\t// argc 把argc放到AX MOVQ\tSI, BX\t// argv 把argv方法BX SUBQ\t$(4*8+7), SP // 2args 2auto ANDQ\t$~15, SP // 内存16字节对齐 MOVQ\tAX, 16(SP) // argc 放到 SP + 16字节处 MOVQ\tBX, 24(SP) // argv 放到 SP + 24字节处 通过gdb调试看下这里sp地址的变化,首先是执行SUBQ\t$(4*8+7), SP前后，执行前0x7ffeefbff330，执行后地址0x7ffeefbff309，变化前后的十进制差是39=4*8+7，也就是这里通过移动SP指针分配39字节的内存。至于为什么要分配内存，应该是为了保存argc，argv。 MOVQ\tBX, 24(SP)是移动8字节的BX到SP+24字节处，这也就是为什么要分配4*8+7内存，要大于32字节。\n91 SUBQ $(4*8+7), SP // 2args 2auto (gdb) i frame Stack level 0, frame at 0x7ffeefbff338: rip = 0x10607e6 in runtime.rt0_go (/usr/local/go/src/runtime/asm_amd64.s:91); saved rip = 0x1 called by frame at 0x7ffeefbff340 source language asm. Arglist at 0x7ffeefbff328, args: Locals at 0x7ffeefbff328, Previous frame\u0026#39;s sp is 0x7ffeefbff338 Saved registers: // 执行前地址0x7ffeefbff330 rip at 0x7ffeefbff330 (gdb) s runtime.rt0_go () at /usr/local/go/src/runtime/asm_amd64.s:92 92 ANDQ $~15, SP (gdb) i frame Stack level 0, frame at 0x7ffeefbff311: rip = 0x10607ea in runtime.rt0_go (/usr/local/go/src/runtime/asm_amd64.s:92); saved rip = 0x11bf0 called by frame at 0x7ffeefbff319 source language asm. Arglist at 0x7ffeefbff301, args: Locals at 0x7ffeefbff301, Previous frame\u0026#39;s sp is 0x7ffeefbff311 Saved registers: // 执行后地址 0x7ffeefbff309 rip at 0x7ffeefbff309 下面继续看16字节对齐操作，执行ANDQ $~15, SP按位\u0026amp;将0x7ffeefbff309后16位变成0得到0x7ffeefbff300变成16的整数倍，这样做主要是因为CPU中的SSE指令一般都要求16字节对齐。\nruntime.rt0_go () at /usr/local/go/src/runtime/asm_amd64.s:92 92 ANDQ $~15, SP (gdb) i frame Stack level 0, frame at 0x7ffeefbff311: rip = 0x10607ea in runtime.rt0_go (/usr/local/go/src/runtime/asm_amd64.s:92); saved rip = 0x11bf0 called by frame at 0x7ffeefbff319 source language asm. Arglist at 0x7ffeefbff301, args: Locals at 0x7ffeefbff301, Previous frame\u0026#39;s sp is 0x7ffeefbff311 Saved registers: rip at 0x7ffeefbff309 (gdb) s runtime.rt0_go () at /usr/local/go/src/runtime/asm_amd64.s:93 93 MOVQ AX, 16(SP) (gdb) i frame Stack level 0, frame at 0x7ffeefbff308: rip = 0x10607ee in runtime.rt0_go (/usr/local/go/src/runtime/asm_amd64.s:93); saved rip = 0x7ffeefbff328 called by frame at 0x7ffeefbff310 source language asm. Arglist at 0x7ffeefbff2f8, args: Locals at 0x7ffeefbff2f8, Previous frame\u0026#39;s sp is 0x7ffeefbff308 Saved registers: rip at 0x7ffeefbff300 下面是针对g0的一些操作也是初始goroutine， g0的栈初始大小大约64k，从下面的代码中可以看到g_stackguard0是开启CGO时会用到的。\nMOVQ\t$runtime·g0(SB), DI //将g0放到 DI LEAQ\t(-64*1024+104)(SP), BX // 将SP-64*1024+104的地址放到BX MOVQ\tBX, g_stackguard0(DI) // 将BX赋值给g0.g_stackguard0 MOVQ\tBX, g_stackguard1(DI) // 将BX赋值给g0.g_stackguard1 MOVQ\tBX, (g_stack+stack_lo)(DI) // 将BX赋值g0.g_stack.stack_lo goroutine栈底部 MOVQ\tSP, (g_stack+stack_hi)(DI) // 将SP赋值g0.g_stack.stack_hi goroutine栈顶部 再往下就是关于cpu信息的处理以及CGO的初始化,这部分就略过，接着往下看是根据操作系统类型判断是否进行TLS的初始化，如果不满足这几个操作系统就执行TLS初始化并校验是否支持TLS，满足就直接执行ok部分的代码。\n#ifdef GOOS_plan9 // skip TLS setup on Plan 9 JMP ok #endif #ifdef GOOS_solaris // skip TLS setup on Solaris JMP ok #endif #ifdef GOOS_illumos // skip TLS setup on illumos JMP ok #endif #ifdef GOOS_darwin // skip TLS setup on Darwin JMP ok #endif // 将m0的m_tls地址放到DI寄存器 LEAQ\truntime·m0+m_tls(SB), DI // 对m0设置tls CALL\truntime·settls(SB) // store through it, to make sure it works // 将tls地址放到寄存器BX，也就是m0.m_tls[1]的地址 get_tls(BX) // 把常量0x123拷贝到BX保存的地址指向的位置也就是m0.m_tls MOVQ\t$0x123, g(BX) // 将m0.m_tls的值拷贝到AX MOVQ\truntime·m0+m_tls(SB), AX // 比较是否相等，支持TLS的话这里就是相等的 CMPQ\tAX, $0x123 JEQ 2(PC) // 不支持TLS就退出程序 CALL\truntime·abort(SB) 继续看ok部分的代码，这部分主要是进行g0和m0的绑定，变量类型校验，获取命令行参数，进行osinit，schedinit，最后启动一个新的goroutine，执行main函数\nok: // set the per-goroutine and per-mach \u0026#34;registers\u0026#34; // 进行g0和m0的双向绑定 get_tls(BX) LEAQ\truntime·g0(SB), CX MOVQ\tCX, g(BX) LEAQ\truntime·m0(SB), AX // save m-\u0026gt;g0 = g0 MOVQ\tCX, m_g0(AX) // save m0 to g0-\u0026gt;m MOVQ\tAX, g_m(CX) CLD\t// convention is D is always left cleared // 进行变量类型校验 CALL\truntime·check(SB) // 解析命令行参数 MOVL\t16(SP), AX\t// copy argc MOVL\tAX, 0(SP) MOVQ\t24(SP), AX\t// copy argv MOVQ\tAX, 8(SP) CALL\truntime·args(SB) // 进行系统信息获取，cpu核数，内存页大小 CALL\truntime·osinit(SB) // 进行各种初始化内存分配，gc等 CALL\truntime·schedinit(SB) // 启动系统监控任务 MOVQ\t$runtime·mainPC(SB), AX\t// entry PUSHQ\tAX PUSHQ\t$0\t// arg size // 创建一个新的goroution放到p中 CALL\truntime·newproc(SB) POPQ\tAX POPQ\tAX // 启动m，执行调度循环，执行goroutine CALL\truntime·mstart(SB) CALL\truntime·abort(SB)\t// mstart should never return RET // Prevent dead-code elimination of debugCallV1, which is // intended to be called by debuggers. MOVQ\t$runtime·debugCallV1(SB), AX RET 小结 大概了解了go启动流程，其中runtime.schedinit是启动过程内容最多的一块，下一步需要详细看下这部分的内容。\n","permalink":"https://www.mfun.ink/2020/10/27/go-start-up/","summary":"\u003ch3 id=\"生成二进制可执行文件\"\u003e生成二进制可执行文件\u003c/h3\u003e\n\u003cp\u003e首先，写一个go main函数，这里就简单输出以下hello world。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epackage main\n\nimport \u0026#34;fmt\u0026#34;\n\nfunc main()  {\n\tfmt.Println(\u0026#34;hello word\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e执行\u003ccode\u003ego build -gcflags \u0026quot;-N -l\u0026quot; -ldflags=-compressdwarf=false -o main main.go\u003c/code\u003e生成可执行二进制文件。\u003c/p\u003e\n\u003ch3 id=\"开启gdb调试\"\u003e开启gdb调试\u003c/h3\u003e\n\u003cp\u003e执行\u003ccode\u003egdb main\u003c/code\u003e开始gdb调试。通过i files查看程序入口地址，再这个地址打上断点。\u003c/p\u003e","title":"Go启动main函数都干了什么(一)"},{"content":"安装 直接使用brew install gdb 安装， 没有安装brew的需要先安装brew。\n问题 安装之后，使用过程中遇到这么一个错误:\nUnable to find Mach task port for process-id 33653: (os/kern) failure (0x5). (please check gdb is codesigned - see taskgated(8)) 这是因为Darwin kernel的权限控制问题，gdb调试需要有启动一个新的进程，并且要有这个进程的权限。解决方式如下：\n创建根证书\n打开钥匙串访问-证书助力-创建证书，创建一个代码签名的自签名根证书例如：gdb-cert。 执行 security find-certificate -c gdb-cert 查看创建的证书，创建成功的话输出如下： keychain: \u0026#34;/Users/vector/Library/Keychains/login.keychain-db\u0026#34; version: 512 class: 0x80001000 attributes: \u0026#34;alis\u0026#34;\u0026lt;blob\u0026gt;=\u0026#34;xxxx\u0026#34; \u0026#34;cenc\u0026#34;\u0026lt;uint32\u0026gt;=0x00000003 \u0026#34;ctyp\u0026#34;\u0026lt;uint32\u0026gt;=0x00000001 [...] 确保证书没有过期 security find-certificate -p -c gdb-cert | openssl x509 -checkend 0\n添加证书信任 创建gdb-entitlement.xml,添加以下内容 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;com.apple.security.cs.allow-jit\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;com.apple.security.cs.allow-unsigned-executable-memory\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;com.apple.security.cs.allow-dyld-environment-variables\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;com.apple.security.cs.disable-library-validation\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;com.apple.security.cs.disable-executable-page-protection\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;com.apple.security.cs.debugger\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;com.apple.security.get-task-allow\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; \u0026lt;/pre\u0026gt; 执行codesign --entitlements gdb-entitlement.xml -fs gdb-cert $(which gdb)。 执行codesign -vv $(which gdb)查看是否添加成功，输出如下\n$: codesign -vv $(which gdb) /usr/local/bin/gdb: valid on disk /usr/local/bin/gdb: satisfies its Designated Requirement 刷新系统证书和codesign数据\n执行sudo killall taskgated，重新运行gdb调试，没有再报错。 参考 gdb wiki PermissionsDarwin ","permalink":"https://www.mfun.ink/2020/10/26/macos-gdb-install/","summary":"\u003ch3 id=\"安装\"\u003e安装\u003c/h3\u003e\n\u003cp\u003e直接使用\u003ccode\u003ebrew install gdb\u003c/code\u003e 安装， 没有安装brew的需要先安装\u003ca href=\"https://brew.sh/\"\u003ebrew\u003c/a\u003e。\u003c/p\u003e\n\u003ch3 id=\"问题\"\u003e问题\u003c/h3\u003e\n\u003cp\u003e安装之后，使用过程中遇到这么一个错误:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eUnable to find Mach task port for process-id 33653: (os/kern) failure (0x5). (please check gdb is codesigned - see taskgated(8))\n\u003c/code\u003e\u003c/pre\u003e","title":"macos gdb解决Unable to find Mach task port for process-id"},{"content":"功能列表 支持linux、darwin 获取远程go版本列表 gvm remote 安装指定版本go gvm install [version] 列出本地已下载go gvm list 切换go版本 gvm use [version] 清理本地指定版本go gvm clear [version] 获取远程go版本列表实现 直接拉取go下载页面html源码，然后通过正则获取版本号\nres, err := http.Get(\u0026#34;https://golang.org/dl/\u0026#34;) if err != nil { return nil, err } pageContent, err := ioutil.ReadAll(res.Body) if err != nil { return nil, err } stableReg, err := regexp.Compile(`\u0026lt;div class=\u0026#34;toggleVisible\u0026#34; id=\u0026#34;go(.*?)\u0026#34;\u0026gt;`) if err != nil { return nil, err } stable := stableReg.FindAllStringSubmatch(string(pageContent), -1) unstableReg, err := regexp.Compile(`\u0026lt;div class=\u0026#34;toggle\u0026#34; id=\u0026#34;go(.*?)\u0026#34;\u0026gt;`) if err != nil { return nil, err } unstable := unstableReg.FindAllStringSubmatch(string(pageContent), -1) versionList := make([]string, len(stable)+len(unstable)) vListSource := append(stable, unstable...) for i := len(vListSource) - 1; i \u0026gt;= 0; i-- { versionList[i] = vListSource[i][1] } return versionList, nil 安装指定版本go 获取到版本后，根据版本拼接下载链接，下载到用户home目录下到.gvm文件夹，然后解压到/usr/local/目录\n// 获取用户home路径 func GetUserHomePath() (string, error) { currUser, err := user.Current() if err != nil { return \u0026#34;\u0026#34;, err } return currUser.HomeDir, nil } // 下载以及进度条的实现 type Reader struct { io.Reader Total int64 Current int64 } func (r *Reader) Read(p []byte) (n int, err error) { n, err = r.Reader.Read(p) r.Current += int64(n) percent := float64(r.Current*10000/r.Total) / 100 Show(percent) return } // Show 显示进度 func Show(percent float64) { total := 50 middle := int(percent) * total / 100.0 arr := make([]string, total) for j := 0; j \u0026lt; total; j++ { if j \u0026lt; middle-1 { arr[j] = \u0026#34;-\u0026#34; } else if j == middle-1 { arr[j] = \u0026#34;\u0026gt;\u0026#34; } else { arr[j] = \u0026#34; \u0026#34; } } bar := fmt.Sprintf(\u0026#34;[%s]\u0026#34;, strings.Join(arr, \u0026#34;\u0026#34;)) fmt.Printf(\u0026#34;\\r%s %% %.2f\u0026#34;, bar, percent) } func DownloadFileProgress(url, filename string) error { home, err := GetUserHomePath() if err != nil { return err } dir := home + \u0026#34;/.gvm/\u0026#34; _, err = os.Stat(dir) if err != nil \u0026amp;\u0026amp; !os.IsExist(err) { if err := os.MkdirAll(dir, os.ModePerm); err != nil { return err } } r, err := http.Get(url) if err != nil { return err } defer func() { _ = r.Body.Close() }() f, err := os.OpenFile(dir+filename, os.O_CREATE|os.O_RDWR, 0666) if err != nil { return err } defer func() { _ = f.Close() }() reader := \u0026amp;Reader{ Reader: r.Body, Total: r.ContentLength, } _, err = io.Copy(f, reader) if err != nil { return err } return nil } 解压到/usr/local/需要root权限，所以安装过程中,会要求输入管理员密码，关于go执行shell如何获取root权限如下：\ntarCmd := exec.Command(\u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;sudo rm -rf /usr/local/go \u0026amp;\u0026amp; sudo tar -zxf \u0026#34;+home+\u0026#34;/.gvm/\u0026#34;+fileName+\u0026#34; -C \u0026#34;+\u0026#34;/usr/local\u0026#34;) if _, err := tarCmd.Output(); err != nil { return err } 切换版本 切换版本如果没有找到要切换的版本会自动执行install下载相应版本go，如果本地以及下载就解压到/usr/local/目录\npath := home + \u0026#34;/.gvm/\u0026#34; + fileName _, err = os.Stat(path) // 当前版本不存在 if err != nil \u0026amp;\u0026amp; !os.IsExist(err) { fmt.Println(\u0026#34;download from origin\u0026#34;) if err := Install(version, goos, arch, \u0026#34;\u0026#34;); err != nil { log.Error(\u0026#34;install failed\u0026#34;, err) return } return } tarCmd := exec.Command(\u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;sudo rm -rf /usr/local/go \u0026amp;\u0026amp; sudo tar -zxf \u0026#34; + path + \u0026#34; -C \u0026#34; + \u0026#34;/usr/local\u0026#34;) if _, err := tarCmd.Output(); err != nil { log.Error(\u0026#34;change go version failed\u0026#34;, err) } 获取本地已下载列表 主要用到获取目录文件列表，以及正则获取版本号\n// 获取已下载列表 gvmDir := home + \u0026#34;/.gvm/\u0026#34; files, err := ioutil.ReadDir(gvmDir) if err != nil{ return nil, err } if len(files) == 0{ return nil, nil } reg := regexp.MustCompile(\u0026#34;go([0-9.]*)[.].*?.tar.gz\u0026#34;) versionList := []string{} for i := 0; i \u0026lt; len(files); i++{ version := reg.FindStringSubmatch(files[i].Name()) if len(version) \u0026gt; 1{ versionList = append(versionList, version[1]) } } // 获取当前go版本 goCMD := exec.Command(\u0026#34;go\u0026#34;, \u0026#34;version\u0026#34;) goVersionCMDRes, err := goCMD.Output() if err != nil{ log.Error(\u0026#34;get now use failed\u0026#34;, err) return } reg := regexp.MustCompile(\u0026#34;go.*?go([0-9.]*)[\\\\s].*?\u0026#34;) verionRes := reg.FindStringSubmatch(string(goVersionCMDRes)) if len(verionRes) \u0026gt; 1{ fmt.Println(\u0026#34;now use: \u0026#34;, verionRes[1]) } 清除已下载版本 直接使用go os.Remove 方法\ngvmDir := home + \u0026#34;/.gvm/\u0026#34; if param == \u0026#34;all\u0026#34;{ if err := os.RemoveAll(gvmDir); err != nil{ log.Error( err) return } } files, err := ioutil.ReadDir(gvmDir) if err != nil{ log.Error( err) } for _, v := range files{ if strings.Contains(v.Name(), param){ if err := os.Remove(gvmDir + v.Name()); err != nil{ log.Error( err) return } } } 小结 go版本兼容做的很好，很多时候无脑升最新稳定版就好，多版本共存的需求并不多，所以不是很有必要用到版本管理。造这个轮子的目的更多还是练习写代码，熟悉下go文件相关操作以及执行shell命令等。完整源码\n","permalink":"https://www.mfun.ink/2020/09/29/gvm/","summary":"\u003ch2 id=\"功能列表\"\u003e功能列表\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e支持linux、darwin\u003c/li\u003e\n\u003cli\u003e获取远程go版本列表 \u003ccode\u003egvm remote\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/images/gvm/remote.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"造轮子——go 版本控制(gvm)"},{"content":"非反射获取 根据conn类型，将conn断言成相应conn对象，在使用File方法获取file对象，至于为什么是file，参考unix、linux设计哲学：万物皆文件。拿到相应file后直接通过FD方法获取fd句柄。\nfunc getFD(conn net.Conn) int { tln := conn.(*net.TCPConn) f, err := tln.File() if err != nil{ return -1 } return int(f.Fd()) } 根据反射获取 func getFDReflect(conn net.Conn) int { tcpConn := reflect.Indirect(reflect.ValueOf(conn)).FieldByName(\u0026#34;conn\u0026#34;) fdVal := tcpConn.FieldByName(\u0026#34;fd\u0026#34;) pfdVal := reflect.Indirect(fdVal).FieldByName(\u0026#34;pfd\u0026#34;) return int(pfdVal.FieldByName(\u0026#34;Sysfd\u0026#34;).Int()) } 两种方式性能比较 非反射 func BenchmarkTest(b *testing.B) { b.ResetTimer() for i:=0; i \u0026lt; b.N; i++{ getFD(conn) } } // 结果 goos: darwin goarch: amd64 pkg: github.com/mengboy/1m-go-websockets/4_optimize_gobwas BenchmarkTest BenchmarkTest-8 14268442\t78.5 ns/op PASS 反射 func BenchmarkReflect(b *testing.B) { b.ResetTimer() for i:=0; i \u0026lt; b.N; i++{ getFDReflect(conn) } } // 结果 goos: darwin goarch: amd64 pkg: github.com/mengboy/1m-go-websockets/4_optimize_gobwas BenchmarkReflect BenchmarkReflect-8 2645677\t457 ns/op PASS 可以看到反射比起非反射还是性能还是差了几个数量级, 上一篇文章中的fd获取方法可以考虑使用分反射方式。\n","permalink":"https://www.mfun.ink/2020/09/27/gogetfd/","summary":"\u003ch2 id=\"非反射获取\"\u003e非反射获取\u003c/h2\u003e\n\u003cp\u003e根据conn类型，将conn断言成相应conn对象，在使用File方法获取file对象，至于为什么是file，参考unix、linux设计哲学：万物皆文件。拿到相应file后直接通过FD方法获取fd句柄。\u003c/p\u003e","title":"go 获取 net.conn fd 反射和非反射"},{"content":"原理 正常情况下，不使用epoll，每建立一个ws连接我们都会启一个goroutine来处理客户端发来的消息，如果客户端没有消息，这个goroutine就会阻塞在读消息的状态。有多少个连接就会有多少个goroutine，虽然goroutine比较轻量，但在大量连接的情况下还是比较耗费资源还是很大的。 使用epoll后会把所有ws连接的fd(文件描述符)放入一个epoll队列中，只启一个goroutine对epoll wait进行轮询获取缓冲区有内容的ws连接。这样就把之前要起n个goroutine变成了1个，随着连接数的增加性能的提升也会越来越明显。\n实践 具体github demo源码 ，参考1m-go-websockets ，原仓库只有linux下的实现，因为平时主要使用mac开发所以参考Linux的实现增加了mac下的实现。 demo中用到了两种websocket框架，分别是gorilla/websocket 和 gobwas/ws。实际应用中发现了一个问题，因为平时主要使用gorilla/websocket，并且它的start数也远超gobwas/ws，所以在引入epoll时首选还是gorilla/websocket，然后开发调试过程中客户端一开始并发发msg给服务端，服务端就会有消息漏掉没处理的情况。 举个例子，客户端多个消息并发通知到服务端，客户端发第三次消息了，服务端才可能处理第二次消息。很明显并不是每次消息都触发了epoll的回调事件，这里epoll使用的水平触发，根据水平触发的定义：当被监控的文件描述符上有可读写事件发生时，就会一直触发epoll回调，这里没有触发说明文件描述上没有可读事件，基本上可以猜测epoll还没来的及通知时，fd对应的内容已经被读取完毕了。 理想中的触发流程： 实际触发流程: 看到这里可能会有同学想问，既然msg2没有处理，那我们主动处理，不等epoll触发可不可以呢？我们看下gorilla/websocket读取消息的源码\nfor { connections, err := epoller.Wait() if err != nil { log.Printf(\u0026#34;Failed to epoll wait %v\u0026#34;, err) continue } time.Sleep(5) for _, conn := range connections { if conn == nil { break } _, msg, err := conn.ReadMessage() if err != nil { if err := epoller.Remove(conn); err != nil { log.Printf(\u0026#34;Failed to remove %v\u0026#34;, err) } conn.Close() } else { log.Printf(\u0026#34;msg: %s\u0026#34;, string(msg)) } } } } 从epoll wait拿到可读连接，到底下的读是一一对应的，我们如果想把conn 缓冲区处理完怎么办，只能接着循环 conn.ReadMessage() 但是这个函数并不会返回缓冲区是否处理完毕，当缓冲区和fd都没有东西读时它就被阻塞了，就是下面代码TODO部分无法实现，如果能够实现，epoll 就可以使用边沿触发的模式，理论上相比水平触发更高效。\nfunc Start() { for { connections, err := epoller.Wait() if err != nil { log.Printf(\u0026#34;Failed to epoll wait %v\u0026#34;, err) continue } time.Sleep(5) wg := \u0026amp;sync.WatiGroup{} for _, conn := range connections { if conn == nil { break } wg.Add(1) go func() { defer wg.done for { _, msg, err := conn.ReadMessage() if err != nil { if err := epoller.Remove(conn); err != nil { log.Printf(\u0026#34;Failed to remove %v\u0026#34;, err) } conn.Close() } else { log.Printf(\u0026#34;msg: %s\u0026#34;, string(msg)) } // TODO 没有内容可读时退出，等待下一次epoll触发 } }() } wg.Wait() } } 源码分析 为什么gorilla/websocket在这种场景下使用会有这种问题，而gobwas/ws没有？下面我们通过分析两者的读实现找下原因。\ngorilla/websocket 读实现 从 conn.ReadMessage() 点进去,可以看到这函数调了c.NextReader\nfunc (c *Conn) ReadMessage() (messageType int, p []byte, err error) { var r io.Reader messageType, r, err = c.NextReader() if err != nil { return messageType, nil, err } p, err = ioutil.ReadAll(r) return messageType, p, err } 再点进c.NextReader可以看到实际返回要读的对象是messageReader\nfunc (c *Conn) NextReader() (messageType int, r io.Reader, err error) { for c.readErr == nil { frameType, err := c.advanceFrame() if err != nil { c.readErr = hideTempErr(err) break } if frameType == TextMessage || frameType == BinaryMessage { c.messageReader = \u0026amp;messageReader{c} c.reader = c.messageReader if c.readDecompress { c.reader = c.newDecompressionReader(c.reader) } // 返回messageReader return frameType, c.reader, nil } } } 接着看messageReader的实现, 通过看messageReader实现的Read方法发现，实际读取的内容来自c.br\nfunc (r *messageReader) Read(b []byte) (int, error) { for c.readErr == nil { if c.readRemaining \u0026gt; 0 { if int64(len(b)) \u0026gt; c.readRemaining { b = b[:c.readRemaining] } // 实际从c.br读取的内容 n, err := c.br.Read(b) c.readErr = hideTempErr(err) if c.isServer { c.readMaskPos = maskBytes(c.readMaskKey, c.readMaskPos, b[:n]) } rem := c.readRemaining rem -= int64(n) c.setReadRemaining(rem) if c.readRemaining \u0026gt; 0 \u0026amp;\u0026amp; c.readErr == io.EOF { c.readErr = errUnexpectedEOF } return n, c.readErr } } c.br是go自身提供的缓冲读io的对象，看到这里已经很明朗了，就是这里在读的时候，把fd里要读的内容读到了本地缓冲区，导致上图msg2的时候epoll没有再次触发。\ntype Conn struct { conn net.Conn // Read fields reader io.ReadCloser // the current reader returned to the application readErr error br *bufio.Reader } 上面还有一个用到比较多的函数 c.advanceFrame()，这个函数是用来处理每次要读多少字节的，因为websocket消息是一帧一帧的，读的时候也不能读多或者读少。\ngobwas/ws读实现 gobwas/ws 是用的utils包里的ReadClientData方法读取client发的消息的，最终是调的readData方法\nfunc ReadClientData(rw io.ReadWriter) ([]byte, ws.OpCode, error) { return ReadData(rw, ws.StateServerSide) } func ReadData(rw io.ReadWriter, s ws.State) ([]byte, ws.OpCode, error) { return readData(rw, s, ws.OpText|ws.OpBinary) } readData具体实现,这里根据net.Conn连接创建了一个Reader\nfunc readData(rw io.ReadWriter, s ws.State, want ws.OpCode) ([]byte, ws.OpCode, error) { controlHandler := ControlFrameHandler(rw, s) // rw 就是 net.Conn rd := Reader{ Source: rw, State: s, CheckUTF8: true, SkipHeaderCheck: false, OnIntermediate: controlHandler, } for { hdr, err := rd.NextFrame() if err != nil { return nil, 0, err } if hdr.OpCode.IsControl() { if err := controlHandler(hdr, \u0026amp;rd); err != nil { return nil, 0, err } continue } if hdr.OpCode\u0026amp;want == 0 { if err := rd.Discard(); err != nil { return nil, 0, err } continue } bts, err := ioutil.ReadAll(\u0026amp;rd) return bts, hdr.OpCode, err } } Reader 结构， 可以看到这个是gobwas/ws自己实现的一个无buf Reader\ntype Reader struct { Source io.Reader State ws.State // SkipHeaderCheck disables checking header bits to be RFC6455 compliant. SkipHeaderCheck bool // CheckUTF8 enables UTF-8 checks for text frames payload. If incoming // bytes are not valid UTF-8 sequence, ErrInvalidUTF8 returned. CheckUTF8 bool // TODO(gobwas): add max frame size limit here. OnContinuation FrameHandlerFunc OnIntermediate FrameHandlerFunc opCode ws.OpCode // Used to store message op code on fragmentation. frame io.Reader // Used to as frame reader. raw io.LimitedReader // Used to discard frames without cipher. utf8 UTF8Reader // Used to check UTF8 sequences if CheckUTF8 is true. } 具体怎么读，读多少字节是在rd.NextFrame()方法中实现的，这里可以看到gobwas/ws每次都是直接读net.Conn也就是fd，并且每次当前帧的内容，所以刚好对应上图理想中的触发流程。\nfunc (r *Reader) NextFrame() (hdr ws.Header, err error) { // 解析当前帧报文 hdr, err = ws.ReadHeader(r.Source) if err == io.EOF \u0026amp;\u0026amp; r.fragmented() { err = io.ErrUnexpectedEOF } if err == nil \u0026amp;\u0026amp; !r.SkipHeaderCheck { err = ws.CheckHeader(hdr, r.State) } if err != nil { return hdr, err } // 设置读取长度， 这里r.Source 就是net.Conn r.raw = io.LimitedReader{r.Source, hdr.Length} frame := io.Reader(\u0026amp;r.raw) if hdr.Masked { frame = NewCipherReader(frame, hdr.Mask) } if r.fragmented() { if hdr.OpCode.IsControl() { if cb := r.OnIntermediate; cb != nil { err = cb(hdr, frame) } if err == nil { // Ensure that src is empty. // 直接从net.Conn读取hdr.Length长度的内容 _, err = io.Copy(ioutil.Discard, \u0026amp;r.raw) } return } } else { r.opCode = hdr.OpCode } if r.CheckUTF8 \u0026amp;\u0026amp; (hdr.OpCode == ws.OpText || (r.fragmented() \u0026amp;\u0026amp; r.opCode == ws.OpText)) { r.utf8.Source = frame frame = \u0026amp;r.utf8 } // Save reader with ciphering and other streaming checks. r.frame = frame if hdr.OpCode == ws.OpContinuation { if cb := r.OnContinuation; cb != nil { err = cb(hdr, frame) } } if hdr.Fin { r.State = r.State.Clear(ws.StateFragmented) } else { r.State = r.State.Set(ws.StateFragmented) } return } 两种方式的读比较 gorilla/websocket加了buf读的方式理论上比gobwas/ws性能更高，如果能提供个buf和fd已读完读返回就好了，这样就可以直接使用epoll边沿触发模式。如果实在想用gorilla/websocket，这里也有一个解决方案，就是客户端加一个ping的控制帧消息，gorilla/websocket在接收到ping/pong之类的控制帧消息时，不会把这些消息暴漏给用户处理，而是在内部自己处理，处理完之后会接着处理剩下的消息，直到处理的消息不是ping/pong为止，这样就可以使用ping控制型帧强制触发epoll事件，保证业务消息能够及时处理。\n参考以及源码 1m-go-websockets 百万 Go TCP 连接的思考: epoll方式减少资源占用 ","permalink":"https://www.mfun.ink/2020/09/15/websocket-epoll/","summary":"\u003ch2 id=\"原理\"\u003e原理\u003c/h2\u003e\n\u003cp\u003e正常情况下，不使用epoll，每建立一个ws连接我们都会启一个goroutine来处理客户端发来的消息，如果客户端没有消息，这个goroutine就会阻塞在读消息的状态。有多少个连接就会有多少个goroutine，虽然goroutine比较轻量，但在大量连接的情况下还是比较耗费资源还是很大的。\n使用epoll后会把所有ws连接的fd(文件描述符)放入一个epoll队列中，只启一个goroutine对epoll wait进行轮询获取缓冲区有内容的ws连接。这样就把之前要起n个goroutine变成了1个，随着连接数的增加性能的提升也会越来越明显。\u003c/p\u003e","title":"websocket引入epoll机制"},{"content":"什么是sse sse 指 serve send events，是一种基于http的服务端想客户端推送事件的技术，通常http请求都是请求\u0026ndash;\u0026gt;应答的模式，一次request\u0026ndash;\u0026gt;response结束后，连接就断开了，前端需要请求新的资源就需要重新建立连接，再次发起请求，当然http2.0后可以使用多路复用，不必建立新的连接。而sse指连接建立成功后，后端可以不断向前端推送消息。\nsse 连接的header Content-Type: text/event-stream，后端响应可以在EventStream选项卡中看到 其他具体的api介绍，比如web端是通过什么接口处理后端推送，以及后端推送的数据格式可以参考MDN文档\nhttp2.0 前后的sse http2一个最大的特性是引入流的多路复用机制，sse在http2.0前后的一个差异也主要是因为多路用。\nhttp1.x的sse http1.x没有多路复用，在已建立sse的情况下，如果前端想要发消息给后端就需要建立新的连接。这对于需要前端频繁向后端请求资源的场景是一个巨大的消耗。 图中示例c1、c2是来自两个sse连接的推送，chrome 调试里可以看到协议是http1.1以及connection id 分别是9003、9307，这就表示http1 后端推送和前端请求没法在同一个连接里进行。http1下还有一个限制是同一域名sse连接数和浏览器最大http并发连接数一样，一般是6个，可以使用demo打开3个tab建立6个连接后再打开一个具体观察，而http2.0这个数默认是100。MDN文档里也有对这个的说明。\nhttp2的sse 由于http2的多路复用，可以明显的看到这里两个sse的连接的connection ID都是15522，说明两个sse用的是同一个http连接。也就是说前端向后端请求和后端向前端推送可以在同一个连接里完成，有接触过websocket的同学会发现http2的sse基本上可以取代websocket。websocket在同链路上的全双工通信，http2的sse也可以实现。\n使用场景 聊天室的消息推送，直播过程中的消息推送活动推送，某些场景下的状态更改等。任何需要高频http轮询或者websocket的场景都可以使用sse替代。使用sse替代的一些优势，如果是替代http轮询很明显不需要前端再发请求了，会节省下处理前端请求的资源；如果是替代websocket，http1的sse还不能完全替代websocket，但是http2的完全可以，http2的多路复用完美的解决了建立新连接带来的巨大性能消耗，基本上两者都是同一连接上的全双工通信。\n参考 http1 sse demo http2 sse demo sse MDN ","permalink":"https://www.mfun.ink/2020/09/12/sse/","summary":"\u003ch3 id=\"什么是sse\"\u003e什么是sse\u003c/h3\u003e\n\u003cp\u003esse 指 serve send events，是一种基于http的服务端想客户端推送事件的技术，通常http请求都是请求\u0026ndash;\u0026gt;应答的模式，一次request\u0026ndash;\u0026gt;response结束后，连接就断开了，前端需要请求新的资源就需要重新建立连接，再次发起请求，当然http2.0后可以使用多路复用，不必建立新的连接。而sse指连接建立成功后，后端可以不断向前端推送消息。\u003c/p\u003e","title":"sse(serve send events) 服务端推送技术"}]